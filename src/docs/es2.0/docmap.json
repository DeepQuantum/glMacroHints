{
    "glActiveTexture": {
        "signature": "void glActiveTexture(GLenum texture)",
        "purpose": "select active texture unit",
        "parameters": {
            "texture": "<listitem> <para> Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. <parameter>texture</parameter> must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to (`GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS` - 1). The initial value is `GL_TEXTURE0`. </para> </listitem>"
        }
    },
    "glAttachShader": {
        "signature": "void glAttachShader(GLuint program, GLuint shader)",
        "purpose": "attach a shader object to a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to which a shader object will be attached.</para> </listitem>",
            "shader": "<listitem> <para>Specifies the shader object that is to be attached.</para> </listitem>"
        }
    },
    "glBindAttribLocation": {
        "signature": "void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)",
        "purpose": "associate a generic vertex attribute index with a named attribute variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object in which the association is to be made.</para> </listitem>",
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be bound.</para> </listitem>",
            "name": "<listitem> <para>Specifies a null terminated string containing the name of the vertex shader attribute variable to which <parameter>index</parameter> is to be bound.</para> </listitem>"
        }
    },
    "glBindBuffer": {
        "signature": "void glBindBuffer(GLenum target, GLuint buffer)",
        "purpose": "bind a named buffer object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target to which the buffer object is bound. The symbolic constant must be `GL_ARRAY_BUFFER` or `GL_ELEMENT_ARRAY_BUFFER`. </para> </listitem>",
            "buffer": "<listitem> <para> Specifies the name of a buffer object. </para> </listitem>"
        }
    },
    "glBindFramebuffer": {
        "signature": "void glBindFramebuffer(GLenum target, GLuint framebuffer)",
        "purpose": "bind a named framebuffer object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target to which the framebuffer object is bound. The symbolic constant must be `GL_FRAMEBUFFER`. </para> </listitem>",
            "framebuffer": "<listitem> <para> Specifies the name of a framebuffer object. </para> </listitem>"
        }
    },
    "glBindRenderbuffer": {
        "signature": "void glBindRenderbuffer(GLenum target, GLuint renderbuffer)",
        "purpose": "bind a named renderbuffer object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target to which the renderbuffer object is bound. The symbolic constant must be `GL_RENDERBUFFER`. </para> </listitem>",
            "renderbuffer": "<listitem> <para> Specifies the name of a renderbuffer object. </para> </listitem>"
        }
    },
    "glBindTexture": {
        "signature": "void glBindTexture(GLenum target, GLuint texture)",
        "purpose": "bind a named texture to a texturing target",
        "parameters": {
            "target": "<listitem> <para> Specifies the target of the active texture unit to which the texture is bound. Must be either `GL_TEXTURE_2D` or `GL_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "texture": "<listitem> <para> Specifies the name of a texture. </para> </listitem>"
        }
    },
    "glBlendColor": {
        "signature": "void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)",
        "purpose": "set the blend color",
        "parameters": {
            "red": "<listitem> <para> specify the components of `GL_BLEND_COLOR` </para> </listitem>"
        }
    },
    "glBlendEquation": {
        "signature": "void glBlendEquation(GLenum mode)",
        "purpose": "specify the equation used for both the RGB blend equation and the Alpha blend equation",
        "parameters": {
            "mode": "<listitem> <para> specifies how source and destination colors are combined. It must be `GL_FUNC_ADD`, `GL_FUNC_SUBTRACT`, or `GL_FUNC_REVERSE_SUBTRACT`. </para> </listitem>"
        }
    },
    "glBlendEquationSeparate": {
        "signature": "void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)",
        "purpose": "set the RGB blend equation and the alpha blend equation separately",
        "parameters": {
            "modeRGB": "<listitem> <para> specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be `GL_FUNC_ADD`, `GL_FUNC_SUBTRACT`, or `GL_FUNC_REVERSE_SUBTRACT`. </para> </listitem>",
            "modeAlpha": "<listitem> <para> specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be `GL_FUNC_ADD`, `GL_FUNC_SUBTRACT`, or `GL_FUNC_REVERSE_SUBTRACT`. </para> </listitem>"
        }
    },
    "glBlendFunc": {
        "signature": "void glBlendFunc(GLenum sfactor, GLenum dfactor)",
        "purpose": "specify pixel arithmetic",
        "parameters": {
            "sfactor": "<listitem> <para> Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: `GL_ZERO`, `GL_ONE`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_DST_COLOR`, `GL_ONE_MINUS_DST_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, `GL_DST_ALPHA`, `GL_ONE_MINUS_DST_ALPHA`, `GL_CONSTANT_COLOR`, `GL_ONE_MINUS_CONSTANT_COLOR`, `GL_CONSTANT_ALPHA`, `GL_ONE_MINUS_CONSTANT_ALPHA`, and `GL_SRC_ALPHA_SATURATE`. The initial value is `GL_ONE`. </para> </listitem>",
            "dfactor": "<listitem> <para> Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: `GL_ZERO`, `GL_ONE`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_DST_COLOR`, `GL_ONE_MINUS_DST_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, `GL_DST_ALPHA`, `GL_ONE_MINUS_DST_ALPHA`. `GL_CONSTANT_COLOR`, `GL_ONE_MINUS_CONSTANT_COLOR`, `GL_CONSTANT_ALPHA`, and `GL_ONE_MINUS_CONSTANT_ALPHA`. The initial value is `GL_ZERO`. </para> </listitem>"
        }
    },
    "glBlendFuncSeparate": {
        "signature": "void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)",
        "purpose": "specify pixel arithmetic for RGB and alpha components separately",
        "parameters": {
            "srcRGB": "<listitem> <para> Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: `GL_ZERO`, `GL_ONE`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_DST_COLOR`, `GL_ONE_MINUS_DST_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, `GL_DST_ALPHA`, `GL_ONE_MINUS_DST_ALPHA`, `GL_CONSTANT_COLOR`, `GL_ONE_MINUS_CONSTANT_COLOR`, `GL_CONSTANT_ALPHA`, `GL_ONE_MINUS_CONSTANT_ALPHA`, and `GL_SRC_ALPHA_SATURATE`. The initial value is `GL_ONE`. </para> </listitem>",
            "dstRGB": "<listitem> <para> Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: `GL_ZERO`, `GL_ONE`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_DST_COLOR`, `GL_ONE_MINUS_DST_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, `GL_DST_ALPHA`, `GL_ONE_MINUS_DST_ALPHA`. `GL_CONSTANT_COLOR`, `GL_ONE_MINUS_CONSTANT_COLOR`, `GL_CONSTANT_ALPHA`, and `GL_ONE_MINUS_CONSTANT_ALPHA`. The initial value is `GL_ZERO`. </para> </listitem>",
            "srcAlpha": "<listitem> <para> Specified how the alpha source blending factor is computed. The same symbolic constants are accepted as for <parameter>srcRGB</parameter>. The initial value is `GL_ONE`. </para> </listitem>",
            "dstAlpha": "<listitem> <para> Specified how the alpha destination blending factor is computed. The same symbolic constants are accepted as for <parameter>dstRGB</parameter>. The initial value is `GL_ZERO`. </para> </listitem>"
        }
    },
    "glBufferData": {
        "signature": "void glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage)",
        "purpose": "create and initialize a buffer object's data store",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER` or `GL_ELEMENT_ARRAY_BUFFER`. </para> </listitem>",
            "size": "<listitem> <para> Specifies the size in bytes of the buffer object's new data store. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to data that will be copied into the data store for initialization, or `NULL` if no data is to be copied. </para> </listitem>",
            "usage": "<listitem> <para> Specifies the expected usage pattern of the data store. The symbolic constant must be `GL_STREAM_DRAW`, `GL_STATIC_DRAW`, or `GL_DYNAMIC_DRAW`. </para> </listitem>"
        }
    },
    "glBufferSubData": {
        "signature": "void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data)",
        "purpose": "update a subset of a buffer object's data store",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER` or `GL_ELEMENT_ARRAY_BUFFER`. </para> </listitem>",
            "offset": "<listitem> <para> Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes. </para> </listitem>",
            "size": "<listitem> <para> Specifies the size in bytes of the data store region being replaced. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the new data that will be copied into the data store. </para> </listitem>"
        }
    },
    "glCheckFramebufferStatus": {
        "signature": "GLenum glCheckFramebufferStatus(GLenum target)",
        "purpose": "return the framebuffer completeness status of a framebuffer object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target framebuffer object. The symbolic constant must be `GL_FRAMEBUFFER`. </para> </listitem>"
        }
    },
    "glClear": {
        "signature": "void glClear(GLbitfield mask)",
        "purpose": "clear buffers to preset values",
        "parameters": {
            "mask": "<listitem> <para> Bitwise OR of masks that indicate the buffers to be cleared. The three masks are `GL_COLOR_BUFFER_BIT`, `GL_DEPTH_BUFFER_BIT`, and `GL_STENCIL_BUFFER_BIT`. </para> </listitem>"
        }
    },
    "glClearColor": {
        "signature": "void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)",
        "purpose": "specify clear values for the color buffers",
        "parameters": {
            "red": "<listitem> <para> Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0. </para> </listitem>"
        }
    },
    "glClearDepthf": {
        "signature": "void glClearDepthf(GLclampf depth)",
        "purpose": "specify the clear value for the depth buffer",
        "parameters": {
            "depth": "<listitem> <para> Specifies the depth value used when the depth buffer is cleared. The initial value is 1. </para> </listitem>"
        }
    },
    "glClearStencil": {
        "signature": "void glClearStencil(GLint s)",
        "purpose": "specify the clear value for the stencil buffer",
        "parameters": {
            "s": "<listitem> <para> Specifies the index used when the stencil buffer is cleared. The initial value is 0. </para> </listitem>"
        }
    },
    "glColorMask": {
        "signature": "void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)",
        "purpose": "enable and disable writing of frame buffer color components",
        "parameters": {
            "red": "<listitem> <para> Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all `GL_TRUE`, indicating that the color components can be written. </para> </listitem>"
        }
    },
    "glCompileShader": {
        "signature": "void glCompileShader(GLuint shader)",
        "purpose": "compile a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the shader object to be compiled.</para> </listitem>"
        }
    },
    "glCompressedTexImage2D": {
        "signature": "void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data)",
        "purpose": "specify a two-dimensional texture image in a compressed format",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture of the active texture unit. Must be `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "internalformat": "<listitem> <para> Specifies the format of the compressed image data stored at address <parameter>data</parameter>. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be 0. </para> </listitem>",
            "imageSize": "<listitem> <para> Specifies the number of unsigned bytes of image data starting at the address specified by <parameter>data</parameter>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the compressed image data in memory. </para> </listitem>"
        }
    },
    "glCompressedTexSubImage2D": {
        "signature": "void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)",
        "purpose": "specify a two-dimensional texture subimage in a compressed format",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture of the active texture unit. Must be `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "yoffset": "<listitem> <para> Specifies a texel offset in the y direction within the texture array. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture subimage. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the compressed image data stored at address <parameter>data</parameter>. </para> </listitem>",
            "imageSize": "<listitem> <para> Specifies the number of unsigned bytes of image data starting at the address specified by <parameter>data</parameter>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the compressed image data in memory. </para> </listitem>"
        }
    },
    "glCopyTexImage2D": {
        "signature": "void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)",
        "purpose": "copy pixels into a 2D texture image",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture of the active texture unit. Must be `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "internalformat": "<listitem> <para> Specifies the internal format of the texture. Must be one of the following symbolic constants: `GL_ALPHA`, `GL_LUMINANCE`, `GL_LUMINANCE_ALPHA`, `GL_RGB`, or `GL_RGBA`. </para> </listitem>",
            "x": "<listitem> <para> Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be 0. </para> </listitem>"
        }
    },
    "glCopyTexSubImage2D": {
        "signature": "void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "copy a two-dimensional texture subimage",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture of the active texture unit. Must be `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "yoffset": "<listitem> <para> Specifies a texel offset in the y direction within the texture array. </para> </listitem>",
            "x": "<listitem> <para> Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture subimage. </para> </listitem>"
        }
    },
    "glCreateProgram": {
        "signature": "GLuint glCreateProgram(void)",
        "purpose": "create a program object",
        "parameters": {}
    },
    "glCreateShader": {
        "signature": "GLuint glCreateShader(GLenum shaderType)",
        "purpose": "create a shader object",
        "parameters": {
            "shaderType": "<listitem> <para>Specifies the type of shader to be created. Must be either `GL_VERTEX_SHADER` or `GL_FRAGMENT_SHADER`.</para> </listitem>"
        }
    },
    "glCullFace": {
        "signature": "void glCullFace(GLenum mode)",
        "purpose": "specify whether front- or back-facing polygons can be culled",
        "parameters": {
            "mode": "<listitem> <para> Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants `GL_FRONT`, `GL_BACK`, and `GL_FRONT_AND_BACK` are accepted. The initial value is `GL_BACK`. </para> </listitem>"
        }
    },
    "glDeleteBuffers": {
        "signature": "void glDeleteBuffers(GLsizei n, const GLuint * buffers)",
        "purpose": "delete named buffer objects",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of buffer objects to be deleted. </para> </listitem>",
            "buffers": "<listitem> <para> Specifies an array of buffer objects to be deleted. </para> </listitem>"
        }
    },
    "glDeleteFramebuffers": {
        "signature": "void glDeleteFramebuffers(GLsizei n, const GLuint * framebuffers)",
        "purpose": "delete named framebuffer objects",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of framebuffer objects to be deleted. </para> </listitem>",
            "framebuffers": "<listitem> <para> Specifies an array of framebuffer objects to be deleted. </para> </listitem>"
        }
    },
    "glDeleteProgram": {
        "signature": "void glDeleteProgram(GLuint program)",
        "purpose": "delete a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be deleted.</para> </listitem>"
        }
    },
    "glDeleteRenderbuffers": {
        "signature": "void glDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers)",
        "purpose": "delete named renderbuffer objects",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of renderbuffer objects to be deleted. </para> </listitem>",
            "renderbuffers": "<listitem> <para> Specifies an array of renderbuffer objects to be deleted. </para> </listitem>"
        }
    },
    "glDeleteShader": {
        "signature": "void glDeleteShader(GLuint shader)",
        "purpose": "delete a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the shader object to be deleted.</para> </listitem>"
        }
    },
    "glDeleteTextures": {
        "signature": "void glDeleteTextures(GLsizei n, const GLuint * textures)",
        "purpose": "delete named textures",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of textures to be deleted. </para> </listitem>",
            "textures": "<listitem> <para> Specifies an array of textures to be deleted. </para> </listitem>"
        }
    },
    "glDepthFunc": {
        "signature": "void glDepthFunc(GLenum func)",
        "purpose": "specify the value used for depth buffer comparisons",
        "parameters": {
            "func": "<listitem> <para> Specifies the depth comparison function. Symbolic constants `GL_NEVER`, `GL_LESS`, `GL_EQUAL`, `GL_LEQUAL`, `GL_GREATER`, `GL_NOTEQUAL`, `GL_GEQUAL`, and `GL_ALWAYS` are accepted. The initial value is `GL_LESS`. </para> </listitem>"
        }
    },
    "glDepthMask": {
        "signature": "void glDepthMask(GLboolean flag)",
        "purpose": "enable or disable writing into the depth buffer",
        "parameters": {
            "flag": "<listitem> <para> Specifies whether the depth buffer is enabled for writing. If <parameter>flag</parameter> is `GL_FALSE`, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled. </para> </listitem>"
        }
    },
    "glDepthRangef": {
        "signature": "void glDepthRangef(GLclampf nearVal, GLclampf farVal)",
        "purpose": "specify mapping of depth values from normalized device coordinates to window coordinates",
        "parameters": {
            "nearVal": "<listitem> <para> Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0. </para> </listitem>",
            "farVal": "<listitem> <para> Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1. </para> </listitem>"
        }
    },
    "glDetachShader": {
        "signature": "void glDetachShader(GLuint program, GLuint shader)",
        "purpose": "detach a shader object from a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object from which to detach the shader object.</para> </listitem>",
            "shader": "<listitem> <para>Specifies the shader object to be detached.</para> </listitem>"
        }
    },
    "glDrawArrays": {
        "signature": "void glDrawArrays(GLenum mode, GLint first, GLsizei count)",
        "purpose": "render primitives from array data",
        "parameters": {
            "mode": "<listitem> <para> Specifies what kind of primitives to render. Symbolic constants `GL_POINTS`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_LINES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, and `GL_TRIANGLES` are accepted. </para> </listitem>",
            "first": "<listitem> <para> Specifies the starting index in the enabled arrays. </para> </listitem>",
            "count": "<listitem> <para> Specifies the number of indices to be rendered. </para> </listitem>"
        }
    },
    "glDrawElements": {
        "signature": "void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices)",
        "purpose": "render primitives from array data",
        "parameters": {
            "mode": "<listitem> <para> Specifies what kind of primitives to render. Symbolic constants `GL_POINTS`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_LINES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, and `GL_TRIANGLES` are accepted. </para> </listitem>",
            "count": "<listitem> <para> Specifies the number of elements to be rendered. </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of the values in <parameter>indices</parameter>. Must be `GL_UNSIGNED_BYTE` or `GL_UNSIGNED_SHORT`. </para> </listitem>",
            "indices": "<listitem> <para> Specifies a pointer to the location where the indices are stored. </para> </listitem>"
        }
    },
    "glEnable": {
        "signature": "void glEnable(GLenum cap)",
        "purpose": "enable or disable server-side GL capabilities",
        "parameters": {
            "cap": "<listitem> <para> Specifies a symbolic constant indicating a GL capability. </para> </listitem>"
        }
    },
    "glDisable": {
        "signature": "void glDisable(GLenum cap)",
        "purpose": "enable or disable server-side GL capabilities",
        "parameters": {
            "cap": "<listitem> <para> Specifies a symbolic constant indicating a GL capability. </para> </listitem>"
        }
    },
    "glEnableVertexAttribArray": {
        "signature": "void glEnableVertexAttribArray(GLuint index)",
        "purpose": "enable or disable a generic vertex attribute array",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be enabled or disabled.</para> </listitem>"
        }
    },
    "glDisableVertexAttribArray": {
        "signature": "void glDisableVertexAttribArray(GLuint index)",
        "purpose": "enable or disable a generic vertex attribute array",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be enabled or disabled.</para> </listitem>"
        }
    },
    "glFinish": {
        "signature": "void glFinish( void)",
        "purpose": "block until all GL execution is complete",
        "parameters": {}
    },
    "glFlush": {
        "signature": "void glFlush( void)",
        "purpose": "force execution of GL commands in finite time",
        "parameters": {}
    },
    "glFramebufferRenderbuffer": {
        "signature": "void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)",
        "purpose": "attach a renderbuffer object to a framebuffer object",
        "parameters": {
            "target": "<listitem> <para>Specifies the framebuffer target. The symbolic constant must be `GL_FRAMEBUFFER`.</para> </listitem>",
            "attachment": "<listitem> <para>Specifies the attachment point to which <parameter>renderbuffer</parameter> should be attached. Must be one of the following symbolic constants: `GL_COLOR_ATTACHMENT0`, `GL_DEPTH_ATTACHMENT`, or `GL_STENCIL_ATTACHMENT`.</para> </listitem>",
            "renderbuffertarget": "<listitem> <para>Specifies the renderbuffer target. The symbolic constant must be `GL_RENDERBUFFER`.</para> </listitem>",
            "renderbuffer": "<listitem> <para>Specifies the renderbuffer object that is to be attached.</para> </listitem>"
        }
    },
    "glFramebufferTexture2D": {
        "signature": "void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)",
        "purpose": "attach a texture image to a framebuffer object",
        "parameters": {
            "target": "<listitem> <para>Specifies the framebuffer target. The symbolic constant must be `GL_FRAMEBUFFER`.</para> </listitem>",
            "attachment": "<listitem> <para>Specifies the attachment point to which an image from <parameter>texture</parameter> should be attached. Must be one of the following symbolic constants: `GL_COLOR_ATTACHMENT0`, `GL_DEPTH_ATTACHMENT`, or `GL_STENCIL_ATTACHMENT`.</para> </listitem>",
            "textarget": "<listitem> <para>Specifies the texture target. Must be one of the following symbolic constants: `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`.</para> </listitem>",
            "texture": "<listitem> <para>Specifies the texture object whose image is to be attached.</para> </listitem>",
            "level": "<listitem> <para>Specifies the mipmap level of the texture image to be attached, which must be 0.</para> </listitem>"
        }
    },
    "glFrontFace": {
        "signature": "void glFrontFace(GLenum mode)",
        "purpose": "define front- and back-facing polygons",
        "parameters": {
            "mode": "<listitem> <para> Specifies the orientation of front-facing polygons. `GL_CW` and `GL_CCW` are accepted. The initial value is `GL_CCW`. </para> </listitem>"
        }
    },
    "glGenBuffers": {
        "signature": "void glGenBuffers(GLsizei n, GLuint * buffers)",
        "purpose": "generate buffer object names",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of buffer object names to be generated. </para> </listitem>",
            "buffers": "<listitem> <para> Specifies an array in which the generated buffer object names are stored. </para> </listitem>"
        }
    },
    "glGenerateMipmap": {
        "signature": "void glGenerateMipmap(GLenum target)",
        "purpose": "generate a complete set of mipmaps for a texture object",
        "parameters": {
            "target": "<listitem> <para>Specifies the texture target of the active texture unit to which the texture object is bound whose mipmaps will be generated. Must be one of the following symbolic constants: `GL_TEXTURE_2D` or `GL_TEXTURE_CUBE_MAP`.</para> </listitem>"
        }
    },
    "glGenFramebuffers": {
        "signature": "void glGenFramebuffers(GLsizei n, GLuint * framebuffers)",
        "purpose": "generate framebuffer object names",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of framebuffer object names to be generated. </para> </listitem>",
            "framebuffers": "<listitem> <para> Specifies an array in which the generated framebuffer object names are stored. </para> </listitem>"
        }
    },
    "glGenRenderbuffers": {
        "signature": "void glGenRenderbuffers(GLsizei n, GLuint * renderbuffers)",
        "purpose": "generate renderbuffer object names",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of renderbuffer object names to be generated. </para> </listitem>",
            "renderbuffers": "<listitem> <para> Specifies an array in which the generated renderbuffer object names are stored. </para> </listitem>"
        }
    },
    "glGenTextures": {
        "signature": "void glGenTextures(GLsizei n, GLuint * textures)",
        "purpose": "generate texture names",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of texture names to be generated. </para> </listitem>",
            "textures": "<listitem> <para> Specifies an array in which the generated texture names are stored. </para> </listitem>"
        }
    },
    "glGetBooleanv": {
        "signature": "void glGetBooleanv(GLenum pname, GLboolean * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para> Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the value or values of the specified parameter. </para> </listitem>"
        }
    },
    "glGetFloatv": {
        "signature": "void glGetFloatv(GLenum pname, GLfloat * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para> Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the value or values of the specified parameter. </para> </listitem>"
        }
    },
    "glGetIntegerv": {
        "signature": "void glGetIntegerv(GLenum pname, GLint * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para> Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the value or values of the specified parameter. </para> </listitem>"
        }
    },
    "glGetActiveAttrib": {
        "signature": "void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)",
        "purpose": "return information about an active attribute variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "index": "<listitem> <para>Specifies the index of the attribute variable to be queried.</para> </listitem>",
            "bufSize": "<listitem> <para>Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by <parameter>name</parameter>.</para> </listitem>",
            "length": "<listitem> <para>Returns the number of characters actually written by OpenGL in the string indicated by <parameter>name</parameter> (excluding the null terminator) if a value other than `NULL` is passed.</para> </listitem>",
            "size": "<listitem> <para>Returns the size of the attribute variable.</para> </listitem>",
            "type": "<listitem> <para>Returns the data type of the attribute variable.</para> </listitem>",
            "name": "<listitem> <para>Returns a null terminated string containing the name of the attribute variable.</para> </listitem>"
        }
    },
    "glGetActiveUniform": {
        "signature": "void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)",
        "purpose": "return information about an active uniform variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "index": "<listitem> <para>Specifies the index of the uniform variable to be queried.</para> </listitem>",
            "bufSize": "<listitem> <para>Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by <parameter>name</parameter>.</para> </listitem>",
            "length": "<listitem> <para>Returns the number of characters actually written by OpenGL in the string indicated by <parameter>name</parameter> (excluding the null terminator) if a value other than `NULL` is passed.</para> </listitem>",
            "size": "<listitem> <para>Returns the size of the uniform variable.</para> </listitem>",
            "type": "<listitem> <para>Returns the data type of the uniform variable.</para> </listitem>",
            "name": "<listitem> <para>Returns a null terminated string containing the name of the uniform variable.</para> </listitem>"
        }
    },
    "glGetAttachedShaders": {
        "signature": "void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)",
        "purpose": "return the handles of the shader objects attached to a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "maxCount": "<listitem> <para>Specifies the size of the array for storing the returned object names.</para> </listitem>",
            "count": "<listitem> <para>Returns the number of names actually returned in <parameter>shaders</parameter>.</para> </listitem>",
            "shaders": "<listitem> <para>Specifies an array that is used to return the names of attached shader objects.</para> </listitem>"
        }
    },
    "glGetAttribLocation": {
        "signature": "GLint glGetAttribLocation(GLuint program, const GLchar *name)",
        "purpose": "return the location of an attribute variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "name": "<listitem> <para>Points to a null terminated string containing the name of the attribute variable whose location is to be queried.</para> </listitem>"
        }
    },
    "glGetBufferParameteriv": {
        "signature": "void glGetBufferParameteriv(GLenum target, GLenum value, GLint * data)",
        "purpose": "return parameters of a buffer object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER` or `GL_ELEMENT_ARRAY_BUFFER`. </para> </listitem>",
            "value": "<listitem> <para> Specifies the symbolic name of a buffer object parameter. Accepted values are `GL_BUFFER_SIZE` or `GL_BUFFER_USAGE`. </para> </listitem>",
            "data": "<listitem> <para> Returns the requested parameter. </para> </listitem>"
        }
    },
    "glGetError": {
        "signature": "GLenum glGetError( void)",
        "purpose": "return error information",
        "parameters": {}
    },
    "glGetFramebufferAttachmentParameteriv": {
        "signature": "void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params)",
        "purpose": "return attachment parameters of a framebuffer object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target framebuffer object. The symbolic constant must be `GL_FRAMEBUFFER`. </para> </listitem>",
            "attachment": "<listitem> <para> Specifies the symbolic name of a framebuffer object attachment point. Accepted values are `GL_COLOR_ATTACHMENT0`, `GL_DEPTH_ATTACHMENT`, and `GL_STENCIL_ATTACHMENT`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are `GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE`, `GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME`, `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL`, and `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested parameter. </para> </listitem>"
        }
    },
    "glGetProgramInfoLog": {
        "signature": "void glGetProgramInfoLog(GLuint program, GLsizei maxLength, GLsizei *length, GLchar *infoLog)",
        "purpose": "return the information log for a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object whose information log is to be queried.</para> </listitem>",
            "maxLength": "<listitem> <para>Specifies the size of the character buffer for storing the returned information log.</para> </listitem>",
            "length": "<listitem> <para>Returns the length of the string returned in <parameter>infoLog</parameter> (excluding the null terminator).</para> </listitem>",
            "infoLog": "<listitem> <para>Specifies an array of characters that is used to return the information log.</para> </listitem>"
        }
    },
    "glGetProgramiv": {
        "signature": "void glGetProgramiv(GLuint program, GLenum pname, GLint *params)",
        "purpose": "return a parameter from a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the object parameter. Accepted symbolic names are `GL_DELETE_STATUS`, `GL_LINK_STATUS`, `GL_VALIDATE_STATUS`, `GL_INFO_LOG_LENGTH`, `GL_ATTACHED_SHADERS`, `GL_ACTIVE_ATTRIBUTES`, `GL_ACTIVE_ATTRIBUTE_MAX_LENGTH`, `GL_ACTIVE_UNIFORMS`, `GL_ACTIVE_UNIFORM_MAX_LENGTH`.</para> </listitem>",
            "params": "<listitem> <para>Returns the requested object parameter.</para> </listitem>"
        }
    },
    "glGetRenderbufferParameteriv": {
        "signature": "void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "return parameters of a renderbuffer object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target renderbuffer object. The symbolic constant must be `GL_RENDERBUFFER`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a renderbuffer object parameter. Accepted values are `GL_RENDERBUFFER_WIDTH`, `GL_RENDERBUFFER_HEIGHT`, `GL_RENDERBUFFER_INTERNAL_FORMAT`, `GL_RENDERBUFFER_RED_SIZE`, `GL_RENDERBUFFER_GREEN_SIZE`, `GL_RENDERBUFFER_BLUE_SIZE`, `GL_RENDERBUFFER_ALPHA_SIZE`, `GL_RENDERBUFFER_DEPTH_SIZE`, or `GL_RENDERBUFFER_STENCIL_SIZE`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested parameter. </para> </listitem>"
        }
    },
    "glGetShaderInfoLog": {
        "signature": "void glGetShaderInfoLog(GLuint shader, GLsizei maxLength, GLsizei *length, GLchar *infoLog)",
        "purpose": "return the information log for a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the shader object whose information log is to be queried.</para> </listitem>",
            "maxLength": "<listitem> <para>Specifies the size of the character buffer for storing the returned information log.</para> </listitem>",
            "length": "<listitem> <para>Returns the length of the string returned in <parameter>infoLog</parameter> (excluding the null terminator).</para> </listitem>",
            "infoLog": "<listitem> <para>Specifies an array of characters that is used to return the information log.</para> </listitem>"
        }
    },
    "glGetShaderiv": {
        "signature": "void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)",
        "purpose": "return a parameter from a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the shader object to be queried.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the object parameter. Accepted symbolic names are `GL_SHADER_TYPE`, `GL_DELETE_STATUS`, `GL_COMPILE_STATUS`, `GL_INFO_LOG_LENGTH`, `GL_SHADER_SOURCE_LENGTH`.</para> </listitem>",
            "params": "<listitem> <para>Returns the requested object parameter.</para> </listitem>"
        }
    },
    "glGetShaderPrecisionFormat": {
        "signature": "void glGetShaderPrecisionFormat(GLenum shaderType, GLenum precisionType, GLint *range, GLint *precision)",
        "purpose": "return the range and precision for different shader numeric formats",
        "parameters": {
            "shaderType": "<listitem> <para>Specifies the type of shader to query. Must be either `GL_VERTEX_SHADER` or `GL_FRAGMENT_SHADER`.</para> </listitem>",
            "precisionType": "<listitem> <para>Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of `GL_LOW_FLOAT`, `GL_MEDIUM_FLOAT`, `GL_HIGH_FLOAT`, `GL_LOW_INT`, `GL_MEDIUM_INT`, or `GL_HIGH_INT`.</para> </listitem>",
            "range": "<listitem> <para>Specifies a pointer to the two-element array in which the <inlineequation><math> <mrow> <msub><mi mathvariant=\"italic\">log</mi> <mn>2</mn> </msub> </mrow> </math></inlineequation> of the minimum and maximum representable magnitudes of the format are returned.</para> </listitem>",
            "precision": "<listitem> <para>Specifies a pointer to the location in which the <inlineequation><math> <mrow> <msub><mi mathvariant=\"italic\">log</mi> <mn>2</mn> </msub> </mrow> </math></inlineequation> of the precision of the format is returned.</para> </listitem>"
        }
    },
    "glGetShaderSource": {
        "signature": "void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)",
        "purpose": "return the source code string from a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the shader object to be queried.</para> </listitem>",
            "bufSize": "<listitem> <para>Specifies the size of the character buffer for storing the returned source code string.</para> </listitem>",
            "length": "<listitem> <para>Returns the length of the string returned in <parameter>source</parameter> (excluding the null terminator).</para> </listitem>",
            "source": "<listitem> <para>Specifies an array of characters that is used to return the source code string.</para> </listitem>"
        }
    },
    "glGetString": {
        "signature": "const GLubyte* glGetString(GLenum name)",
        "purpose": "return a string describing the current GL connection",
        "parameters": {
            "name": "<listitem> <para> Specifies a symbolic constant, one of `GL_VENDOR`, `GL_RENDERER`, `GL_VERSION`, `GL_SHADING_LANGUAGE_VERSION`, or `GL_EXTENSIONS`. </para> </listitem>"
        }
    },
    "glGetTexParameterfv": {
        "signature": "void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params)",
        "purpose": "return texture parameter values",
        "parameters": {
            "target": "<listitem> <para> Specifies the symbolic name of the target texture of the active texture unit. `GL_TEXTURE_2D` and `GL_TEXTURE_CUBE_MAP` are accepted. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture parameter. `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_WRAP_S`, and `GL_TEXTURE_WRAP_T` are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the texture parameter. </para> </listitem>"
        }
    },
    "glGetTexParameteriv": {
        "signature": "void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "return texture parameter values",
        "parameters": {
            "target": "<listitem> <para> Specifies the symbolic name of the target texture of the active texture unit. `GL_TEXTURE_2D` and `GL_TEXTURE_CUBE_MAP` are accepted. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture parameter. `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_WRAP_S`, and `GL_TEXTURE_WRAP_T` are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the texture parameter. </para> </listitem>"
        }
    },
    "glGetUniformfv": {
        "signature": "void glGetUniformfv(GLuint program, GLint location, GLfloat *params)",
        "purpose": "return the value of a uniform variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "location": "<listitem> <para>Specifies the location of the uniform variable to be queried.</para> </listitem>",
            "params": "<listitem> <para>Returns the value of the specified uniform variable.</para> </listitem>"
        }
    },
    "glGetUniformiv": {
        "signature": "void glGetUniformiv(GLuint program, GLint location, GLint *params)",
        "purpose": "return the value of a uniform variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "location": "<listitem> <para>Specifies the location of the uniform variable to be queried.</para> </listitem>",
            "params": "<listitem> <para>Returns the value of the specified uniform variable.</para> </listitem>"
        }
    },
    "glGetUniformLocation": {
        "signature": "GLint glGetUniformLocation(GLuint program, const GLchar *name)",
        "purpose": "return the location of a uniform variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "name": "<listitem> <para>Points to a null terminated string containing the name of the uniform variable whose location is to be queried.</para> </listitem>"
        }
    },
    "glGetVertexAttribfv": {
        "signature": "void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)",
        "purpose": "return a generic vertex attribute parameter",
        "parameters": {
            "index": "<listitem> <para>Specifies the generic vertex attribute parameter to be queried.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are `GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING`, `GL_VERTEX_ATTRIB_ARRAY_ENABLED`, `GL_VERTEX_ATTRIB_ARRAY_SIZE`, `GL_VERTEX_ATTRIB_ARRAY_STRIDE`, `GL_VERTEX_ATTRIB_ARRAY_TYPE`, `GL_VERTEX_ATTRIB_ARRAY_NORMALIZED`, or `GL_CURRENT_VERTEX_ATTRIB`.</para> </listitem>",
            "params": "<listitem> <para>Returns the requested data.</para> </listitem>"
        }
    },
    "glGetVertexAttribiv": {
        "signature": "void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)",
        "purpose": "return a generic vertex attribute parameter",
        "parameters": {
            "index": "<listitem> <para>Specifies the generic vertex attribute parameter to be queried.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are `GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING`, `GL_VERTEX_ATTRIB_ARRAY_ENABLED`, `GL_VERTEX_ATTRIB_ARRAY_SIZE`, `GL_VERTEX_ATTRIB_ARRAY_STRIDE`, `GL_VERTEX_ATTRIB_ARRAY_TYPE`, `GL_VERTEX_ATTRIB_ARRAY_NORMALIZED`, or `GL_CURRENT_VERTEX_ATTRIB`.</para> </listitem>",
            "params": "<listitem> <para>Returns the requested data.</para> </listitem>"
        }
    },
    "glGetVertexAttribPointerv": {
        "signature": "void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)",
        "purpose": "return the address of the specified generic vertex attribute pointer",
        "parameters": {
            "index": "<listitem> <para>Specifies the generic vertex attribute parameter to be returned.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be `GL_VERTEX_ATTRIB_ARRAY_POINTER`.</para> </listitem>",
            "pointer": "<listitem> <para>Returns the pointer value.</para> </listitem>"
        }
    },
    "glHint": {
        "signature": "void glHint(GLenum target, GLenum mode)",
        "purpose": "specify implementation-specific hints",
        "parameters": {
            "target": "<listitem> <para> Specifies a symbolic constant indicating the behavior to be controlled. `GL_GENERATE_MIPMAP_HINT` is accepted. </para> </listitem>",
            "mode": "<listitem> <para> Specifies a symbolic constant indicating the desired behavior. `GL_FASTEST`, `GL_NICEST`, and `GL_DONT_CARE` are accepted. </para> </listitem>"
        }
    },
    "glIsBuffer": {
        "signature": "GLboolean glIsBuffer(GLuint buffer)",
        "purpose": "determine if a name corresponds to a buffer object",
        "parameters": {
            "buffer": "<listitem> <para> Specifies a value that may be the name of a buffer object. </para> </listitem>"
        }
    },
    "glIsEnabled": {
        "signature": "GLboolean glIsEnabled(GLenum cap)",
        "purpose": "test whether a capability is enabled",
        "parameters": {
            "cap": "<listitem> <para> Specifies a symbolic constant indicating a GL capability. </para> </listitem>"
        }
    },
    "glIsFramebuffer": {
        "signature": "GLboolean glIsFramebuffer(GLuint framebuffer)",
        "purpose": "determine if a name corresponds to a framebuffer object",
        "parameters": {
            "framebuffer": "<listitem> <para> Specifies a value that may be the name of a framebuffer object. </para> </listitem>"
        }
    },
    "glIsProgram": {
        "signature": "GLboolean glIsProgram(GLuint program)",
        "purpose": "determine if a name corresponds to a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies a potential program object.</para> </listitem>"
        }
    },
    "glIsRenderbuffer": {
        "signature": "GLboolean glIsRenderbuffer(GLuint renderbuffer)",
        "purpose": "determine if a name corresponds to a renderbuffer object",
        "parameters": {
            "renderbuffer": "<listitem> <para> Specifies a value that may be the name of a renderbuffer object. </para> </listitem>"
        }
    },
    "glIsShader": {
        "signature": "GLboolean glIsShader(GLuint shader)",
        "purpose": "determine if a name corresponds to a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies a potential shader object.</para> </listitem>"
        }
    },
    "glIsTexture": {
        "signature": "GLboolean glIsTexture(GLuint texture)",
        "purpose": "determine if a name corresponds to a texture",
        "parameters": {
            "texture": "<listitem> <para> Specifies a value that may be the name of a texture. </para> </listitem>"
        }
    },
    "glLineWidth": {
        "signature": "void glLineWidth(GLfloat width)",
        "purpose": "specify the width of rasterized lines",
        "parameters": {
            "width": "<listitem> <para> Specifies the width of rasterized lines. The initial value is 1. </para> </listitem>"
        }
    },
    "glLinkProgram": {
        "signature": "void glLinkProgram(GLuint program)",
        "purpose": "link a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object to be linked.</para> </listitem>"
        }
    },
    "glPixelStorei": {
        "signature": "void glPixelStorei(GLenum pname, GLint param)",
        "purpose": "set pixel storage modes",
        "parameters": {
            "pname": "<listitem> <para> Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: `GL_PACK_ALIGNMENT`. The other affects the unpacking of pixel data <emphasis>from</emphasis> memory: `GL_UNPACK_ALIGNMENT`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> is set to. </para> </listitem>"
        }
    },
    "glPolygonOffset": {
        "signature": "void glPolygonOffset(GLfloat factor, GLfloat units)",
        "purpose": "set the scale and units used to calculate depth values",
        "parameters": {
            "factor": "<listitem> <para> Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0. </para> </listitem>",
            "units": "<listitem> <para> Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0. </para> </listitem>"
        }
    },
    "glReadPixels": {
        "signature": "void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * data)",
        "purpose": "read a block of pixels from the frame buffer",
        "parameters": {
            "x": "<listitem> <para> Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels. </para> </listitem>",
            "width": "<listitem> <para> Specify the dimensions of the pixel rectangle. <parameter>width</parameter> and <parameter>height</parameter> of one correspond to a single pixel. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are accepted: `GL_ALPHA`, `GL_RGB`, and `GL_RGBA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of the pixel data. Must be one of `GL_UNSIGNED_BYTE`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_4_4_4_4`, or `GL_UNSIGNED_SHORT_5_5_5_1`. </para> </listitem>",
            "data": "<listitem> <para> Returns the pixel data. </para> </listitem>"
        }
    },
    "glReleaseShaderCompiler": {
        "signature": "void glReleaseShaderCompiler( void)",
        "purpose": "release resources allocated by the shader compiler",
        "parameters": {}
    },
    "glRenderbufferStorage": {
        "signature": "void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)",
        "purpose": "create and initialize a renderbuffer object's data store",
        "parameters": {
            "target": "<listitem> <para>Specifies the renderbuffer target. The symbolic constant must be `GL_RENDERBUFFER`.</para> </listitem>",
            "internalformat": "<listitem> <para>Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: `GL_RGBA4`, `GL_RGB565`, `GL_RGB5_A1`, `GL_DEPTH_COMPONENT16`, or `GL_STENCIL_INDEX8`.</para> </listitem>",
            "width": "<listitem> <para>Specifies the width of the renderbuffer in pixels.</para> </listitem>",
            "height": "<listitem> <para>Specifies the height of the renderbuffer in pixels.</para> </listitem>"
        }
    },
    "glSampleCoverage": {
        "signature": "void glSampleCoverage(GLclampf value, GLboolean invert)",
        "purpose": "specify multisample coverage parameters",
        "parameters": {
            "value": "<listitem> <para> Specify a single floating-point sample coverage value. The value is clamped to the range <inlineequation><math> <mfenced open=\"[\" close=\"]\"> <mn>0</mn> <mn>1</mn> </mfenced> </math></inlineequation>. The initial value is 1.0. </para> </listitem>",
            "invert": "<listitem> <para> Specify a single boolean value representing if the coverage masks should be inverted. `GL_TRUE` and `GL_FALSE` are accepted. The initial value is `GL_FALSE`. </para> </listitem>"
        }
    },
    "glScissor": {
        "signature": "void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "define the scissor box",
        "parameters": {
            "x": "<listitem> <para> Specify the lower left corner of the scissor box. Initially (0, 0). </para> </listitem>",
            "width": "<listitem> <para> Specify the width and height of the scissor box. When a GL context is first attached to a window, <parameter>width</parameter> and <parameter>height</parameter> are set to the dimensions of that window. </para> </listitem>"
        }
    },
    "glShaderBinary": {
        "signature": "void glShaderBinary(GLsizei n, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)",
        "purpose": "load a precompiled shader binary",
        "parameters": {
            "n": "<listitem> <para>Specifies the number of shader object handles present in <parameter>shaders</parameter>.</para> </listitem>",
            "shaders": "<listitem> <para>Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.</para> </listitem>",
            "binaryformat": "<listitem> <para>Specifies the shader binary format.</para> </listitem>",
            "binary": "<listitem> <para>Specifies a pointer to the shader binary data in client memory.</para> </listitem>",
            "length": "<listitem> <para>Specifies the length of the shader binary data in bytes.</para> </listitem>"
        }
    },
    "glShaderSource": {
        "signature": "void glShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)",
        "purpose": "replace the source code in a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the handle of the shader object whose source code is to be replaced.</para> </listitem>",
            "count": "<listitem> <para>Specifies the number of elements in the <parameter>string</parameter> and <parameter>length</parameter> arrays.</para> </listitem>",
            "string": "<listitem> <para>Specifies an array of pointers to strings containing the source code to be loaded into the shader.</para> </listitem>",
            "length": "<listitem> <para>Specifies an array of string lengths.</para> </listitem>"
        }
    },
    "glStencilFunc": {
        "signature": "void glStencilFunc(GLenum func, GLint ref, GLuint mask)",
        "purpose": "set front and back function and reference value for stencil testing",
        "parameters": {
            "func": "<listitem> <para> Specifies the test function. Eight symbolic constants are valid: `GL_NEVER`, `GL_LESS`, `GL_LEQUAL`, `GL_GREATER`, `GL_GEQUAL`, `GL_EQUAL`, `GL_NOTEQUAL`, and `GL_ALWAYS`. The initial value is `GL_ALWAYS`. </para> </listitem>",
            "ref": "<listitem> <para> Specifies the reference value for the stencil test. <parameter>ref</parameter> is clamped to the range <inlineequation><math> <mfenced open=\"[\" close=\"]\"> <mn>0</mn> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </mfenced> </math></inlineequation>, where <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation> is the number of bitplanes in the stencil buffer. The initial value is 0. </para> </listitem>",
            "mask": "<listitem> <para> Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's. </para> </listitem>"
        }
    },
    "glStencilFuncSeparate": {
        "signature": "void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)",
        "purpose": "set front and/or back function and reference value for stencil testing",
        "parameters": {
            "face": "<listitem> <para> Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: `GL_FRONT`, `GL_BACK`, and `GL_FRONT_AND_BACK`. </para> </listitem>",
            "func": "<listitem> <para> Specifies the test function. Eight symbolic constants are valid: `GL_NEVER`, `GL_LESS`, `GL_LEQUAL`, `GL_GREATER`, `GL_GEQUAL`, `GL_EQUAL`, `GL_NOTEQUAL`, and `GL_ALWAYS`. The initial value is `GL_ALWAYS`. </para> </listitem>",
            "ref": "<listitem> <para> Specifies the reference value for the stencil test. <parameter>ref</parameter> is clamped to the range <inlineequation><math> <mfenced open=\"[\" close=\"]\"> <mn>0</mn> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </mfenced> </math></inlineequation>, where <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation> is the number of bitplanes in the stencil buffer. The initial value is 0. </para> </listitem>",
            "mask": "<listitem> <para> Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's. </para> </listitem>"
        }
    },
    "glStencilMask": {
        "signature": "void glStencilMask(GLuint mask)",
        "purpose": "control the front and back writing of individual bits in the stencil planes",
        "parameters": {
            "mask": "<listitem> <para> Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's. </para> </listitem>"
        }
    },
    "glStencilMaskSeparate": {
        "signature": "void glStencilMaskSeparate(GLenum face, GLuint mask)",
        "purpose": "control the front and/or back writing of individual bits in the stencil planes",
        "parameters": {
            "face": "<listitem> <para> Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: `GL_FRONT`, `GL_BACK`, and `GL_FRONT_AND_BACK`. </para> </listitem>",
            "mask": "<listitem> <para> Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's. </para> </listitem>"
        }
    },
    "glStencilOp": {
        "signature": "void glStencilOp(GLenum sfail, GLenum dpfail, GLenum dppass)",
        "purpose": "set front and back stencil test actions",
        "parameters": {
            "sfail": "<listitem> <para> Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: `GL_KEEP`, `GL_ZERO`, `GL_REPLACE`, `GL_INCR`, `GL_INCR_WRAP`, `GL_DECR`, `GL_DECR_WRAP`, and `GL_INVERT`. The initial value is `GL_KEEP`. </para> </listitem>",
            "dpfail": "<listitem> <para> Specifies the stencil action when the stencil test passes, but the depth test fails. <parameter>dpfail</parameter> accepts the same symbolic constants as <parameter>sfail</parameter>. The initial value is `GL_KEEP`. </para> </listitem>",
            "dppass": "<listitem> <para> Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. <parameter>dppass</parameter> accepts the same symbolic constants as <parameter>sfail</parameter>. The initial value is `GL_KEEP`. </para> </listitem>"
        }
    },
    "glStencilOpSeparate": {
        "signature": "void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)",
        "purpose": "set front and/or back stencil test actions",
        "parameters": {
            "face": "<listitem> <para> Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: `GL_FRONT`, `GL_BACK`, and `GL_FRONT_AND_BACK`. </para> </listitem>",
            "sfail": "<listitem> <para> Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: `GL_KEEP`, `GL_ZERO`, `GL_REPLACE`, `GL_INCR`, `GL_INCR_WRAP`, `GL_DECR`, `GL_DECR_WRAP`, and `GL_INVERT`. The initial value is `GL_KEEP`. </para> </listitem>",
            "dpfail": "<listitem> <para> Specifies the stencil action when the stencil test passes, but the depth test fails. <parameter>dpfail</parameter> accepts the same symbolic constants as <parameter>sfail</parameter>. The initial value is `GL_KEEP`. </para> </listitem>",
            "dppass": "<listitem> <para> Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. <parameter>dppass</parameter> accepts the same symbolic constants as <parameter>sfail</parameter>. The initial value is `GL_KEEP`. </para> </listitem>"
        }
    },
    "glTexImage2D": {
        "signature": "void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * data)",
        "purpose": "specify a two-dimensional texture image",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture of the active texture unit. Must be `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "internalformat": "<listitem> <para> Specifies the internal format of the texture. Must be one of the following symbolic constants: `GL_ALPHA`, `GL_LUMINANCE`, `GL_LUMINANCE_ALPHA`, `GL_RGB`, `GL_RGBA`. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be 0. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the texel data. Must match <parameter>internalformat</parameter>. The following symbolic values are accepted: `GL_ALPHA`, `GL_RGB`, `GL_RGBA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of the texel data. The following symbolic values are accepted: `GL_UNSIGNED_BYTE`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_4_4_4_4`, and `GL_UNSIGNED_SHORT_5_5_5_1`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "glTexParameterf": {
        "signature": "void glTexParameterf(GLenum target, GLenum pname, GLfloat param)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture of the active texture unit, which must be either `GL_TEXTURE_2D` or `GL_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture parameter. <parameter>pname</parameter> can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, or `GL_TEXTURE_WRAP_T`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value of <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glTexParameteri": {
        "signature": "void glTexParameteri(GLenum target, GLenum pname, GLint param)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture of the active texture unit, which must be either `GL_TEXTURE_2D` or `GL_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture parameter. <parameter>pname</parameter> can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, or `GL_TEXTURE_WRAP_T`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value of <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glTexParameterfv": {
        "signature": "void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture of the active texture unit, which must be either `GL_TEXTURE_2D` or `GL_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture parameter. <parameter>pname</parameter> can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, or `GL_TEXTURE_WRAP_T`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value of <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glTexParameteriv": {
        "signature": "void glTexParameteriv(GLenum target, GLenum pname, const GLint * params)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture of the active texture unit, which must be either `GL_TEXTURE_2D` or `GL_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture parameter. <parameter>pname</parameter> can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, or `GL_TEXTURE_WRAP_T`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value of <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glTexSubImage2D": {
        "signature": "void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * data)",
        "purpose": "specify a two-dimensional texture subimage",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture of the active texture unit. Must be `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "yoffset": "<listitem> <para> Specifies a texel offset in the y direction within the texture array. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture subimage. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are accepted: `GL_ALPHA`, `GL_RGB`, `GL_RGBA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of the pixel data. The following symbolic values are accepted: `GL_UNSIGNED_BYTE`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_4_4_4_4`, and `GL_UNSIGNED_SHORT_5_5_5_1`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "glUniform1f": {
        "signature": "void glUniform1f(GLint location, GLfloat v0)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2f": {
        "signature": "void glUniform2f(GLint location, GLfloat v0, GLfloat v1)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3f": {
        "signature": "void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4f": {
        "signature": "void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1i": {
        "signature": "void glUniform1i(GLint location, GLint v0)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2i": {
        "signature": "void glUniform2i(GLint location, GLint v0, GLint v1)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3i": {
        "signature": "void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4i": {
        "signature": "void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1fv": {
        "signature": "void glUniform1fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2fv": {
        "signature": "void glUniform2fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3fv": {
        "signature": "void glUniform3fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4fv": {
        "signature": "void glUniform4fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1iv": {
        "signature": "void glUniform1iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2iv": {
        "signature": "void glUniform2iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3iv": {
        "signature": "void glUniform3iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4iv": {
        "signature": "void glUniform4iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix2fv": {
        "signature": "void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix3fv": {
        "signature": "void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix4fv": {
        "signature": "void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUseProgram": {
        "signature": "void glUseProgram(GLuint program)",
        "purpose": "install a program object as part of current rendering state",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object whose executables are to be used as part of current rendering state.</para> </listitem>"
        }
    },
    "glValidateProgram": {
        "signature": "void glValidateProgram(GLuint program)",
        "purpose": "validate a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object to be validated.</para> </listitem>"
        }
    },
    "glVertexAttrib1f": {
        "signature": "void glVertexAttrib1f(GLuint index, GLfloat v0)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2f": {
        "signature": "void glVertexAttrib2f(GLuint index, GLfloat v0, GLfloat v1)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3f": {
        "signature": "void glVertexAttrib3f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4f": {
        "signature": "void glVertexAttrib4f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1fv": {
        "signature": "void glVertexAttrib1fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2fv": {
        "signature": "void glVertexAttrib2fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3fv": {
        "signature": "void glVertexAttrib3fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4fv": {
        "signature": "void glVertexAttrib4fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttribPointer": {
        "signature": "void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)",
        "purpose": "define an array of generic vertex attribute data",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "size": "<listitem> <para>Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.</para> </listitem>",
            "type": "<listitem> <para>Specifies the data type of each component in the array. Symbolic constants `GL_BYTE`, `GL_UNSIGNED_BYTE`, `GL_SHORT`, `GL_UNSIGNED_SHORT`, `GL_FIXED`, or `GL_FLOAT` are accepted. The initial value is `GL_FLOAT`.</para> </listitem>",
            "normalized": "<listitem> <para>Specifies whether fixed-point data values should be normalized (`GL_TRUE`) or converted directly as fixed-point values (`GL_FALSE`) when they are accessed.</para> </listitem>",
            "stride": "<listitem> <para>Specifies the byte offset between consecutive generic vertex attributes. If <parameter>stride</parameter> is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.</para> </listitem>",
            "pointer": "<listitem> <para>Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.</para> </listitem>"
        }
    },
    "glViewport": {
        "signature": "void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "set the viewport",
        "parameters": {
            "x": "<listitem> <para> Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0). </para> </listitem>",
            "width": "<listitem> <para> Specify the width and height of the viewport. When a GL context is first attached to a window, <parameter>width</parameter> and <parameter>height</parameter> are set to the dimensions of that window. </para> </listitem>"
        }
    }
}pecified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1fv": {
        "signature": "void glUniform1fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2fv": {
        "signature": "void glUniform2fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3fv": {
        "signature": "void glUniform3fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4fv": {
        "signature": "void glUniform4fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1iv": {
        "signature": "void glUniform1iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2iv": {
        "signature": "void glUniform2iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3iv": {
        "signature": "void glUniform3iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4iv": {
        "signature": "void glUniform4iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix2fv": {
        "signature": "void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix3fv": {
        "signature": "void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix4fv": {
        "signature": "void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUseProgram": {
        "signature": "void glUseProgram(GLuint program)",
        "purpose": "install a program object as part of current rendering state",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object whose executables are to be used as part of current rendering state.</para> </listitem>"
        }
    },
    "glValidateProgram": {
        "signature": "void glValidateProgram(GLuint program)",
        "purpose": "validate a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object to be validated.</para> </listitem>"
        }
    },
    "glVertexAttrib1f": {
        "signature": "void glVertexAttrib1f(GLuint index, GLfloat v0)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2f": {
        "signature": "void glVertexAttrib2f(GLuint index, GLfloat v0, GLfloat v1)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3f": {
        "signature": "void glVertexAttrib3f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4f": {
        "signature": "void glVertexAttrib4f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1fv": {
        "signature": "void glVertexAttrib1fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2fv": {
        "signature": "void glVertexAttrib2fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3fv": {
        "signature": "void glVertexAttrib3fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4fv": {
        "signature": "void glVertexAttrib4fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttribPointer": {
        "signature": "void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)",
        "purpose": "define an array of generic vertex attribute data",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "size": "<listitem> <para>Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.</para> </listitem>",
            "type": "<listitem> <para>Specifies the data type of each component in the array. Symbolic constants <span style=\"color:blue\">GL_BYTE</span>, <span style=\"color:blue\">GL_UNSIGNED_BYTE</span>, <span style=\"color:blue\">GL_SHORT</span>, <span style=\"color:blue\">GL_UNSIGNED_SHORT</span>, <span style=\"color:blue\">GL_FIXED</span>, or <span style=\"color:blue\">GL_FLOAT</span> are accepted. The initial value is <span style=\"color:blue\">GL_FLOAT</span>.</para> </listitem>",
            "normalized": "<listitem> <para>Specifies whether fixed-point data values should be normalized (<span style=\"color:blue\">GL_TRUE</span>) or converted directly as fixed-point values (<span style=\"color:blue\">GL_FALSE</span>) when they are accessed.</para> </listitem>",
            "stride": "<listitem> <para>Specifies the byte offset between consecutive generic vertex attributes. If <parameter>stride</parameter> is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.</para> </listitem>",
            "pointer": "<listitem> <para>Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.</para> </listitem>"
        }
    },
    "glViewport": {
        "signature": "void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "set the viewport",
        "parameters": {
            "x": "<listitem> <para> Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0). </para> </listitem>",
            "width": "<listitem> <para> Specify the width and height of the viewport. When a GL context is first attached to a window, <parameter>width</parameter> and <parameter>height</parameter> are set to the dimensions of that window. </para> </listitem>"
        }
    }
}para>\n            </listitem>\n        ",
            "pname": "<listitem>\n                <para>\n                    Specifies the symbolic name of a single-valued texture parameter.\n                    <parameter>pname</parameter> can be one of the following:\n                    <constant>GL_TEXTURE_MIN_FILTER</constant>,\n                    <constant>GL_TEXTURE_MAG_FILTER</constant>,\n                    <constant>GL_TEXTURE_WRAP_S</constant>, or\n                    <constant>GL_TEXTURE_WRAP_T</constant>.\n                </para>\n            </listitem>\n        ",
            "param": "<listitem>\n                <para>\n                    Specifies the value of <parameter>pname</parameter>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glTexParameterfv": {
        "signature": "void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem>\n                <para>\n                    Specifies the target texture of the active texture unit,\n                    which must be either <constant>GL_TEXTURE_2D</constant> or\n                    <constant>GL_TEXTURE_CUBE_MAP</constant>.\n                </para>\n            </listitem>\n        ",
            "pname": "<listitem>\n                <para>\n                    Specifies the symbolic name of a single-valued texture parameter.\n                    <parameter>pname</parameter> can be one of the following:\n                    <constant>GL_TEXTURE_MIN_FILTER</constant>,\n                    <constant>GL_TEXTURE_MAG_FILTER</constant>,\n                    <constant>GL_TEXTURE_WRAP_S</constant>, or\n                    <constant>GL_TEXTURE_WRAP_T</constant>.\n                </para>\n            </listitem>\n        ",
            "param": "<listitem>\n                <para>\n                    Specifies the value of <parameter>pname</parameter>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glTexParameteriv": {
        "signature": "void glTexParameteriv(GLenum target, GLenum pname, const GLint * params)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem>\n                <para>\n                    Specifies the target texture of the active texture unit,\n                    which must be either <constant>GL_TEXTURE_2D</constant> or\n                    <constant>GL_TEXTURE_CUBE_MAP</constant>.\n                </para>\n            </listitem>\n        ",
            "pname": "<listitem>\n                <para>\n                    Specifies the symbolic name of a single-valued texture parameter.\n                    <parameter>pname</parameter> can be one of the following:\n                    <constant>GL_TEXTURE_MIN_FILTER</constant>,\n                    <constant>GL_TEXTURE_MAG_FILTER</constant>,\n                    <constant>GL_TEXTURE_WRAP_S</constant>, or\n                    <constant>GL_TEXTURE_WRAP_T</constant>.\n                </para>\n            </listitem>\n        ",
            "param": "<listitem>\n                <para>\n                    Specifies the value of <parameter>pname</parameter>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glTexSubImage2D": {
        "signature": "void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * data)",
        "purpose": "specify a two-dimensional texture subimage",
        "parameters": {
            "target": "<listitem>\n                <para>\n                    Specifies the target texture of the active texture unit.\n                    Must be <constant>GL_TEXTURE_2D</constant>,\n                    <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X</constant>,\n                    <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_X</constant>,\n                    <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Y</constant>,\n                    <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</constant>,\n                    <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Z</constant>, or\n                    <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</constant>.\n                </para>\n            </listitem>\n        ",
            "level": "<listitem>\n                <para>\n                    Specifies the level-of-detail number.\n                    Level 0 is the base image level.\n                    Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image.\n                </para>\n            </listitem>\n        ",
            "xoffset": "<listitem>\n                <para>\n                    Specifies a texel offset in the x direction within the texture array.\n                </para>\n            </listitem>\n        ",
            "yoffset": "<listitem>\n                <para>\n                    Specifies a texel offset in the y direction within the texture array.\n                </para>\n            </listitem>\n        ",
            "width": "<listitem>\n                <para>\n                    Specifies the width of the texture subimage.\n                </para>\n            </listitem>\n        ",
            "height": "<listitem>\n                <para>\n                    Specifies the height of the texture subimage.\n                </para>\n            </listitem>\n        ",
            "format": "<listitem>\n                <para>\n                    Specifies the format of the pixel data.\n                    The following symbolic values are accepted:\n                    <constant>GL_ALPHA</constant>,\n                    <constant>GL_RGB</constant>,\n                    <constant>GL_RGBA</constant>,\n                    <constant>GL_LUMINANCE</constant>, and\n                    <constant>GL_LUMINANCE_ALPHA</constant>.\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies the data type of the pixel data.\n                    The following symbolic values are accepted:\n                    <constant>GL_UNSIGNED_BYTE</constant>,\n                    <constant>GL_UNSIGNED_SHORT_5_6_5</constant>,\n                    <constant>GL_UNSIGNED_SHORT_4_4_4_4</constant>, and\n                    <constant>GL_UNSIGNED_SHORT_5_5_5_1</constant>.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies a pointer to the image data in memory.\n                </para>\n            </listitem>\n        "
        }
    },
    "glUniform1f": {
        "signature": "void glUniform1f(GLint location, GLfloat v0)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform2f": {
        "signature": "void glUniform2f(GLint location, GLfloat v0, GLfloat v1)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform3f": {
        "signature": "void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform4f": {
        "signature": "void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform1i": {
        "signature": "void glUniform1i(GLint location, GLint v0)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform2i": {
        "signature": "void glUniform2i(GLint location, GLint v0, GLint v1)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform3i": {
        "signature": "void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform4i": {
        "signature": "void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform1fv": {
        "signature": "void glUniform1fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform2fv": {
        "signature": "void glUniform2fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform3fv": {
        "signature": "void glUniform3fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform4fv": {
        "signature": "void glUniform4fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform1iv": {
        "signature": "void glUniform1iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform2iv": {
        "signature": "void glUniform2iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform3iv": {
        "signature": "void glUniform3iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform4iv": {
        "signature": "void glUniform4iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix2fv": {
        "signature": "void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix3fv": {
        "signature": "void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix4fv": {
        "signature": "void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUseProgram": {
        "signature": "void glUseProgram(GLuint program)",
        "purpose": "install a program object as part of current rendering state",
        "parameters": {
            "program": "<listitem>\n\t\t    <para>Specifies the handle of the program object\n\t\t    whose executables are to be used as part of current\n\t\t    rendering state.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glValidateProgram": {
        "signature": "void glValidateProgram(GLuint program)",
        "purpose": "validate a program object",
        "parameters": {
            "program": "<listitem>\n\t\t    <para>Specifies the handle of the program object to\n\t\t    be validated.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib1f": {
        "signature": "void glVertexAttrib1f(GLuint index, GLfloat v0)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib2f": {
        "signature": "void glVertexAttrib2f(GLuint index, GLfloat v0, GLfloat v1)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib3f": {
        "signature": "void glVertexAttrib3f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4f": {
        "signature": "void glVertexAttrib4f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib1fv": {
        "signature": "void glVertexAttrib1fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib2fv": {
        "signature": "void glVertexAttrib2fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib3fv": {
        "signature": "void glVertexAttrib3fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4fv": {
        "signature": "void glVertexAttrib4fv(GLuint index, const GLfloat *v)",
        "purpose": "specify the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttribPointer": {
        "signature": "void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)",
        "purpose": "define an array of generic vertex attribute data",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "size": "<listitem>\n\t\t    <para>Specifies the number of components per\n\t\t    generic vertex attribute. Must\n\t\t    be 1, 2, 3, or 4. The initial value is 4.</para>\n\t\t</listitem>\n\t    ",
            "type": "<listitem>\n\t\t    <para>Specifies the data type of each component in\n\t\t    the array. Symbolic constants\n\t\t    <constant>GL_BYTE</constant>,\n\t\t    <constant>GL_UNSIGNED_BYTE</constant>,\n\t\t    <constant>GL_SHORT</constant>,\n\t\t    <constant>GL_UNSIGNED_SHORT</constant>,\n\t\t    <constant>GL_FIXED</constant>, or\n\t\t    <constant>GL_FLOAT</constant> are\n\t\t    accepted. The initial value is <constant>GL_FLOAT</constant>.</para>\n\t\t</listitem>\n\t    ",
            "normalized": "<listitem>\n\t\t    <para>Specifies whether fixed-point data values\n\t\t    should be normalized (<constant>GL_TRUE</constant>)\n\t\t    or converted directly as fixed-point values\n\t\t    (<constant>GL_FALSE</constant>) when they are\n\t\t    accessed.</para>\n\t\t</listitem>\n\t    ",
            "stride": "<listitem>\n\t\t    <para>Specifies the byte offset between consecutive\n\t\t    generic vertex attributes. If <parameter>stride</parameter>\n\t\t    is 0, the generic vertex attributes are\n\t\t    understood to be tightly packed in the\n\t\t    array. The initial value is 0.</para>\n\t\t</listitem>\n\t    ",
            "pointer": "<listitem>\n\t\t    <para>Specifies a pointer to the first component of\n\t\t    the first generic vertex attribute in the array. The initial value is 0.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glViewport": {
        "signature": "void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "set the viewport",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the lower left corner of the viewport rectangle,\n                    in pixels. The initial value is (0,0).\n                </para>\n            </listitem>\n        ",
            "width": "<listitem>\n                <para>\n                    Specify the width and height\n                    of the viewport.\n                    When a GL context is first attached to a window,\n                    <parameter>width</parameter> and <parameter>height</parameter> are set to the dimensions of that\n                    window.\n                </para>\n            </listitem>\n        "
        }
    }
}