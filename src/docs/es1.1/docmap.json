{
    "glActiveTexture": {
        "signature": "void glActiveTexture(GLenum texture)",
        "purpose": "select server-side active texture unit",
        "parameters": {
            "texture": "<listitem> <para> Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. <parameter>texture</parameter> must be one of `GL_TEXTURE`<replaceable>i</replaceable>, where <inlineequation><math> <mn>0</mn> <mo>=</mo> <mi>i</mi> <mo /> <mi>GL_MAX_TEXTURE_UNITS</mi> </math></inlineequation>, which is an implementation-dependent value. The initial value is `GL_TEXTURE0`. </para> </listitem>"
        }
    },
    "glAlphaFunc": {
        "signature": "void glAlphaFunc(GLenum func, GLclampf ref)",
        "purpose": "specify the alpha test function",
        "parameters": {
            "func": "<listitem> <para>Specifies the alpha comparison function. Symbolic constants `GL_NEVER`, `GL_LESS`, `GL_EQUAL`, `GL_LEQUAL`, `GL_GREATER`, `GL_NOTEQUAL`, `GL_GEQUAL`, and `GL_ALWAYS` are accepted. The initial value is `GL_ALWAYS`. </para> </listitem>",
            "ref": "<listitem> <para>Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0, 1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0. </para> </listitem>"
        }
    },
    "glAlphaFuncx": {
        "signature": "void glAlphaFuncx(GLenum func, GLclampx ref)",
        "purpose": "specify the alpha test function",
        "parameters": {
            "func": "<listitem> <para>Specifies the alpha comparison function. Symbolic constants `GL_NEVER`, `GL_LESS`, `GL_EQUAL`, `GL_LEQUAL`, `GL_GREATER`, `GL_NOTEQUAL`, `GL_GEQUAL`, and `GL_ALWAYS` are accepted. The initial value is `GL_ALWAYS`. </para> </listitem>",
            "ref": "<listitem> <para>Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0, 1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0. </para> </listitem>"
        }
    },
    "glBindBuffer": {
        "signature": "void glBindBuffer(GLenum target, GLuint buffer)",
        "purpose": "bind a named buffer to a target",
        "parameters": {
            "target": "<listitem> <para> Specifies the target to which the buffer is bound. The symbolic constant must be `GL_ARRAY_BUFFER` or `GL_ELEMENT_ARRAY_BUFFER`. </para> </listitem>",
            "buffer": "<listitem> <para>Specifies the name of a buffer object.</para> </listitem>"
        }
    },
    "glBindTexture": {
        "signature": "void glBindTexture(GLenum target, GLuint texture)",
        "purpose": "bind a named texture to a texturing target",
        "parameters": {
            "target": "<listitem> <para>Specifies the target to which the texture is bound. Must be `GL_TEXTURE_2D`.</para> </listitem>",
            "texture": "<listitem> <para>Specifies the name of a texture.</para> </listitem>"
        }
    },
    "glBlendFunc": {
        "signature": "void glBlendFunc(GLenum sfactor, GLenum dfactor)",
        "purpose": "specify pixel arithmetic",
        "parameters": {
            "sfactor": "<listitem> <para> Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: `GL_ZERO`, `GL_ONE`, `GL_DST_COLOR`, `GL_ONE_MINUS_DST_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, `GL_DST_ALPHA`, `GL_ONE_MINUS_DST_ALPHA`, and `GL_SRC_ALPHA_SATURATE`. The initial value is `GL_ONE`. </para> </listitem>",
            "dfactor": "<listitem> <para>Specifies how the red, green, blue, and alpha destination blending factors are computed. Eight symbolic constants are accepted: `GL_ZERO`, `GL_ONE`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, `GL_DST_ALPHA`, and `GL_ONE_MINUS_DST_ALPHA`. The initial value is `GL_ZERO`.</para> </listitem>"
        }
    },
    "glBufferData": {
        "signature": "void glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage)",
        "purpose": "creates and initializes a buffer object's data store.",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER` or `GL_ELEMENT_ARRAY_BUFFER`. </para> </listitem>",
            "size": "<listitem> <para>Specifies the size in bytes of the buffer object's new data store.</para> </listitem>",
            "data": "<listitem> <para>Specifies a pointer to data that will be copied into the data store for initialization, or `NULL` if no data is to be copied.</para> </listitem>",
            "usage": "<listitem> <para> Specifies the expected usage pattern of the data store. The symbolic constant must be `GL_STATIC_DRAW` or `GL_DYNAMIC_DRAW`. </para> </listitem>"
        }
    },
    "glBufferSubData": {
        "signature": "void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data)",
        "purpose": "updates a subset of a buffer object's data store.",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER` or `GL_ELEMENT_ARRAY_BUFFER`. </para> </listitem>",
            "offset": "<listitem> <para>Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.</para> </listitem>",
            "size": "<listitem> <para>Specifies the size in bytes of the data store region being replaced.</para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the new data that will be copied into the data store.</para> </listitem>"
        }
    },
    "glClear": {
        "signature": "void glClear(GLbitfield mask)",
        "purpose": "clear buffers to preset values",
        "parameters": {
            "mask": "<listitem> <para>Bitwise OR of masks that indicate the buffers to be cleared. Valid masks are `GL_COLOR_BUFFER_BIT`, `GL_DEPTH_BUFFER_BIT`, and `GL_STENCIL_BUFFER_BIT`.</para> </listitem>"
        }
    },
    "glClearColor": {
        "signature": "void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)",
        "purpose": "specify clear values for the color buffer",
        "parameters": {
            "red": "<listitem> <para>Specify the red, green, blue, and alpha values used when the color buffer is cleared. The initial values are all 0.</para> </listitem>"
        }
    },
    "glClearColorx": {
        "signature": "void glClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)",
        "purpose": "specify clear values for the color buffer",
        "parameters": {
            "red": "<listitem> <para>Specify the red, green, blue, and alpha values used when the color buffer is cleared. The initial values are all 0.</para> </listitem>"
        }
    },
    "glClearDepthf": {
        "signature": "void glClearDepthf(GLclampf depth)",
        "purpose": "specify the clear value for the depth buffer",
        "parameters": {
            "depth": "<listitem> <para>Specifies the depth value used when the depth buffer is cleared. The initial value is 1.</para> </listitem>"
        }
    },
    "glClearDepthx": {
        "signature": "void glClearDepthx(GLclampx depth)",
        "purpose": "specify the clear value for the depth buffer",
        "parameters": {
            "depth": "<listitem> <para>Specifies the depth value used when the depth buffer is cleared. The initial value is 1.</para> </listitem>"
        }
    },
    "glClearStencil": {
        "signature": "void glClearStencil(GLint s)",
        "purpose": "specify the clear value for the stencil buffer",
        "parameters": {
            "s": "<listitem> <para>Specifies the index used when the stencil buffer is cleared. The initial value is 0.</para> </listitem>"
        }
    },
    "glClientActiveTexture": {
        "signature": "void glClientActiveTexture(GLenum texture)",
        "purpose": "select client-side active texture unit",
        "parameters": {
            "texture": "<listitem> <para> Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. <parameter>texture</parameter> must be one of `GL_TEXTURE`<replaceable>i</replaceable>, <inlineequation><math> <mn>0</mn> <mo>=</mo> <mi>i</mi> <mo /> <mi>GL_MAX_TEXTURE_UNITS</mi> </math></inlineequation>, which is an implementation-dependent value. The initial value is `GL_TEXTURE0`. </para> </listitem>"
        }
    },
    "glClipPlanef": {
        "signature": "void glClipPlanef(GLenum plane, const GLfloat *equation)",
        "purpose": "specify a plane against which all geometry is    clipped",
        "parameters": {
            "plane": "<listitem> <para>Specifies which clipping plane is being positioned. Symbolic names of the form `GL_CLIP_PLANE`<emphasis>i</emphasis>, where <emphasis>i</emphasis> is an integer between 0 and `GL_MAX_CLIP_PLANES` <inlineequation> <math> <mn>-1</mn> </math> </inlineequation>, are accepted.</para> </listitem>",
            "equation": "<listitem> <para>Specifies the address of an array of four fixed-point or floating-point values. These are the coefficients of a plane equation in object coordinates: <emphasis>p1</emphasis>, <emphasis>p2</emphasis>, <emphasis>p3</emphasis>, and <emphasis>p4</emphasis>, in that order.</para> </listitem>"
        }
    },
    "glClipPlanex": {
        "signature": "void glClipPlanex(GLenum plane, const GLfixed *equation)",
        "purpose": "specify a plane against which all geometry is    clipped",
        "parameters": {
            "plane": "<listitem> <para>Specifies which clipping plane is being positioned. Symbolic names of the form `GL_CLIP_PLANE`<emphasis>i</emphasis>, where <emphasis>i</emphasis> is an integer between 0 and `GL_MAX_CLIP_PLANES` <inlineequation> <math> <mn>-1</mn> </math> </inlineequation>, are accepted.</para> </listitem>",
            "equation": "<listitem> <para>Specifies the address of an array of four fixed-point or floating-point values. These are the coefficients of a plane equation in object coordinates: <emphasis>p1</emphasis>, <emphasis>p2</emphasis>, <emphasis>p3</emphasis>, and <emphasis>p4</emphasis>, in that order.</para> </listitem>"
        }
    },
    "glColor4f": {
        "signature": "void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para>Specify new red, green, blue, and alpha values for the current color.</para> </listitem>"
        }
    },
    "glColor4x": {
        "signature": "void glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para>Specify new red, green, blue, and alpha values for the current color.</para> </listitem>"
        }
    },
    "glColor4ub": {
        "signature": "void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para>Specify new red, green, blue, and alpha values for the current color.</para> </listitem>"
        }
    },
    "glColorMask": {
        "signature": "void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)",
        "purpose": "enable and disable writing of color buffer        components",
        "parameters": {
            "red": "<listitem> <para>Specify whether red, green, blue, and alpha can or cannot be written into the color buffer. The initial values are all `GL_TRUE`, indicating that all color components can be written.</para> </listitem>"
        }
    },
    "glColorPointer": {
        "signature": "void glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of colors",
        "parameters": {
            "size": "<listitem> <para>Specifies the number of components per color. Must be 4. The initial value is 4.</para> </listitem>",
            "type": "<listitem> <para>Specifies the data type of each color component in the array. Symbolic constants `GL_UNSIGNED_BYTE` and `GL_FIXED` are accepted. However, the initial value is `GL_FLOAT`.</para> <para> The common profile accepts the symbolic constant `GL_FLOAT` as well. </para> </listitem>",
            "stride": "<listitem> <para>Specifies the byte offset between consecutive colors. If <parameter>stride</parameter> is 0, the colors are understood to be tightly packed in the array. The initial value is 0.</para> </listitem>",
            "pointer": "<listitem> <para>Specifies a pointer to the first component of the first color element in the array.</para> </listitem>"
        }
    },
    "glCompressedTexImage2D": {
        "signature": "void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data)",
        "purpose": "specify a two-dimensional compressed texture image",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture. Must be `GL_TEXTURE_2D`.</para> </listitem>",
            "level": "<listitem> <para>Specifies the level-of-detail number. For paletted formats, where all mipmap levels are loaded at once, this parameter is overloaded to represent the negative of the greatest mipmap level included in <parameter>data</parameter>. </para> </listitem>",
            "internalformat": "<listitem> <para>Specifies the color components in the texture. The following symbolic constants are accepted: `GL_PALETTE4_RGB8_OES`, `GL_PALETTE4_RGBA8_OES`, `GL_PALETTE4_R5_G6_B5_OES`, `GL_PALETTE4_RGBA4_OES`, `GL_PALETTE4_RGB5_A1_OES`, `GL_PALETTE8_RGB8_OES`, `GL_PALETTE8_RGBA8_OES`, `GL_PALETTE8_R5_G6_B5_OES`, `GL_PALETTE8_RGBA4_OES`, and `GL_PALETTE8_RGB5_A1_OES`.</para> </listitem>",
            "width": "<listitem> <para>Specifies the width of the texture image. Must be <inlineequation><math> <msup><mn>2</mn><mi>n</mi></msup> </math></inlineequation> for some integer <replaceable>n</replaceable>. All implementations support texture images that are at least 64 texels wide.</para> </listitem>",
            "height": "<listitem> <para>Specifies the height of the texture image. Must be <inlineequation><math> <msup><mn>2</mn><mi>m</mi></msup> </math></inlineequation> for some integer <replaceable>m</replaceable>. All implementations support texture images that are at least 64 texels high.</para> </listitem>",
            "border": "<listitem> <para>Specifies the width of the border. Must be 0.</para> </listitem>",
            "imageSize": "<listitem> <para>Specifies the size of the compressed image data in bytes.</para> </listitem>",
            "data": "<listitem> <para>Specifies a pointer to the compressed image data in memory.</para> </listitem>"
        }
    },
    "glCompressedTexSubImage2D": {
        "signature": "void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)",
        "purpose": "specify a two-dimensional compressed texture subimage",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture. Must be `GL_TEXTURE_2D`.</para> </listitem>",
            "level": "<listitem> <para>Specifies the level-of-detail number.</para> </listitem>",
            "xoffset": "<listitem> <para>Specifies a texel offset in the x direction within the texture array.</para> </listitem>",
            "yoffset": "<listitem> <para>Specifies a texel offset in the y direction within the texture array.</para> </listitem>",
            "width": "<listitem> <para>Specifies the width of the texture subimage.</para> </listitem>",
            "height": "<listitem> <para>Specifies the height of the texture subimage.</para> </listitem>",
            "format": "<listitem> <para>Specifies the format of the pixel data. Currently, there is no supported format.</para> </listitem>",
            "imageSize": "<listitem> <para>Specifies the size of the compressed pixel data in bytes.</para> </listitem>",
            "data": "<listitem> <para>Specifies a pointer to the compressed image data in memory.</para> </listitem>"
        }
    },
    "glCopyTexImage2D": {
        "signature": "void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)",
        "purpose": "specify a two-dimensional texture image with pixels from the color buffer",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture. Must be `GL_TEXTURE_2D`.</para> </listitem>",
            "level": "<listitem> <para>Specifies the level-of-detail number. Level 0 is the base image level. Level <parameter>n</parameter> is the <parameter>n</parameter>th mipmap reduction image.</para> </listitem>",
            "internalformat": "<listitem> <para>Specifies the color components of the texture. Must be one of the following symbolic constants: `GL_ALPHA`, `GL_LUMINANCE`, `GL_LUMINANCE_ALPHA`, `GL_RGB`, or `GL_RGBA`.</para> </listitem>",
            "x": "<listitem> <para>Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.</para> </listitem>",
            "width": "<listitem> <para>Specifies the width of the texture image. Must be 0 or <inlineequation><math> <msup><mn>2</mn><mi>n</mi></msup> </math></inlineequation> for some integer <replaceable>n</replaceable>.</para> </listitem>",
            "height": "<listitem> <para>Specifies the height of the texture image. Must be 0 or <inlineequation><math> <msup><mn>2</mn><mi>m</mi></msup> </math></inlineequation> for some integer <replaceable>m</replaceable>.</para> </listitem>",
            "border": "<listitem> <para>Specifies the width of the border. Must be 0.</para> </listitem>"
        }
    },
    "glCopyTexSubImage2D": {
        "signature": "void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "specify a two-dimensional texture subimage with pixels from the color buffer",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture. Must be `GL_TEXTURE_2D`.</para> </listitem>",
            "level": "<listitem> <para>Specifies the level-of-detail number. Level 0 is the base image level. Level <parameter>n</parameter> is the <parameter>n</parameter>th mipmap reduction image.</para> </listitem>",
            "xoffset": "<listitem> <para>Specifies a texel offset in the x direction within the texture array.</para> </listitem>",
            "yoffset": "<listitem> <para>Specifies a texel offset in the y direction within the texture array.</para> </listitem>",
            "x": "<listitem> <para>Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.</para> </listitem>",
            "width": "<listitem> <para>Specifies the width of the texture subimage.</para> </listitem>",
            "height": "<listitem> <para>Specifies the height of the texture subimage.</para> </listitem>"
        }
    },
    "glCullFace": {
        "signature": "void glCullFace(GLenum mode)",
        "purpose": "specify whether front- or back-facing polygons are        culled",
        "parameters": {
            "mode": "<listitem> <para>Specifies whether front- or back-facing polygons are culled. Symbolic constants `GL_FRONT`, `GL_BACK`, and `GL_FRONT_AND_BACK` are accepted. The initial value is `GL_BACK`.</para> </listitem>"
        }
    },
    "glCurrentPaletteMatrixOES": {
        "signature": "void glCurrentPaletteMatrixOES(GLuint index)",
        "purpose": "        defines which of the palette's matrices is affected by        subsequent matrix operations        ",
        "parameters": {
            "index": "<listitem> <para> specifies the index into the palette's matrices. </para> </listitem>"
        }
    },
    "glDeleteBuffers": {
        "signature": "void glDeleteBuffers(GLsizei n, const GLuint * buffers)",
        "purpose": "delete named buffer objects",
        "parameters": {
            "n": "<listitem> <para>Specifies the number of buffer objects to be deleted.</para> </listitem>",
            "buffers": "<listitem> <para>Specifies an array of buffer object names to be deleted.</para> </listitem>"
        }
    },
    "glDeleteTextures": {
        "signature": "void glDeleteTextures(GLsizei n, const GLuint * textures)",
        "purpose": "delete named textures",
        "parameters": {
            "n": "<listitem> <para>Specifies the number of textures to be deleted.</para> </listitem>",
            "textures": "<listitem> <para>Specifies an array of textures to be deleted.</para> </listitem>"
        }
    },
    "glDepthFunc": {
        "signature": "void glDepthFunc(GLenum func)",
        "purpose": "specify the value used for depth buffer comparisons",
        "parameters": {
            "func": "<listitem> <para>Specifies the depth comparison function. Symbolic constants `GL_NEVER`, `GL_LESS`, `GL_EQUAL`, `GL_LEQUAL`, `GL_GREATER`, `GL_NOTEQUAL`, `GL_GEQUAL`, and `GL_ALWAYS` are accepted. The initial value is `GL_LESS`.</para> </listitem>"
        }
    },
    "glDepthMask": {
        "signature": "void glDepthMask(GLboolean flag)",
        "purpose": "enable or disable writing into the depth buffer",
        "parameters": {
            "flag": "<listitem> <para>Specifies whether the depth buffer is enabled for writing. If <parameter>flag</parameter> is `GL_FALSE`, depth buffer writing is disabled, otherwise it is enabled. The initial value is `GL_TRUE`.</para> </listitem>"
        }
    },
    "glDepthRangef": {
        "signature": "void glDepthRangef(GLclampf near, GLclampf far)",
        "purpose": "specify mapping of depth values from normalized        device coordinates to window coordinates",
        "parameters": {
            "near": "<listitem> <para>Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.</para> </listitem>",
            "far": "<listitem> <para>Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.</para> </listitem>"
        }
    },
    "glDepthRangex": {
        "signature": "void glDepthRangex(GLclampx near, GLclampx far)",
        "purpose": "specify mapping of depth values from normalized        device coordinates to window coordinates",
        "parameters": {
            "near": "<listitem> <para>Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.</para> </listitem>",
            "far": "<listitem> <para>Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.</para> </listitem>"
        }
    },
    "glDrawArrays": {
        "signature": "void glDrawArrays(GLenum mode, GLint first, GLsizei count)",
        "purpose": "render primitives from array data",
        "parameters": {
            "mode": "<listitem> <para>Specifies what kind of primitives to render. Symbolic constants `GL_POINTS`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_LINES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, and `GL_TRIANGLES` are accepted.</para> </listitem>",
            "first": "<listitem> <para>Specifies the starting index in the enabled arrays.</para> </listitem>",
            "count": "<listitem> <para>Specifies the number of indices to be rendered.</para> </listitem>"
        }
    },
    "glDrawElements": {
        "signature": "void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices)",
        "purpose": "render primitives from array data",
        "parameters": {
            "mode": "<listitem> <para>Specifies what kind of primitives to render. Symbolic constants `GL_POINTS`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_LINES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, and `GL_TRIANGLES` are accepted.</para> </listitem>",
            "count": "<listitem> <para>Specifies the number of elements to be rendered.</para> </listitem>",
            "type": "<listitem> <para>Specifies the type of the values in <parameter>indices</parameter>. Must be either `GL_UNSIGNED_BYTE` or `GL_UNSIGNED_SHORT`.</para> </listitem>",
            "indices": "<listitem> <para>Specifies a pointer to the location where the indices are stored.</para> </listitem>"
        }
    },
    "glDrawTexsOES": {
        "signature": "void glDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)",
        "purpose": "draws a texture rectangle to the screen",
        "parameters": {
            "x": "<listitem> <para> Specify the position of the affected screen rectangle. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width and height of the affected screen rectangle in pixels. </para> </listitem>",
            "coords": "<listitem> <para> Specifies a pointer to the coords for the affected screen rectangle. </para> </listitem>"
        }
    },
    "glDrawTexiOES": {
        "signature": "void glDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height)",
        "purpose": "draws a texture rectangle to the screen",
        "parameters": {
            "x": "<listitem> <para> Specify the position of the affected screen rectangle. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width and height of the affected screen rectangle in pixels. </para> </listitem>",
            "coords": "<listitem> <para> Specifies a pointer to the coords for the affected screen rectangle. </para> </listitem>"
        }
    },
    "glDrawTexfOES": {
        "signature": "void glDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)",
        "purpose": "draws a texture rectangle to the screen",
        "parameters": {
            "x": "<listitem> <para> Specify the position of the affected screen rectangle. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width and height of the affected screen rectangle in pixels. </para> </listitem>",
            "coords": "<listitem> <para> Specifies a pointer to the coords for the affected screen rectangle. </para> </listitem>"
        }
    },
    "glDrawTexxOES": {
        "signature": "void glDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)",
        "purpose": "draws a texture rectangle to the screen",
        "parameters": {
            "x": "<listitem> <para> Specify the position of the affected screen rectangle. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width and height of the affected screen rectangle in pixels. </para> </listitem>",
            "coords": "<listitem> <para> Specifies a pointer to the coords for the affected screen rectangle. </para> </listitem>"
        }
    },
    "glDrawTexsvOES": {
        "signature": "void glDrawTexsvOES(GLshort* coords)",
        "purpose": "draws a texture rectangle to the screen",
        "parameters": {
            "x": "<listitem> <para> Specify the position of the affected screen rectangle. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width and height of the affected screen rectangle in pixels. </para> </listitem>",
            "coords": "<listitem> <para> Specifies a pointer to the coords for the affected screen rectangle. </para> </listitem>"
        }
    },
    "glDrawTexivOES": {
        "signature": "void glDrawTexivOES(GLint* coords)",
        "purpose": "draws a texture rectangle to the screen",
        "parameters": {
            "x": "<listitem> <para> Specify the position of the affected screen rectangle. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width and height of the affected screen rectangle in pixels. </para> </listitem>",
            "coords": "<listitem> <para> Specifies a pointer to the coords for the affected screen rectangle. </para> </listitem>"
        }
    },
    "glDrawTexfvOES": {
        "signature": "void glDrawTexfvOES(GLfloat* coords)",
        "purpose": "draws a texture rectangle to the screen",
        "parameters": {
            "x": "<listitem> <para> Specify the position of the affected screen rectangle. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width and height of the affected screen rectangle in pixels. </para> </listitem>",
            "coords": "<listitem> <para> Specifies a pointer to the coords for the affected screen rectangle. </para> </listitem>"
        }
    },
    "glDrawTexxvOES": {
        "signature": "void glDrawTexxvOES(GLfixed* coords)",
        "purpose": "draws a texture rectangle to the screen",
        "parameters": {
            "x": "<listitem> <para> Specify the position of the affected screen rectangle. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width and height of the affected screen rectangle in pixels. </para> </listitem>",
            "coords": "<listitem> <para> Specifies a pointer to the coords for the affected screen rectangle. </para> </listitem>"
        }
    },
    "glEnable": {
        "signature": "void glEnable(GLenum cap)",
        "purpose": "enable or disable server-side GL capabilities",
        "parameters": {
            "cap": "<listitem> <para>Specifies a symbolic constant indicating a GL capability.</para> </listitem>"
        }
    },
    "glDisable": {
        "signature": "void glDisable(GLenum cap)",
        "purpose": "enable or disable server-side GL capabilities",
        "parameters": {
            "cap": "<listitem> <para>Specifies a symbolic constant indicating a GL capability.</para> </listitem>"
        }
    },
    "glEnableClientState": {
        "signature": "void glEnableClientState(GLenum array)",
        "purpose": "enable or disable client-side capability",
        "parameters": {
            "array": "<listitem> <para> Specifies the capability to enable or disable. Symbolic constants `GL_COLOR_ARRAY`, <constant revision=\"OES_matrix_palette\">GL_MATRIX_INDEX_ARRAY_OES`<phrase revision=\"OES_matrix_palette\">,</phrase> `GL_NORMAL_ARRAY`, <constant revision=\"es1.1\">GL_POINT_SIZE_ARRAY_OES`<phrase revision=\"es1.1\">,</phrase> `GL_TEXTURE_COORD_ARRAY`,<phrase revision=\"not-OES_matrix_palette\"> and</phrase> `GL_VERTEX_ARRAY`<phrase revision=\"OES_matrix_palette\">, and</phrase> <constant revision=\"OES_matrix_palette\">GL_WEIGHT_ARRAY_OES` are accepted. </para> </listitem>"
        }
    },
    "glDisableClientState": {
        "signature": "void glDisableClientState(GLenum array)",
        "purpose": "enable or disable client-side capability",
        "parameters": {
            "array": "<listitem> <para> Specifies the capability to enable or disable. Symbolic constants `GL_COLOR_ARRAY`, <constant revision=\"OES_matrix_palette\">GL_MATRIX_INDEX_ARRAY_OES`<phrase revision=\"OES_matrix_palette\">,</phrase> `GL_NORMAL_ARRAY`, <constant revision=\"es1.1\">GL_POINT_SIZE_ARRAY_OES`<phrase revision=\"es1.1\">,</phrase> `GL_TEXTURE_COORD_ARRAY`,<phrase revision=\"not-OES_matrix_palette\"> and</phrase> `GL_VERTEX_ARRAY`<phrase revision=\"OES_matrix_palette\">, and</phrase> <constant revision=\"OES_matrix_palette\">GL_WEIGHT_ARRAY_OES` are accepted. </para> </listitem>"
        }
    },
    "glFinish": {
        "signature": "void glFinish()",
        "purpose": "block until all GL execution is complete",
        "parameters": {}
    },
    "glFlush": {
        "signature": "void glFlush()",
        "purpose": "force execution of GL commands in finite time",
        "parameters": {}
    },
    "glFogf": {
        "signature": "void glFogf(GLenum pname, GLfloat param)",
        "purpose": "specify fog parameters",
        "parameters": {
            "pname": "<listitem> <para>Specifies a single-valued fog parameter. `GL_FOG_MODE`, `GL_FOG_DENSITY`, `GL_FOG_START`, and `GL_FOG_END` are accepted.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that <parameter>pname</parameter> will be set to.</para> </listitem>"
        }
    },
    "glFogx": {
        "signature": "void glFogx(GLenum pname, GLfixed param)",
        "purpose": "specify fog parameters",
        "parameters": {
            "pname": "<listitem> <para>Specifies a single-valued fog parameter. `GL_FOG_MODE`, `GL_FOG_DENSITY`, `GL_FOG_START`, and `GL_FOG_END` are accepted.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that <parameter>pname</parameter> will be set to.</para> </listitem>"
        }
    },
    "glFogfv": {
        "signature": "void glFogfv(GLenum pname, const GLfloat * params)",
        "purpose": "specify fog parameters",
        "parameters": {
            "pname": "<listitem> <para>Specifies a single-valued fog parameter. `GL_FOG_MODE`, `GL_FOG_DENSITY`, `GL_FOG_START`, and `GL_FOG_END` are accepted.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that <parameter>pname</parameter> will be set to.</para> </listitem>"
        }
    },
    "glFogxv": {
        "signature": "void glFogxv(GLenum pname, const GLfixed * params)",
        "purpose": "specify fog parameters",
        "parameters": {
            "pname": "<listitem> <para>Specifies a single-valued fog parameter. `GL_FOG_MODE`, `GL_FOG_DENSITY`, `GL_FOG_START`, and `GL_FOG_END` are accepted.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that <parameter>pname</parameter> will be set to.</para> </listitem>"
        }
    },
    "glFrontFace": {
        "signature": "void glFrontFace(GLenum mode)",
        "purpose": "define front- and back-facing polygons",
        "parameters": {
            "mode": "<listitem> <para>Specifies the orientation of front-facing polygons. `GL_CW` and `GL_CCW` are accepted. The initial value is `GL_CCW`.</para> </listitem>"
        }
    },
    "glFrustumf": {
        "signature": "void glFrustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat near, GLfloat far)",
        "purpose": "multiply the current matrix by a perspective matrix",
        "parameters": {
            "left": "<listitem> <para>Specify the coordinates for the left and right vertical clipping planes.</para> </listitem>",
            "bottom": "<listitem> <para>Specify the coordinates for the bottom and top horizontal clipping planes.</para> </listitem>",
            "near": "<listitem> <para>Specify the distances to the near and far depth clipping planes. Both distances must be positive.</para> </listitem>"
        }
    },
    "glFrustumx": {
        "signature": "void glFrustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed near, GLfixed far)",
        "purpose": "multiply the current matrix by a perspective matrix",
        "parameters": {
            "left": "<listitem> <para>Specify the coordinates for the left and right vertical clipping planes.</para> </listitem>",
            "bottom": "<listitem> <para>Specify the coordinates for the bottom and top horizontal clipping planes.</para> </listitem>",
            "near": "<listitem> <para>Specify the distances to the near and far depth clipping planes. Both distances must be positive.</para> </listitem>"
        }
    },
    "glGenBuffers": {
        "signature": "void glGenBuffers(GLsizei n, GLuint * buffers)",
        "purpose": "generate buffer object names",
        "parameters": {
            "n": "<listitem> <para>Specifies the number of buffer object names to be generated.</para> </listitem>",
            "buffers": "<listitem> <para>Specifies an array in which the generated buffer object names are stored.</para> </listitem>"
        }
    },
    "glGenTextures": {
        "signature": "void glGenTextures(GLsizei n, GLuint * textures)",
        "purpose": "generate texture names",
        "parameters": {
            "n": "<listitem> <para>Specifies the number of texture names to be generated.</para> </listitem>",
            "textures": "<listitem> <para>Specifies an array in which the generated texture names are stored.</para> </listitem>"
        }
    },
    "glGetBooleanv": {
        "signature": "void glGetBooleanv(GLenum pname, GLboolean * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para>Specifies the parameter value to be returned. The symbolic constants in the list below are accepted.</para> </listitem>",
            "params": "<listitem> <para>Returns the value or values of the specified parameter.</para> </listitem>"
        }
    },
    "glGetFixedv": {
        "signature": "void glGetFixedv(GLenum pname, GLfixed * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para>Specifies the parameter value to be returned. The symbolic constants in the list below are accepted.</para> </listitem>",
            "params": "<listitem> <para>Returns the value or values of the specified parameter.</para> </listitem>"
        }
    },
    "glGetFloatv": {
        "signature": "void glGetFloatv(GLenum pname, GLfloat * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para>Specifies the parameter value to be returned. The symbolic constants in the list below are accepted.</para> </listitem>",
            "params": "<listitem> <para>Returns the value or values of the specified parameter.</para> </listitem>"
        }
    },
    "glGetIntegerv": {
        "signature": "void glGetIntegerv(GLenum pname, GLint * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para>Specifies the parameter value to be returned. The symbolic constants in the list below are accepted.</para> </listitem>",
            "params": "<listitem> <para>Returns the value or values of the specified parameter.</para> </listitem>"
        }
    },
    "glGetBufferParameteriv": {
        "signature": "void glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "return parameters of a buffer object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER` or `GL_ELEMENT_ARRAY_BUFFER`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a buffer object parameter. Accepted values are `GL_BUFFER_SIZE` or `GL_BUFFER_USAGE`. </para> </listitem>",
            "params": "<listitem> <para>Returns the requested parameter.</para> </listitem>"
        }
    },
    "glGetClipPlanef": {
        "signature": "void glGetClipPlanef(GLenum plane, GLfloat *equation)",
        "purpose": "return the coefficients of the specified clipping    plane",
        "parameters": {
            "plane": "<listitem> <para>Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. Symbolic names of the form `GL_CLIP_PLANE` <emphasis>i</emphasis>, where <emphasis>i</emphasis> is an integer between 0 and `GL_MAX_CLIP_PLANES` <inlineequation> <math> <mn>-1</mn> </math> </inlineequation>, are accepted.</para> </listitem>",
            "equation": "<listitem> <para>Returns four fixed-point or floating-point values that are the coefficients of the plane equation of <parameter>plane</parameter> in eye coordinates in the order <emphasis>p1</emphasis>, <emphasis>p2</emphasis>, <emphasis>p3</emphasis>, and <emphasis>p4</emphasis>. The initial value is (0, 0, 0, 0).</para> </listitem>"
        }
    },
    "glGetClipPlanex": {
        "signature": "void glGetClipPlanex(GLenum plane, GLfixed *equation)",
        "purpose": "return the coefficients of the specified clipping    plane",
        "parameters": {
            "plane": "<listitem> <para>Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. Symbolic names of the form `GL_CLIP_PLANE` <emphasis>i</emphasis>, where <emphasis>i</emphasis> is an integer between 0 and `GL_MAX_CLIP_PLANES` <inlineequation> <math> <mn>-1</mn> </math> </inlineequation>, are accepted.</para> </listitem>",
            "equation": "<listitem> <para>Returns four fixed-point or floating-point values that are the coefficients of the plane equation of <parameter>plane</parameter> in eye coordinates in the order <emphasis>p1</emphasis>, <emphasis>p2</emphasis>, <emphasis>p3</emphasis>, and <emphasis>p4</emphasis>. The initial value is (0, 0, 0, 0).</para> </listitem>"
        }
    },
    "glGetError": {
        "signature": "GLenum glGetError()",
        "purpose": "return error information",
        "parameters": {}
    },
    "glGetLightfv": {
        "signature": "void glGetLightfv(GLenum light, GLenum pname, GLfloat * params)",
        "purpose": "return light source parameter values",
        "parameters": {
            "light": "<listitem> <para> Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form <inlineequation><math> <mi>GL_LIGHTi</mi> where <mi>0</mi><mo /><mi>i</mi><mo /> <mi>GL_MAX_LIGHTS</mi> </math></inlineequation> </para> </listitem>",
            "pname": "<listitem> <para> Specifies a light source parameter for light. Accepted symbolic names are `GL_AMBIENT`, `GL_DIFFUSE`, `GL_SPECULAR`, `GL_POSITION`, `GL_SPOT_DIRECTION`, `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetLightxv": {
        "signature": "void glGetLightxv(GLenum light, GLenum pname, GLfixed * params)",
        "purpose": "return light source parameter values",
        "parameters": {
            "light": "<listitem> <para> Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form <inlineequation><math> <mi>GL_LIGHTi</mi> where <mi>0</mi><mo /><mi>i</mi><mo /> <mi>GL_MAX_LIGHTS</mi> </math></inlineequation> </para> </listitem>",
            "pname": "<listitem> <para> Specifies a light source parameter for light. Accepted symbolic names are `GL_AMBIENT`, `GL_DIFFUSE`, `GL_SPECULAR`, `GL_POSITION`, `GL_SPOT_DIRECTION`, `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetMaterialfv": {
        "signature": "void glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params)",
        "purpose": "return material parameters values",
        "parameters": {
            "face": "<listitem> <para> Specifies which of the two materials is being queried. `GL_FRONT` or `GL_BACK` are accepted, representing the front and back materials, respectively. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the material parameter to return. Accepted symbolic names are `GL_AMBIENT`, `GL_DIFFUSE`, `GL_SPECULAR`, `GL_EMISSION`, and `GL_SHININESS`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetMaterialxv": {
        "signature": "void glGetMaterialxv(GLenum face, GLenum pname, GLfixed * params)",
        "purpose": "return material parameters values",
        "parameters": {
            "face": "<listitem> <para> Specifies which of the two materials is being queried. `GL_FRONT` or `GL_BACK` are accepted, representing the front and back materials, respectively. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the material parameter to return. Accepted symbolic names are `GL_AMBIENT`, `GL_DIFFUSE`, `GL_SPECULAR`, `GL_EMISSION`, and `GL_SHININESS`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetPointerv": {
        "signature": "void glGetPointerv(GLenum pname, void ** params)",
        "purpose": "return the address of the specified pointer",
        "parameters": {
            "pname": "<listitem> <para> Specifies the array or buffer pointer to be returned. Accepted symbolic names are `GL_COLOR_ARRAY_POINTER`, <constant revision=\"OES_matrix_palette\">GL_MATRIX_INDEX_ARRAY_POINTER_OES`<phrase revision=\"OES_matrix_palette\">,</phrase> `GL_NORMAL_ARRAY_POINTER`, <constant revision=\"es1.1\">GL_POINT_SIZE_ARRAY_POINTER_OES`<phrase revision=\"es1.1\">,</phrase> `GL_TEXTURE_COORD_ARRAY_POINTER`,<phrase revision=\"not-OES_matrix_palette\"> and</phrase> `GL_VERTEX_ARRAY_POINTER`<phrase revision=\"not-OES_matrix_palette\">.</phrase><phrase revision=\"OES_matrix_palette\">, and</phrase> <constant revision=\"OES_matrix_palette\">GL_WEIGHT_ARRAY_POINTER_OES`<phrase revision=\"OES_matrix_palette\">.</phrase> </para> </listitem>",
            "params": "<listitem> <para> Returns the pointer value specified by <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glGetString": {
        "signature": "const GLubyte * glGetString(GLenum name)",
        "purpose": "return a string describing the current GL        connection",
        "parameters": {
            "name": "<listitem> <para>Specifies a symbolic constant, one of `GL_VENDOR`, `GL_RENDERER`, `GL_VERSION`, or `GL_EXTENSIONS`.</para> </listitem>"
        }
    },
    "glGetTexEnvfv": {
        "signature": "void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params)",
        "purpose": "return texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV` or `GL_POINT_SPRITE_OES`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture environment parameter. Accepted values are `GL_TEXTURE_ENV_MODE`, `GL_TEXTURE_ENV_COLOR`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE_OES`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetTexEnviv": {
        "signature": "void glGetTexEnviv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "return texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV` or `GL_POINT_SPRITE_OES`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture environment parameter. Accepted values are `GL_TEXTURE_ENV_MODE`, `GL_TEXTURE_ENV_COLOR`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE_OES`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetTexEnvxv": {
        "signature": "void glGetTexEnvxv(GLenum target, GLenum pname, GLfixed * params)",
        "purpose": "return texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV` or `GL_POINT_SPRITE_OES`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture environment parameter. Accepted values are `GL_TEXTURE_ENV_MODE`, `GL_TEXTURE_ENV_COLOR`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE_OES`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetTexParameterfv": {
        "signature": "void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params)",
        "purpose": "return texture parameter values",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture, which must be `GL_TEXTURE_2D`.</para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture parameter. Which can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, or `GL_GENERATE_MIPMAP`. </para> </listitem>",
            "params": "<listitem> <para>Returns texture parameters.</para> </listitem>"
        }
    },
    "glGetTexParameteriv": {
        "signature": "void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "return texture parameter values",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture, which must be `GL_TEXTURE_2D`.</para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture parameter. Which can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, or `GL_GENERATE_MIPMAP`. </para> </listitem>",
            "params": "<listitem> <para>Returns texture parameters.</para> </listitem>"
        }
    },
    "glGetTexParameterxv": {
        "signature": "void glGetTexParameterxv(GLenum target, GLenum pname, GLfixed * params)",
        "purpose": "return texture parameter values",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture, which must be `GL_TEXTURE_2D`.</para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture parameter. Which can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, or `GL_GENERATE_MIPMAP`. </para> </listitem>",
            "params": "<listitem> <para>Returns texture parameters.</para> </listitem>"
        }
    },
    "glHint": {
        "signature": "void glHint(GLenum target, GLenum mode)",
        "purpose": "specify implementation-specific hints",
        "parameters": {
            "target": "<listitem> <para>Specifies a symbolic constant indicating the behavior to be controlled. `GL_FOG_HINT` , `GL_GENERATE_MIPMAP_HINT` , `GL_LINE_SMOOTH_HINT` , `GL_PERSPECTIVE_CORRECTION_HINT`, and `GL_POINT_SMOOTH_HINT` are accepted.</para> </listitem>",
            "mode": "<listitem> <para>Specifies a symbolic constant indicating the desired behavior. `GL_FASTEST`, `GL_NICEST`, and `GL_DONT_CARE` are accepted.</para> </listitem>"
        }
    },
    "glIsBuffer": {
        "signature": "GLboolean glIsBuffer(GLuint buffer)",
        "purpose": "determine if a name corresponds to a buffer object",
        "parameters": {
            "buffer": "<listitem> <para> Specifies a value that may be the name of a buffer object. </para> </listitem>"
        }
    },
    "glIsEnabled": {
        "signature": "GLboolean glIsEnabled(GLenum cap)",
        "purpose": "test whether a capability is enabled",
        "parameters": {
            "cap": "<listitem> <para> Specifies a symbolic constant indicating a GL capability. </para> </listitem>"
        }
    },
    "glIsTexture": {
        "signature": "GLboolean glIsTexture(GLuint texture)",
        "purpose": "determine if a name corresponds to a texture",
        "parameters": {
            "texture": "<listitem> <para> Specifies a value that may be the name of a texture. </para> </listitem>"
        }
    },
    "glLightf": {
        "signature": "void glLightf(GLenum light, GLenum pname, GLfloat param)",
        "purpose": "set light source parameters",
        "parameters": {
            "light": "<listitem> <para>Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form `GL_LIGHT`<replaceable>i</replaceable> where <inlineequation><math> <mn>0</mn> <mo>=</mo> <mi>i</mi> <mo /> <mi>GL_MAX_LIGHTS</mi> </math></inlineequation>. </para> </listitem>",
            "pname": "<listitem> <para>Specifies a single-valued light source parameter for <parameter>light</parameter>. `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION` are accepted.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that parameter <parameter>pname</parameter> of light source <parameter>light</parameter> will be set to.</para> </listitem>"
        }
    },
    "glLightx": {
        "signature": "void glLightx(GLenum light, GLenum pname, GLfixed param)",
        "purpose": "set light source parameters",
        "parameters": {
            "light": "<listitem> <para>Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form `GL_LIGHT`<replaceable>i</replaceable> where <inlineequation><math> <mn>0</mn> <mo>=</mo> <mi>i</mi> <mo /> <mi>GL_MAX_LIGHTS</mi> </math></inlineequation>. </para> </listitem>",
            "pname": "<listitem> <para>Specifies a single-valued light source parameter for <parameter>light</parameter>. `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION` are accepted.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that parameter <parameter>pname</parameter> of light source <parameter>light</parameter> will be set to.</para> </listitem>"
        }
    },
    "glLightfv": {
        "signature": "void glLightfv(GLenum light, GLenum pname, const GLfloat * params)",
        "purpose": "set light source parameters",
        "parameters": {
            "light": "<listitem> <para>Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form `GL_LIGHT`<replaceable>i</replaceable> where <inlineequation><math> <mn>0</mn> <mo>=</mo> <mi>i</mi> <mo /> <mi>GL_MAX_LIGHTS</mi> </math></inlineequation>. </para> </listitem>",
            "pname": "<listitem> <para>Specifies a single-valued light source parameter for <parameter>light</parameter>. `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION` are accepted.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that parameter <parameter>pname</parameter> of light source <parameter>light</parameter> will be set to.</para> </listitem>"
        }
    },
    "glLightxv": {
        "signature": "void glLightxv(GLenum light, GLenum pname, const GLfixed * params)",
        "purpose": "set light source parameters",
        "parameters": {
            "light": "<listitem> <para>Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form `GL_LIGHT`<replaceable>i</replaceable> where <inlineequation><math> <mn>0</mn> <mo>=</mo> <mi>i</mi> <mo /> <mi>GL_MAX_LIGHTS</mi> </math></inlineequation>. </para> </listitem>",
            "pname": "<listitem> <para>Specifies a single-valued light source parameter for <parameter>light</parameter>. `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION` are accepted.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that parameter <parameter>pname</parameter> of light source <parameter>light</parameter> will be set to.</para> </listitem>"
        }
    },
    "glLightModelf": {
        "signature": "void glLightModelf(GLenum pname, GLfloat param)",
        "purpose": "set the lighting model parameters",
        "parameters": {
            "pname": "<listitem> <para>Specifies a single-valued lighting model parameter. Must be `GL_LIGHT_MODEL_TWO_SIDE`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that <parameter>param</parameter> will be set to.</para> </listitem>"
        }
    },
    "glLightModelx": {
        "signature": "void glLightModelx(GLenum pname, GLfixed param)",
        "purpose": "set the lighting model parameters",
        "parameters": {
            "pname": "<listitem> <para>Specifies a single-valued lighting model parameter. Must be `GL_LIGHT_MODEL_TWO_SIDE`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that <parameter>param</parameter> will be set to.</para> </listitem>"
        }
    },
    "glLightModelfv": {
        "signature": "void glLightModelfv(GLenum pname, const GLfloat * params)",
        "purpose": "set the lighting model parameters",
        "parameters": {
            "pname": "<listitem> <para>Specifies a single-valued lighting model parameter. Must be `GL_LIGHT_MODEL_TWO_SIDE`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that <parameter>param</parameter> will be set to.</para> </listitem>"
        }
    },
    "glLightModelxv": {
        "signature": "void glLightModelxv(GLenum pname, const GLfixed * params)",
        "purpose": "set the lighting model parameters",
        "parameters": {
            "pname": "<listitem> <para>Specifies a single-valued lighting model parameter. Must be `GL_LIGHT_MODEL_TWO_SIDE`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that <parameter>param</parameter> will be set to.</para> </listitem>"
        }
    },
    "glLineWidth": {
        "signature": "void glLineWidth(GLfloat width)",
        "purpose": "specify the width of rasterized lines",
        "parameters": {
            "width": "<listitem> <para>Specifies the width of rasterized lines. The initial value is 1.</para> </listitem>"
        }
    },
    "glLineWidthx": {
        "signature": "void glLineWidthx(GLfixed width)",
        "purpose": "specify the width of rasterized lines",
        "parameters": {
            "width": "<listitem> <para>Specifies the width of rasterized lines. The initial value is 1.</para> </listitem>"
        }
    },
    "glLoadIdentity": {
        "signature": "void glLoadIdentity()",
        "purpose": "replace the current matrix with the identity\tmatrix",
        "parameters": {}
    },
    "glLoadMatrixf": {
        "signature": "void glLoadMatrixf(const GLfloat * m)",
        "purpose": "replace the current matrix with the specified\tmatrix",
        "parameters": {
            "m": "<listitem> <para>Specifies a pointer to 16 consecutive values, which are used as the elements of a <inlineequation><math> <mn>4</mn><mo>x</mo><mn>4</mn> </math></inlineequation> column-major matrix.</para> </listitem>"
        }
    },
    "glLoadMatrixx": {
        "signature": "void glLoadMatrixx(const GLfixed * m)",
        "purpose": "replace the current matrix with the specified\tmatrix",
        "parameters": {
            "m": "<listitem> <para>Specifies a pointer to 16 consecutive values, which are used as the elements of a <inlineequation><math> <mn>4</mn><mo>x</mo><mn>4</mn> </math></inlineequation> column-major matrix.</para> </listitem>"
        }
    },
    "glLoadPaletteFromModelViewMatrixOES": {
        "signature": "void glLoadPaletteFromModelViewMatrixOES()",
        "purpose": "        copies the current model view matrix to a        matrix in the current matrix palette        ",
        "parameters": {}
    },
    "glLogicOp": {
        "signature": "void glLogicOp(GLenum opcode)",
        "purpose": "specify a logical pixel operation",
        "parameters": {
            "opcode": "<listitem> <para>Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: `GL_CLEAR`, `GL_SET`, `GL_COPY`, `GL_COPY_INVERTED`, `GL_NOOP`, `GL_INVERT`, `GL_AND`, `GL_NAND`, `GL_OR`, `GL_NOR`, `GL_XOR`, `GL_EQUIV`, `GL_AND_REVERSE`, `GL_AND_INVERTED`, `GL_OR_REVERSE`, and `GL_OR_INVERTED`. The initial value is `GL_COPY`.</para> </listitem>"
        }
    },
    "glMaterialf": {
        "signature": "void glMaterialf(GLenum face, GLenum pname, GLfloat param)",
        "purpose": "specify material parameters for the lighting model",
        "parameters": {
            "face": "<listitem> <para>Specifies which face or faces are being updated. Must be `GL_FRONT_AND_BACK`.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the single-valued material parameter of the face or faces that is being updated. Must be `GL_SHININESS`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that parameter `GL_SHININESS` will be set to.</para> </listitem>"
        }
    },
    "glMaterialx": {
        "signature": "void glMaterialx(GLenum face, GLenum pname, GLfixed param)",
        "purpose": "specify material parameters for the lighting model",
        "parameters": {
            "face": "<listitem> <para>Specifies which face or faces are being updated. Must be `GL_FRONT_AND_BACK`.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the single-valued material parameter of the face or faces that is being updated. Must be `GL_SHININESS`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that parameter `GL_SHININESS` will be set to.</para> </listitem>"
        }
    },
    "glMaterialfv": {
        "signature": "void glMaterialfv(GLenum face, GLenum pname, const GLfloat * params)",
        "purpose": "specify material parameters for the lighting model",
        "parameters": {
            "face": "<listitem> <para>Specifies which face or faces are being updated. Must be `GL_FRONT_AND_BACK`.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the single-valued material parameter of the face or faces that is being updated. Must be `GL_SHININESS`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that parameter `GL_SHININESS` will be set to.</para> </listitem>"
        }
    },
    "glMaterialxv": {
        "signature": "void glMaterialxv(GLenum face, GLenum pname, const GLfixed * params)",
        "purpose": "specify material parameters for the lighting model",
        "parameters": {
            "face": "<listitem> <para>Specifies which face or faces are being updated. Must be `GL_FRONT_AND_BACK`.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the single-valued material parameter of the face or faces that is being updated. Must be `GL_SHININESS`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that parameter `GL_SHININESS` will be set to.</para> </listitem>"
        }
    },
    "glMatrixIndexPointerOES": {
        "signature": "void glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of matrix indices",
        "parameters": {
            "size": "<listitem> <para> Specifies the number of matrix indices per vertex. Must be is less than or equal to `GL_MAX_VERTEX_UNITS_OES`. The initial value is `0`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of each matrix index in the array. Symbolic constant `GL_UNSIGNED_BYTE` is accepted. The initial value is `GL_UNSIGNED_BYTE`. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive matrix indices. If <parameter>stride</parameter> is 0, the matrix indices are understood to be tightly packed in the array. The initial value is `0`. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first matrix index of the first vertex in the array. The initial value is `0`. </para> </listitem>"
        }
    },
    "glMatrixMode": {
        "signature": "void glMatrixMode(GLenum mode)",
        "purpose": "specify which matrix is the current matrix",
        "parameters": {
            "mode": "<listitem> <para> Specifies which matrix stack is the target for subsequent matrix operations. These values are accepted: `GL_MODELVIEW`, `GL_PROJECTION`,<phrase revision=\"not-OES_matrix_palette\"> and</phrase> `GL_TEXTURE`<phrase revision=\"not-OES_matrix_palette\">.</phrase><phrase revision=\"OES_matrix_palette\">, and</phrase> <constant revision=\"OES_matrix_palette\">GL_MATRIX_PALETTE_OES`<phrase revision=\"OES_matrix_palette\">.</phrase> The initial value is `GL_MODELVIEW`. </para> </listitem>"
        }
    },
    "glMultiTexCoord4f": {
        "signature": "void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para>Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least <phrase revision=\"es1.1\">two</phrase><phrase revision=\"not-es1.1\">one</phrase>. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_UNITS` - 1, which is an implementation-dependent value.</para> </listitem>",
            "s": "<listitem> <para>Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit.</para> </listitem>"
        }
    },
    "glMultiTexCoord4x": {
        "signature": "void glMultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para>Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least <phrase revision=\"es1.1\">two</phrase><phrase revision=\"not-es1.1\">one</phrase>. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_UNITS` - 1, which is an implementation-dependent value.</para> </listitem>",
            "s": "<listitem> <para>Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit.</para> </listitem>"
        }
    },
    "glMultMatrixf": {
        "signature": "void glMultMatrixf(const GLfloat * m)",
        "purpose": "multiply the current matrix with the specified\tmatrix",
        "parameters": {
            "m": "<listitem> <para>Points to 16 consecutive values that are used as the elements of a <inlineequation><math> <mn>4</mn><mo>x</mo><mn>4</mn> </math></inlineequation> column-major matrix.</para> </listitem>"
        }
    },
    "glMultMatrixx": {
        "signature": "void glMultMatrixx(const GLfixed * m)",
        "purpose": "multiply the current matrix with the specified\tmatrix",
        "parameters": {
            "m": "<listitem> <para>Points to 16 consecutive values that are used as the elements of a <inlineequation><math> <mn>4</mn><mo>x</mo><mn>4</mn> </math></inlineequation> column-major matrix.</para> </listitem>"
        }
    },
    "glNormal3f": {
        "signature": "void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para>Specify the <parameter>x</parameter>, <parameter>y</parameter>, and <parameter>z</parameter> coordinates of the new current normal. The initial value is (0, 0, 1).</para> </listitem>"
        }
    },
    "glNormal3x": {
        "signature": "void glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para>Specify the <parameter>x</parameter>, <parameter>y</parameter>, and <parameter>z</parameter> coordinates of the new current normal. The initial value is (0, 0, 1).</para> </listitem>"
        }
    },
    "glNormalPointer": {
        "signature": "void glNormalPointer(GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of normals",
        "parameters": {
            "type": "<listitem> <para>Specifies the data type of each coordinate in the array. Symbolic constants `GL_BYTE`, `GL_SHORT`, and `GL_FIXED` are accepted. However, the initial value is `GL_FLOAT`.</para> <para> The common profile accepts the symbolic constant `GL_FLOAT` as well. </para> </listitem>",
            "stride": "<listitem> <para>Specifies the byte offset between consecutive normals. If <parameter>stride</parameter> is 0, the normals are understood to be tightly packed in the array. The initial value is 0.</para> </listitem>",
            "pointer": "<listitem> <para>Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.</para> </listitem>"
        }
    },
    "glOrthof": {
        "signature": "void glOrthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat near, GLfloat far)",
        "purpose": "multiply the current matrix with an orthographic\tmatrix",
        "parameters": {
            "left": "<listitem> <para>Specify the coordinates for the left and right vertical clipping planes.</para> </listitem>",
            "bottom": "<listitem> <para>Specify the coordinates for the bottom and top horizontal clipping planes.</para> </listitem>",
            "near": "<listitem> <para>Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.</para> </listitem>"
        }
    },
    "glOrthox": {
        "signature": "void glOrthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed near, GLfixed far)",
        "purpose": "multiply the current matrix with an orthographic\tmatrix",
        "parameters": {
            "left": "<listitem> <para>Specify the coordinates for the left and right vertical clipping planes.</para> </listitem>",
            "bottom": "<listitem> <para>Specify the coordinates for the bottom and top horizontal clipping planes.</para> </listitem>",
            "near": "<listitem> <para>Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.</para> </listitem>"
        }
    },
    "glPixelStorei": {
        "signature": "void glPixelStorei(GLenum pname, GLint param)",
        "purpose": "set pixel storage modes",
        "parameters": {
            "pname": "<listitem> <para>Specifies the symbolic name of the parameter to be set. `GL_PACK_ALIGNMENT` affects the packing of pixel data into memory. `GL_UNPACK_ALIGNMENT` affects the unpacking of pixel data <parameter>from</parameter> memory.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value that <parameter>pname</parameter> is set to.</para> </listitem>"
        }
    },
    "glPointParameterf": {
        "signature": "void glPointParameterf(GLenum pname, GLfloat param)",
        "purpose": "specify parameters for point rasterization",
        "parameters": {
            "pname": "<listitem> <para> Specifies the single-valued parameter to be updated. Can be either `GL_POINT_SIZE_MIN`, `GL_POINT_SIZE_MAX`, or `GL_POINT_FADE_THRESHOLD_SIZE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that the parameter will be set to. </para> </listitem>"
        }
    },
    "glPointParameterx": {
        "signature": "void glPointParameterx(GLenum pname, GLfixed param)",
        "purpose": "specify parameters for point rasterization",
        "parameters": {
            "pname": "<listitem> <para> Specifies the single-valued parameter to be updated. Can be either `GL_POINT_SIZE_MIN`, `GL_POINT_SIZE_MAX`, or `GL_POINT_FADE_THRESHOLD_SIZE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that the parameter will be set to. </para> </listitem>"
        }
    },
    "glPointParameterfv": {
        "signature": "void glPointParameterfv(GLenum pname, const GLfloat * params)",
        "purpose": "specify parameters for point rasterization",
        "parameters": {
            "pname": "<listitem> <para> Specifies the single-valued parameter to be updated. Can be either `GL_POINT_SIZE_MIN`, `GL_POINT_SIZE_MAX`, or `GL_POINT_FADE_THRESHOLD_SIZE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that the parameter will be set to. </para> </listitem>"
        }
    },
    "glPointParameterxv": {
        "signature": "void glPointParameterxv(GLenum pname, const GLfixed * params)",
        "purpose": "specify parameters for point rasterization",
        "parameters": {
            "pname": "<listitem> <para> Specifies the single-valued parameter to be updated. Can be either `GL_POINT_SIZE_MIN`, `GL_POINT_SIZE_MAX`, or `GL_POINT_FADE_THRESHOLD_SIZE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that the parameter will be set to. </para> </listitem>"
        }
    },
    "glPointSize": {
        "signature": "void glPointSize(GLfloat size)",
        "purpose": "specify the diameter of rasterized points",
        "parameters": {
            "size": "<listitem> <para>Specifies the diameter of rasterized points. The initial value is 1.</para> </listitem>"
        }
    },
    "glPointSizex": {
        "signature": "void glPointSizex(GLfixed size)",
        "purpose": "specify the diameter of rasterized points",
        "parameters": {
            "size": "<listitem> <para>Specifies the diameter of rasterized points. The initial value is 1.</para> </listitem>"
        }
    },
    "glPointSizePointerOES": {
        "signature": "void glPointSizePointerOES(GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of point sizes",
        "parameters": {
            "type": "<listitem> <para> Specifies the data type of each point size in the array. Symbolic constant `GL_FIXED` is accepted. However, the common profile also accepts the symbolic constant `GL_FLOAT`. The initial value is `GL_FIXED` for the common lite profile, or `GL_FLOAT` for the common profile. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive point sizes. If <parameter>stride</parameter> is 0, the point sizes are understood to be tightly packed in the array. The initial value is `0`. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the point size of the first vertex in the array. The initial value is `0`. </para> </listitem>"
        }
    },
    "glPolygonOffset": {
        "signature": "void glPolygonOffset(GLfloat factor, GLfloat units)",
        "purpose": "set the scale and units used to calculate depth        values",
        "parameters": {
            "factor": "<listitem> <para>Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.</para> </listitem>",
            "units": "<listitem> <para>Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.</para> </listitem>"
        }
    },
    "glPolygonOffsetx": {
        "signature": "void glPolygonOffsetx(GLfixed factor, GLfixed units)",
        "purpose": "set the scale and units used to calculate depth        values",
        "parameters": {
            "factor": "<listitem> <para>Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.</para> </listitem>",
            "units": "<listitem> <para>Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.</para> </listitem>"
        }
    },
    "glPushMatrix": {
        "signature": "void glPushMatrix()",
        "purpose": "push and pop the current matrix stack",
        "parameters": {}
    },
    "glPopMatrix": {
        "signature": "void glPopMatrix()",
        "purpose": "push and pop the current matrix stack",
        "parameters": {}
    },
    "glQueryMatrixxOES": {
        "signature": "GLbitfield glQueryMatrixxOES(GLfixed * mantissa, GLint * exponent)",
        "purpose": "return the values of the current matrix",
        "parameters": {
            "mantissa": "<listitem> <para>Returns the mantissa values of the current matrix.</para> </listitem>",
            "exponent": "<listitem> <para>Returns the exponents of the current matrix.</para> </listitem>"
        }
    },
    "glReadPixels": {
        "signature": "void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels)",
        "purpose": "read a block of pixels from the color buffer",
        "parameters": {
            "x": "<listitem> <para>Specify the window coordinates of the first pixel that is read from the color buffer. This location is the lower left corner of a rectangular block of pixels.</para> </listitem>",
            "width": "<listitem> <para>Specify the dimensions of the pixel rectangle. <parameter>width</parameter> and <parameter>height</parameter> of one correspond to a single pixel.</para> </listitem>",
            "format": "<listitem> <para>Specifies the format of the pixel data. Must be either `GL_RGBA` or the value of `GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES`.</para> </listitem>",
            "type": "<listitem> <para>Specifies the data type of the pixel data. Must be either `GL_UNSIGNED_BYTE` or the value of `GL_IMPLEMENTATION_COLOR_READ_TYPE_OES`.</para> </listitem>",
            "pixels": "<listitem> <para>Returns the pixel data.</para> </listitem>"
        }
    },
    "glRotatef": {
        "signature": "void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "multiply the current matrix by a rotation matrix",
        "parameters": {
            "angle": "<listitem> <para>Specifies the angle of rotation, in degrees.</para> </listitem>",
            "x": "<listitem> <para>Specify the <parameter>x</parameter>, <parameter>y</parameter>, and <parameter>z</parameter> coordinates of a vector, respectively.</para> </listitem>"
        }
    },
    "glRotatex": {
        "signature": "void glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)",
        "purpose": "multiply the current matrix by a rotation matrix",
        "parameters": {
            "angle": "<listitem> <para>Specifies the angle of rotation, in degrees.</para> </listitem>",
            "x": "<listitem> <para>Specify the <parameter>x</parameter>, <parameter>y</parameter>, and <parameter>z</parameter> coordinates of a vector, respectively.</para> </listitem>"
        }
    },
    "glSampleCoverage": {
        "signature": "void glSampleCoverage(GLclampf value, GLboolean invert)",
        "purpose": "specify mask to modify multisampled pixel fragments",
        "parameters": {
            "value": "<listitem> <para>Specifies the coverage of the modification mask. The value is clamped to the range [0, 1], where 0 represents no coverage and 1 full coverage. The initial value is 1.</para> </listitem>",
            "invert": "<listitem> <para>Specifies whether the modification mask implied by <parameter>value</parameter> is inverted or not. The initial value is `GL_FALSE`. </para> </listitem>"
        }
    },
    "glSampleCoveragex": {
        "signature": "void glSampleCoveragex(GLclampx value, GLboolean invert)",
        "purpose": "specify mask to modify multisampled pixel fragments",
        "parameters": {
            "value": "<listitem> <para>Specifies the coverage of the modification mask. The value is clamped to the range [0, 1], where 0 represents no coverage and 1 full coverage. The initial value is 1.</para> </listitem>",
            "invert": "<listitem> <para>Specifies whether the modification mask implied by <parameter>value</parameter> is inverted or not. The initial value is `GL_FALSE`. </para> </listitem>"
        }
    },
    "glScalef": {
        "signature": "void glScalef(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "multiply the current matrix by a general scaling\tmatrix",
        "parameters": {
            "x": "<listitem> <para>Specify scale factors along the <parameter>x</parameter>, <parameter>y</parameter>, and <parameter>z</parameter> axes, respectively.</para> </listitem>"
        }
    },
    "glScalex": {
        "signature": "void glScalex(GLfixed x, GLfixed y, GLfixed z)",
        "purpose": "multiply the current matrix by a general scaling\tmatrix",
        "parameters": {
            "x": "<listitem> <para>Specify scale factors along the <parameter>x</parameter>, <parameter>y</parameter>, and <parameter>z</parameter> axes, respectively.</para> </listitem>"
        }
    },
    "glScissor": {
        "signature": "void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "define the scissor box",
        "parameters": {
            "x": "<listitem> <para>Specify the lower left corner of the scissor box, in pixels. The initial value is (0, 0).</para> </listitem>",
            "width": "<listitem> <para>Specify the width and height of the scissor box. When a GL context is first attached to a surface (e.g. window), <parameter>width</parameter> and <parameter>height</parameter> are set to the dimensions of that surface.</para> </listitem>"
        }
    },
    "glShadeModel": {
        "signature": "void glShadeModel(GLenum mode)",
        "purpose": "select flat or smooth shading",
        "parameters": {
            "mode": "<listitem> <para>Specifies a symbolic value representing a shading technique. Accepted values are `GL_FLAT` and `GL_SMOOTH`. The initial value is `GL_SMOOTH`.</para> </listitem>"
        }
    },
    "glStencilFunc": {
        "signature": "void glStencilFunc(GLenum func, GLint ref, GLuint mask)",
        "purpose": "set function and reference value for stencil        testing",
        "parameters": {
            "func": "<listitem> <para>Specifies the test function. Eight tokens are valid: `GL_NEVER`, `GL_LESS`, `GL_LEQUAL`, `GL_GREATER`, `GL_GEQUAL`, `GL_EQUAL`, `GL_NOTEQUAL`, and `GL_ALWAYS`. The initial value is `GL_ALWAYS`.</para> </listitem>",
            "ref": "<listitem> <para>Specifies the reference value for the stencil test. <parameter>ref</parameter> is clamped to the range <inlineequation><math> <mo>[</mo> <mn>0</mn> <mo>,</mo> <msup><mn>2</mn><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></msup> <mo>]</mo> </math></inlineequation>, where <replaceable>n</replaceable> is the number of bitplanes in the stencil buffer. The initial value is 0.</para> </listitem>",
            "mask": "<listitem> <para>Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.</para> </listitem>"
        }
    },
    "glStencilMask": {
        "signature": "void glStencilMask(GLuint mask)",
        "purpose": "control the writing of individual bits in the        stencil planes",
        "parameters": {
            "mask": "<listitem> <para>Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. The initial value is all 1's.</para> </listitem>"
        }
    },
    "glStencilOp": {
        "signature": "void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)",
        "purpose": "set stencil test actions",
        "parameters": {
            "fail": "<listitem> <para>Specifies the action to take when the stencil test fails. Six symbolic constants are accepted: `GL_KEEP`, `GL_ZERO`, `GL_REPLACE`, `GL_INCR`, `GL_DECR`, and `GL_INVERT`. The initial value is `GL_KEEP`.</para> </listitem>",
            "zfail": "<listitem> <para>Specifies the stencil action when the stencil test passes, but the depth test fails. <parameter>zfail</parameter> accepts the same symbolic constants as <parameter>fail</parameter>. The initial value is `GL_KEEP`.</para> </listitem>",
            "zpass": "<listitem> <para>Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. <parameter>zpass</parameter> accepts the same symbolic constants as <parameter>fail</parameter>. The initial value is `GL_KEEP`.</para> </listitem>"
        }
    },
    "glTexCoordPointer": {
        "signature": "void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of texture coordinates",
        "parameters": {
            "size": "<listitem> <para>Specifies the number of coordinates per array element. Must be 2, 3 or 4. The initial value is 4.</para> </listitem>",
            "type": "<listitem> <para>Specifies the data type of each texture coordinate. Symbolic constants `GL_BYTE`, `GL_SHORT`, and `GL_FIXED` are accepted. However, the initial value is `GL_FLOAT`.</para> <para> The common profile accepts the symbolic constant `GL_FLOAT` as well. </para> </listitem>",
            "stride": "<listitem> <para>Specifies the byte offset between consecutive array elements. If <parameter>stride</parameter> is 0, the array elements are understood to be tightly packed. The initial value is 0.</para> </listitem>",
            "pointer": "<listitem> <para>Specifies a pointer to the first coordinate of the first element in the array. The initial value is 0.</para> </listitem>"
        }
    },
    "glTexEnvf": {
        "signature": "void glTexEnvf(GLenum target, GLenum pname, GLfloat param)",
        "purpose": "set texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV` or `GL_POINT_SPRITE_OES`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture environment parameter. May be either `GL_TEXTURE_ENV_MODE`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE_OES`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single symbolic constant, one of `GL_ADD`, `GL_ADD_SIGNED`, `GL_DOT3_RGB`, `GL_DOT3_RGBA`, `GL_INTERPOLATE`, `GL_MODULATE`, `GL_DECAL`, `GL_BLEND`, `GL_REPLACE`, `GL_SUBTRACT`, `GL_COMBINE`, `GL_TEXTURE`, `GL_CONSTANT`, `GL_PRIMARY_COLOR`, `GL_PREVIOUS`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, a single boolean value for the point sprite texture coordinate replacement, or 1.0, 2.0, or 4.0 when specifying the `GL_RGB_SCALE` or `GL_ALPHA_SCALE`. </para> </listitem>"
        }
    },
    "glTexEnvi": {
        "signature": "void glTexEnvi(GLenum target, GLenum pname, GLint param)",
        "purpose": "set texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV` or `GL_POINT_SPRITE_OES`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture environment parameter. May be either `GL_TEXTURE_ENV_MODE`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE_OES`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single symbolic constant, one of `GL_ADD`, `GL_ADD_SIGNED`, `GL_DOT3_RGB`, `GL_DOT3_RGBA`, `GL_INTERPOLATE`, `GL_MODULATE`, `GL_DECAL`, `GL_BLEND`, `GL_REPLACE`, `GL_SUBTRACT`, `GL_COMBINE`, `GL_TEXTURE`, `GL_CONSTANT`, `GL_PRIMARY_COLOR`, `GL_PREVIOUS`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, a single boolean value for the point sprite texture coordinate replacement, or 1.0, 2.0, or 4.0 when specifying the `GL_RGB_SCALE` or `GL_ALPHA_SCALE`. </para> </listitem>"
        }
    },
    "glTexEnvx": {
        "signature": "void glTexEnvx(GLenum target, GLenum pname, GLfixed param)",
        "purpose": "set texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV` or `GL_POINT_SPRITE_OES`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture environment parameter. May be either `GL_TEXTURE_ENV_MODE`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE_OES`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single symbolic constant, one of `GL_ADD`, `GL_ADD_SIGNED`, `GL_DOT3_RGB`, `GL_DOT3_RGBA`, `GL_INTERPOLATE`, `GL_MODULATE`, `GL_DECAL`, `GL_BLEND`, `GL_REPLACE`, `GL_SUBTRACT`, `GL_COMBINE`, `GL_TEXTURE`, `GL_CONSTANT`, `GL_PRIMARY_COLOR`, `GL_PREVIOUS`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, a single boolean value for the point sprite texture coordinate replacement, or 1.0, 2.0, or 4.0 when specifying the `GL_RGB_SCALE` or `GL_ALPHA_SCALE`. </para> </listitem>"
        }
    },
    "glTexEnvfv": {
        "signature": "void glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params)",
        "purpose": "set texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV` or `GL_POINT_SPRITE_OES`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture environment parameter. May be either `GL_TEXTURE_ENV_MODE`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE_OES`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single symbolic constant, one of `GL_ADD`, `GL_ADD_SIGNED`, `GL_DOT3_RGB`, `GL_DOT3_RGBA`, `GL_INTERPOLATE`, `GL_MODULATE`, `GL_DECAL`, `GL_BLEND`, `GL_REPLACE`, `GL_SUBTRACT`, `GL_COMBINE`, `GL_TEXTURE`, `GL_CONSTANT`, `GL_PRIMARY_COLOR`, `GL_PREVIOUS`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, a single boolean value for the point sprite texture coordinate replacement, or 1.0, 2.0, or 4.0 when specifying the `GL_RGB_SCALE` or `GL_ALPHA_SCALE`. </para> </listitem>"
        }
    },
    "glTexEnviv": {
        "signature": "void glTexEnviv(GLenum target, GLenum pname, const GLint * params)",
        "purpose": "set texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV` or `GL_POINT_SPRITE_OES`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture environment parameter. May be either `GL_TEXTURE_ENV_MODE`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE_OES`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single symbolic constant, one of `GL_ADD`, `GL_ADD_SIGNED`, `GL_DOT3_RGB`, `GL_DOT3_RGBA`, `GL_INTERPOLATE`, `GL_MODULATE`, `GL_DECAL`, `GL_BLEND`, `GL_REPLACE`, `GL_SUBTRACT`, `GL_COMBINE`, `GL_TEXTURE`, `GL_CONSTANT`, `GL_PRIMARY_COLOR`, `GL_PREVIOUS`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, a single boolean value for the point sprite texture coordinate replacement, or 1.0, 2.0, or 4.0 when specifying the `GL_RGB_SCALE` or `GL_ALPHA_SCALE`. </para> </listitem>"
        }
    },
    "glTexEnvxv": {
        "signature": "void glTexEnvxv(GLenum target, GLenum pname, const GLfixed * params)",
        "purpose": "set texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV` or `GL_POINT_SPRITE_OES`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture environment parameter. May be either `GL_TEXTURE_ENV_MODE`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE_OES`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single symbolic constant, one of `GL_ADD`, `GL_ADD_SIGNED`, `GL_DOT3_RGB`, `GL_DOT3_RGBA`, `GL_INTERPOLATE`, `GL_MODULATE`, `GL_DECAL`, `GL_BLEND`, `GL_REPLACE`, `GL_SUBTRACT`, `GL_COMBINE`, `GL_TEXTURE`, `GL_CONSTANT`, `GL_PRIMARY_COLOR`, `GL_PREVIOUS`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, a single boolean value for the point sprite texture coordinate replacement, or 1.0, 2.0, or 4.0 when specifying the `GL_RGB_SCALE` or `GL_ALPHA_SCALE`. </para> </listitem>"
        }
    },
    "glTexImage2D": {
        "signature": "void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels)",
        "purpose": "specify a two-dimensional texture image",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture. Must be `GL_TEXTURE_2D`.</para> </listitem>",
            "level": "<listitem> <para>Specifies the level-of-detail number. Level 0 is the base image level. Level <parameter>n</parameter> is the <parameter>n</parameter>th mipmap reduction image. Must be greater or equal 0.</para> </listitem>",
            "internalformat": "<listitem> <para>Specifies the color components in the texture. Must be same as <parameter>format</parameter>. The following symbolic values are accepted: `GL_ALPHA`, `GL_RGB`, `GL_RGBA`, `GL_LUMINANCE`, or `GL_LUMINANCE_ALPHA`.</para> </listitem>",
            "width": "<listitem> <para>Specifies the width of the texture image. Must be <inlineequation><math> <msup><mn>2</mn><mi>n</mi></msup> </math></inlineequation> for some integer <replaceable>n</replaceable>. All implementations support texture images that are at least 64 texels wide.</para> </listitem>",
            "height": "<listitem> <para>Specifies the height of the texture image. Must be <inlineequation><math> <msup><mn>2</mn><mi>m</mi></msup> </math></inlineequation> for some integer <replaceable>m</replaceable>. All implementations support texture images that are at least 64 texels high.</para> </listitem>",
            "border": "<listitem> <para>Specifies the width of the border. Must be 0.</para> </listitem>",
            "format": "<listitem> <para>Specifies the format of the pixel data. Must be same as <parameter>internalformat</parameter>. The following symbolic values are accepted: `GL_ALPHA`, `GL_RGB`, `GL_RGBA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`.</para> </listitem>",
            "type": "<listitem> <para>Specifies the data type of the pixel data. The following symbolic values are accepted: `GL_UNSIGNED_BYTE`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_4_4_4_4`, and `GL_UNSIGNED_SHORT_5_5_5_1`.</para> </listitem>",
            "pixels": "<listitem> <para>Specifies a pointer to the image data in memory.</para> </listitem>"
        }
    },
    "glTexParameterf": {
        "signature": "void glTexParameterf(GLenum target, GLenum pname, GLfloat param)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture, which must be `GL_TEXTURE_2D`.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of a single-valued texture parameter. Which can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, or `GL_GENERATE_MIPMAP`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value of <parameter>pname</parameter>.</para> </listitem>"
        }
    },
    "glTexParameteri": {
        "signature": "void glTexParameteri(GLenum target, GLenum pname, GLint param)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture, which must be `GL_TEXTURE_2D`.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of a single-valued texture parameter. Which can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, or `GL_GENERATE_MIPMAP`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value of <parameter>pname</parameter>.</para> </listitem>"
        }
    },
    "glTexParameterx": {
        "signature": "void glTexParameterx(GLenum target, GLenum pname, GLfixed param)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture, which must be `GL_TEXTURE_2D`.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of a single-valued texture parameter. Which can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, or `GL_GENERATE_MIPMAP`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value of <parameter>pname</parameter>.</para> </listitem>"
        }
    },
    "glTexParameterfv": {
        "signature": "void glTexParameterfv(GLenum target, GLenum pname, GLfloat * params)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture, which must be `GL_TEXTURE_2D`.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of a single-valued texture parameter. Which can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, or `GL_GENERATE_MIPMAP`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value of <parameter>pname</parameter>.</para> </listitem>"
        }
    },
    "glTexParameteriv": {
        "signature": "void glTexParameteriv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture, which must be `GL_TEXTURE_2D`.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of a single-valued texture parameter. Which can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, or `GL_GENERATE_MIPMAP`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value of <parameter>pname</parameter>.</para> </listitem>"
        }
    },
    "glTexParameterxv": {
        "signature": "void glTexParameterxv(GLenum target, GLenum pname, GLfixed * params)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture, which must be `GL_TEXTURE_2D`.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of a single-valued texture parameter. Which can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, or `GL_GENERATE_MIPMAP`.</para> </listitem>",
            "param": "<listitem> <para>Specifies the value of <parameter>pname</parameter>.</para> </listitem>"
        }
    },
    "glTexSubImage2D": {
        "signature": "void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)",
        "purpose": "specify a two-dimensional texture subimage",
        "parameters": {
            "target": "<listitem> <para>Specifies the target texture. Must be `GL_TEXTURE_2D`.</para> </listitem>",
            "level": "<listitem> <para>Specifies the level-of-detail number. Level 0 is the base image level. Level <parameter>n</parameter> is the <parameter>n</parameter>th mipmap reduction image.</para> </listitem>",
            "xoffset": "<listitem> <para>Specifies a texel offset in the x direction within the texture array.</para> </listitem>",
            "yoffset": "<listitem> <para>Specifies a texel offset in the y direction within the texture array.</para> </listitem>",
            "width": "<listitem> <para>Specifies the width of the texture subimage.</para> </listitem>",
            "height": "<listitem> <para>Specifies the height of the texture subimage.</para> </listitem>",
            "format": "<listitem> <para>Specifies the of the pixel data. The following symbolic values are accepted: `GL_ALPHA`, `GL_RGB`, `GL_RGBA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`.</para> </listitem>",
            "type": "<listitem> <para>Specifies the data type of the pixel data. The following symbolic values are accepted: `GL_UNSIGNED_BYTE`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_4_4_4_4`, and `GL_UNSIGNED_SHORT_5_5_5_1`.</para> </listitem>",
            "pixels": "<listitem> <para>Specifies a pointer to the image data in memory.</para> </listitem>"
        }
    },
    "glTranslatef": {
        "signature": "void glTranslatef(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "multiply the current matrix by a translation matrix",
        "parameters": {
            "x": "<listitem> <para>Specify the <parameter>x</parameter>, <parameter>y</parameter>, and <parameter>z</parameter> coordinates of a translation vector.</para> </listitem>"
        }
    },
    "glTranslatex": {
        "signature": "void glTranslatex(GLfixed x, GLfixed y, GLfixed z)",
        "purpose": "multiply the current matrix by a translation matrix",
        "parameters": {
            "x": "<listitem> <para>Specify the <parameter>x</parameter>, <parameter>y</parameter>, and <parameter>z</parameter> coordinates of a translation vector.</para> </listitem>"
        }
    },
    "glVertexPointer": {
        "signature": "void glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of vertex coordinates",
        "parameters": {
            "size": "<listitem> <para>Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.</para> </listitem>",
            "type": "<listitem> <para>Specifies the data type of each vertex coordinate in the array. Symbolic constants `GL_BYTE`, `GL_SHORT`, and `GL_FIXED`, are accepted. However, the initial value is `GL_FLOAT`.</para> <para> The common profile accepts the symbolic constant `GL_FLOAT` as well. </para> </listitem>",
            "stride": "<listitem> <para>Specifies the byte offset between consecutive vertices. If <parameter>stride</parameter> is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.</para> </listitem>",
            "pointer": "<listitem> <para>Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.</para> </listitem>"
        }
    },
    "glViewport": {
        "signature": "void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "set the viewport",
        "parameters": {
            "x": "<listitem> <para>Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0, 0).</para> </listitem>",
            "width": "<listitem> <para>Specify the width and height of the viewport. When a GL context is first attached to a surface (e.g. window), <parameter>width</parameter> and <parameter>height</parameter> are set to the dimensions of that surface.</para> </listitem>"
        }
    },
    "glWeightPointerOES": {
        "signature": "void glWeightPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of weights",
        "parameters": {
            "size": "<listitem> <para> Specifies the number of weights per vertex. Must be is less than or equal to `GL_MAX_VERTEX_UNITS_OES`. The initial value is `0`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of each weight in the array. Symbolic constant `GL_FIXED` is accepted. However, the common profile also accepts the symbolic constant `GL_FLOAT` as well. The initial value is `GL_FIXED` for the common lite profile, or `GL_FLOAT` for the common profile. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive weights. If <parameter>stride</parameter> is 0, the weights are understood to be tightly packed in the array. The initial value is `0`. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first weight of the first vertex in the array. The initial value is `0`. </para> </listitem>"
        }
    }
}