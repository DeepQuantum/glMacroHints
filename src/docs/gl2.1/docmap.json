{
    "glAccum": {
        "signature": "void glAccum(GLenum op, GLfloat value)",
        "purpose": "operate on the accumulation buffer",
        "parameters": {
            "op": "<listitem> <para> Specifies the accumulation buffer operation. Symbolic constants `GL_ACCUM`, `GL_LOAD`, `GL_ADD`, `GL_MULT`, and `GL_RETURN` are accepted. </para> </listitem>",
            "value": "<listitem> <para> Specifies a floating-point value used in the accumulation buffer operation. <parameter>op</parameter> determines how <parameter>value</parameter> is used. </para> </listitem>"
        }
    },
    "glActiveTexture": {
        "signature": "void glActiveTexture(GLenum texture)",
        "purpose": "select active texture unit",
        "parameters": {
            "texture": "<listitem> <para> Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. <parameter>texture</parameter> must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to the larger of (`GL_MAX_TEXTURE_COORDS` - 1) and (`GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS` - 1). The initial value is `GL_TEXTURE0`. </para> </listitem>"
        }
    },
    "glAlphaFunc": {
        "signature": "void glAlphaFunc(GLenum func, GLclampf ref)",
        "purpose": "specify the alpha test function",
        "parameters": {
            "func": "<listitem> <para> Specifies the alpha comparison function. Symbolic constants `GL_NEVER`, `GL_LESS`, `GL_EQUAL`, `GL_LEQUAL`, `GL_GREATER`, `GL_NOTEQUAL`, `GL_GEQUAL`, and `GL_ALWAYS` are accepted. The initial value is `GL_ALWAYS`. </para> </listitem>",
            "ref": "<listitem> <para> Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range <inlineequation><math> <mfenced open=\"[\" close=\"]\"> <mn>0</mn> <mn>1</mn> </mfenced> </math></inlineequation>, where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0. </para> </listitem>"
        }
    },
    "glAreTexturesResident": {
        "signature": "GLboolean glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences)",
        "purpose": "determine if textures are loaded in texture memory",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of textures to be queried. </para> </listitem>",
            "textures": "<listitem> <para> Specifies an array containing the names of the textures to be queried. </para> </listitem>",
            "residences": "<listitem> <para> Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of <parameter>textures</parameter> is returned in the corresponding element of <parameter>residences</parameter>. </para> </listitem>"
        }
    },
    "glArrayElement": {
        "signature": "void glArrayElement(GLint i)",
        "purpose": "render a vertex using the specified vertex array element",
        "parameters": {
            "i": "<listitem> <para> Specifies an index into the enabled vertex data arrays. </para> </listitem>"
        }
    },
    "glAttachShader": {
        "signature": "void glAttachShader(GLuint program, GLuint shader)",
        "purpose": "Attaches a shader object to a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to which a shader object will be attached.</para> </listitem>",
            "shader": "<listitem> <para>Specifies the shader object that is to be attached.</para> </listitem>"
        }
    },
    "glBegin": {
        "signature": "void glBegin(GLenum mode)",
        "purpose": "delimit the vertices of a primitive or a group of like primitives",
        "parameters": {
            "mode": "<listitem> <para> Specifies the primitive or primitives that will be created from vertices presented between <function>glBegin</function> and the subsequent <citerefentry><refentrytitle>glEnd</refentrytitle></citerefentry>. Ten symbolic constants are accepted: `GL_POINTS`, `GL_LINES`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_TRIANGLES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, `GL_QUADS`, `GL_QUAD_STRIP`, and `GL_POLYGON`. </para> </listitem>"
        }
    },
    "glEnd": {
        "signature": "void glEnd(void)",
        "purpose": "delimit the vertices of a primitive or a group of like primitives",
        "parameters": {
            "mode": "<listitem> <para> Specifies the primitive or primitives that will be created from vertices presented between <function>glBegin</function> and the subsequent <citerefentry><refentrytitle>glEnd</refentrytitle></citerefentry>. Ten symbolic constants are accepted: `GL_POINTS`, `GL_LINES`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_TRIANGLES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, `GL_QUADS`, `GL_QUAD_STRIP`, and `GL_POLYGON`. </para> </listitem>"
        }
    },
    "glBeginQuery": {
        "signature": "void glBeginQuery(GLenum target, GLuint id)",
        "purpose": "delimit the boundaries of a query object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target type of query object established between <function>glBeginQuery</function> and the subsequent <citerefentry><refentrytitle>glEndQuery</refentrytitle></citerefentry>. The symbolic constant must be `GL_SAMPLES_PASSED`. </para> </listitem>",
            "id": "<listitem> <para> Specifies the name of a query object. </para> </listitem>"
        }
    },
    "glEndQuery": {
        "signature": "void glEndQuery(GLenum target)",
        "purpose": "delimit the boundaries of a query object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target type of query object established between <function>glBeginQuery</function> and the subsequent <citerefentry><refentrytitle>glEndQuery</refentrytitle></citerefentry>. The symbolic constant must be `GL_SAMPLES_PASSED`. </para> </listitem>",
            "id": "<listitem> <para> Specifies the name of a query object. </para> </listitem>"
        }
    },
    "glBindAttribLocation": {
        "signature": "void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)",
        "purpose": "Associates a generic vertex attribute index with a named attribute variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object in which the association is to be made.</para> </listitem>",
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be bound.</para> </listitem>",
            "name": "<listitem> <para>Specifies a null terminated string containing the name of the vertex shader attribute variable to which <parameter>index</parameter> is to be bound.</para> </listitem>"
        }
    },
    "glBindBuffer": {
        "signature": "void glBindBuffer(GLenum target, GLuint buffer)",
        "purpose": "bind a named buffer object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target to which the buffer object is bound. The symbolic constant must be `GL_ARRAY_BUFFER`, `GL_ELEMENT_ARRAY_BUFFER`, `GL_PIXEL_PACK_BUFFER`, or `GL_PIXEL_UNPACK_BUFFER`. </para> </listitem>",
            "buffer": "<listitem> <para> Specifies the name of a buffer object. </para> </listitem>"
        }
    },
    "glBindTexture": {
        "signature": "void glBindTexture(GLenum target, GLuint texture)",
        "purpose": "bind a named texture to a texturing target",
        "parameters": {
            "target": "<listitem> <para> Specifies the target to which the texture is bound. Must be either `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, or `GL_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "texture": "<listitem> <para> Specifies the name of a texture. </para> </listitem>"
        }
    },
    "glBitmap": {
        "signature": "void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap)",
        "purpose": "draw a bitmap",
        "parameters": {
            "width": "<listitem> <para> Specify the pixel width and height of the bitmap image. </para> </listitem>",
            "xorig": "<listitem> <para> Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes. </para> </listitem>",
            "xmove": "<listitem> <para> Specify the <emphasis>x</emphasis> and <emphasis>y</emphasis> offsets to be added to the current raster position after the bitmap is drawn. </para> </listitem>",
            "bitmap": "<listitem> <para> Specifies the address of the bitmap image. </para> </listitem>"
        }
    },
    "glBlendColor": {
        "signature": "void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)",
        "purpose": "set the blend color",
        "parameters": {
            "red": "<listitem> <para> specify the components of `GL_BLEND_COLOR` </para> </listitem>"
        }
    },
    "glBlendEquation": {
        "signature": "void glBlendEquation(GLenum mode)",
        "purpose": "specify the equation used for both the RGB blend equation and the Alpha blend equation",
        "parameters": {
            "mode": "<listitem> <para> specifies how source and destination colors are combined. It must be `GL_FUNC_ADD`, `GL_FUNC_SUBTRACT`, `GL_FUNC_REVERSE_SUBTRACT`, `GL_MIN`, `GL_MAX`. </para> </listitem>"
        }
    },
    "glBlendEquationSeparate": {
        "signature": "void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)",
        "purpose": "set the RGB blend equation and the alpha blend equation separately",
        "parameters": {
            "modeRGB": "<listitem> <para> specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be `GL_FUNC_ADD`, `GL_FUNC_SUBTRACT`, `GL_FUNC_REVERSE_SUBTRACT`, `GL_MIN`, `GL_MAX`. </para> </listitem>",
            "modeAlpha": "<listitem> <para> specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be `GL_FUNC_ADD`, `GL_FUNC_SUBTRACT`, `GL_FUNC_REVERSE_SUBTRACT`, `GL_MIN`, `GL_MAX`. </para> </listitem>"
        }
    },
    "glBlendFunc": {
        "signature": "void glBlendFunc(GLenum sfactor, GLenum dfactor)",
        "purpose": "specify pixel arithmetic",
        "parameters": {
            "sfactor": "<listitem> <para> Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: `GL_ZERO`, `GL_ONE`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_DST_COLOR`, `GL_ONE_MINUS_DST_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, `GL_DST_ALPHA`, `GL_ONE_MINUS_DST_ALPHA`, `GL_CONSTANT_COLOR`, `GL_ONE_MINUS_CONSTANT_COLOR`, `GL_CONSTANT_ALPHA`, `GL_ONE_MINUS_CONSTANT_ALPHA`, and `GL_SRC_ALPHA_SATURATE`. The initial value is `GL_ONE`. </para> </listitem>",
            "dfactor": "<listitem> <para> Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: `GL_ZERO`, `GL_ONE`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_DST_COLOR`, `GL_ONE_MINUS_DST_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, `GL_DST_ALPHA`, `GL_ONE_MINUS_DST_ALPHA`. `GL_CONSTANT_COLOR`, `GL_ONE_MINUS_CONSTANT_COLOR`, `GL_CONSTANT_ALPHA`, and `GL_ONE_MINUS_CONSTANT_ALPHA`. The initial value is `GL_ZERO`. </para> </listitem>"
        }
    },
    "glBlendFuncSeparate": {
        "signature": "void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)",
        "purpose": "specify pixel arithmetic for RGB and alpha components separately",
        "parameters": {
            "srcRGB": "<listitem> <para> Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: `GL_ZERO`, `GL_ONE`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_DST_COLOR`, `GL_ONE_MINUS_DST_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, `GL_DST_ALPHA`, `GL_ONE_MINUS_DST_ALPHA`, `GL_CONSTANT_COLOR`, `GL_ONE_MINUS_CONSTANT_COLOR`, `GL_CONSTANT_ALPHA`, `GL_ONE_MINUS_CONSTANT_ALPHA`, and `GL_SRC_ALPHA_SATURATE`. The initial value is `GL_ONE`. </para> </listitem>",
            "dstRGB": "<listitem> <para> Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: `GL_ZERO`, `GL_ONE`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_DST_COLOR`, `GL_ONE_MINUS_DST_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, `GL_DST_ALPHA`, `GL_ONE_MINUS_DST_ALPHA`. `GL_CONSTANT_COLOR`, `GL_ONE_MINUS_CONSTANT_COLOR`, `GL_CONSTANT_ALPHA`, and `GL_ONE_MINUS_CONSTANT_ALPHA`. The initial value is `GL_ZERO`. </para> </listitem>",
            "srcAlpha": "<listitem> <para> Specified how the alpha source blending factor is computed. The same symbolic constants are accepted as for <parameter>srcRGB</parameter>. The initial value is `GL_ONE`. </para> </listitem>",
            "dstAlpha": "<listitem> <para> Specified how the alpha destination blending factor is computed. The same symbolic constants are accepted as for <parameter>dstRGB</parameter>. The initial value is `GL_ZERO`. </para> </listitem>"
        }
    },
    "glBufferData": {
        "signature": "void glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage)",
        "purpose": "creates and initializes a buffer object's data store",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER`, `GL_ELEMENT_ARRAY_BUFFER`, `GL_PIXEL_PACK_BUFFER`, or `GL_PIXEL_UNPACK_BUFFER`. </para> </listitem>",
            "size": "<listitem> <para> Specifies the size in bytes of the buffer object's new data store. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to data that will be copied into the data store for initialization, or `NULL` if no data is to be copied. </para> </listitem>",
            "usage": "<listitem> <para> Specifies the expected usage pattern of the data store. The symbolic constant must be `GL_STREAM_DRAW`, `GL_STREAM_READ`, `GL_STREAM_COPY`, `GL_STATIC_DRAW`, `GL_STATIC_READ`, `GL_STATIC_COPY`, `GL_DYNAMIC_DRAW`, `GL_DYNAMIC_READ`, or `GL_DYNAMIC_COPY`. </para> </listitem>"
        }
    },
    "glBufferSubData": {
        "signature": "void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data)",
        "purpose": "updates a subset of a buffer object's data store",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER`, `GL_ELEMENT_ARRAY_BUFFER`, `GL_PIXEL_PACK_BUFFER`, or `GL_PIXEL_UNPACK_BUFFER`. </para> </listitem>",
            "offset": "<listitem> <para> Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes. </para> </listitem>",
            "size": "<listitem> <para> Specifies the size in bytes of the data store region being replaced. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the new data that will be copied into the data store. </para> </listitem>"
        }
    },
    "glCallList": {
        "signature": "void glCallList(GLuint list)",
        "purpose": "execute a display list",
        "parameters": {
            "list": "<listitem> <para> Specifies the integer name of the display list to be executed. </para> </listitem>"
        }
    },
    "glCallLists": {
        "signature": "void glCallLists(GLsizei n, GLenum type, const void * lists)",
        "purpose": "execute a list of display lists",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of display lists to be executed. </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of values in <parameter>lists</parameter>. Symbolic constants `GL_BYTE`, `GL_UNSIGNED_BYTE`, `GL_SHORT`, `GL_UNSIGNED_SHORT`, `GL_INT`, `GL_UNSIGNED_INT`, `GL_FLOAT`, `GL_2_BYTES`, `GL_3_BYTES`, and `GL_4_BYTES` are accepted. </para> </listitem>",
            "lists": "<listitem> <para> Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of <parameter>type</parameter>. </para> </listitem>"
        }
    },
    "glClear": {
        "signature": "void glClear(GLbitfield mask)",
        "purpose": "clear buffers to preset values",
        "parameters": {
            "mask": "<listitem> <para> Bitwise OR of masks that indicate the buffers to be cleared. The four masks are `GL_COLOR_BUFFER_BIT`, `GL_DEPTH_BUFFER_BIT`, `GL_ACCUM_BUFFER_BIT`, and `GL_STENCIL_BUFFER_BIT`. </para> </listitem>"
        }
    },
    "glClearAccum": {
        "signature": "void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)",
        "purpose": "specify clear values for the accumulation buffer",
        "parameters": {
            "red": "<listitem> <para> Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0. </para> </listitem>"
        }
    },
    "glClearColor": {
        "signature": "void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)",
        "purpose": "specify clear values for the color buffers",
        "parameters": {
            "red": "<listitem> <para> Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0. </para> </listitem>"
        }
    },
    "glClearDepth": {
        "signature": "void glClearDepth(GLclampd depth)",
        "purpose": "specify the clear value for the depth buffer",
        "parameters": {
            "depth": "<listitem> <para> Specifies the depth value used when the depth buffer is cleared. The initial value is 1. </para> </listitem>"
        }
    },
    "glClearIndex": {
        "signature": "void glClearIndex(GLfloat c)",
        "purpose": "specify the clear value for the color index buffers",
        "parameters": {
            "c": "<listitem> <para> Specifies the index used when the color index buffers are cleared. The initial value is 0. </para> </listitem>"
        }
    },
    "glClearStencil": {
        "signature": "void glClearStencil(GLint s)",
        "purpose": "specify the clear value for the stencil buffer",
        "parameters": {
            "s": "<listitem> <para> Specifies the index used when the stencil buffer is cleared. The initial value is 0. </para> </listitem>"
        }
    },
    "glClientActiveTexture": {
        "signature": "void glClientActiveTexture(GLenum texture)",
        "purpose": "select active texture unit",
        "parameters": {
            "texture": "<listitem> <para> Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. <parameter>texture</parameter> must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to the value of `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. The initial value is `GL_TEXTURE0`. </para> </listitem>"
        }
    },
    "glClipPlane": {
        "signature": "void glClipPlane(GLenum plane, const GLdouble * equation)",
        "purpose": "specify a plane against which all geometry is clipped",
        "parameters": {
            "plane": "<listitem> <para> Specifies which clipping plane is being positioned. Symbolic names of the form `GL_CLIP_PLANE`<emphasis>i</emphasis>, where <emphasis>i</emphasis> is an integer between 0 and `GL_MAX_CLIP_PLANES` <inlineequation><math> <mn>-1</mn> </math></inlineequation>, are accepted. </para> </listitem>",
            "equation": "<listitem> <para> Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation. </para> </listitem>"
        }
    },
    "glColor3b": {
        "signature": "void glColor3b(GLbyte red, GLbyte green, GLbyte blue)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3s": {
        "signature": "void glColor3s(GLshort red, GLshort green, GLshort blue)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3i": {
        "signature": "void glColor3i(GLint red, GLint green, GLint blue)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3f": {
        "signature": "void glColor3f(GLfloat red, GLfloat green, GLfloat blue)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3d": {
        "signature": "void glColor3d(GLdouble red, GLdouble green, GLdouble blue)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3ub": {
        "signature": "void glColor3ub(GLubyte red, GLubyte green, GLubyte blue)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3us": {
        "signature": "void glColor3us(GLushort red, GLushort green, GLushort blue)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3ui": {
        "signature": "void glColor3ui(GLuint red, GLuint green, GLuint blue)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4b": {
        "signature": "void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4s": {
        "signature": "void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4i": {
        "signature": "void glColor4i(GLint red, GLint green, GLint blue, GLint alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4f": {
        "signature": "void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4d": {
        "signature": "void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4ub": {
        "signature": "void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4us": {
        "signature": "void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4ui": {
        "signature": "void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3bv": {
        "signature": "void glColor3bv(const GLbyte * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3sv": {
        "signature": "void glColor3sv(const GLshort * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3iv": {
        "signature": "void glColor3iv(const GLint * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3fv": {
        "signature": "void glColor3fv(const GLfloat * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3dv": {
        "signature": "void glColor3dv(const GLdouble * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3ubv": {
        "signature": "void glColor3ubv(const GLubyte * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3usv": {
        "signature": "void glColor3usv(const GLushort * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor3uiv": {
        "signature": "void glColor3uiv(const GLuint * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4bv": {
        "signature": "void glColor4bv(const GLbyte * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4sv": {
        "signature": "void glColor4sv(const GLshort * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4iv": {
        "signature": "void glColor4iv(const GLint * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4fv": {
        "signature": "void glColor4fv(const GLfloat * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4dv": {
        "signature": "void glColor4dv(const GLdouble * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4ubv": {
        "signature": "void glColor4ubv(const GLubyte * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4usv": {
        "signature": "void glColor4usv(const GLushort * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColor4uiv": {
        "signature": "void glColor4uiv(const GLuint * v)",
        "purpose": "set the current color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current color. </para> </listitem>",
            "alpha": "<listitem> <para> Specifies a new alpha value for the current color. Included only in the four-argument <function>glColor4</function> commands. </para> </listitem>"
        }
    },
    "glColorMask": {
        "signature": "void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)",
        "purpose": "enable and disable writing of frame buffer color components",
        "parameters": {
            "red": "<listitem> <para> Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all `GL_TRUE`, indicating that the color components can be written. </para> </listitem>"
        }
    },
    "glColorMaterial": {
        "signature": "void glColorMaterial(GLenum face, GLenum mode)",
        "purpose": "cause a material color to track the current color",
        "parameters": {
            "face": "<listitem> <para> Specifies whether front, back, or both front and back material parameters should track the current color. Accepted values are `GL_FRONT`, `GL_BACK`, and `GL_FRONT_AND_BACK`. The initial value is `GL_FRONT_AND_BACK`. </para> </listitem>",
            "mode": "<listitem> <para> Specifies which of several material parameters track the current color. Accepted values are `GL_EMISSION`, `GL_AMBIENT`, `GL_DIFFUSE`, `GL_SPECULAR`, and `GL_AMBIENT_AND_DIFFUSE`. The initial value is `GL_AMBIENT_AND_DIFFUSE`. </para> </listitem>"
        }
    },
    "glColorPointer": {
        "signature": "void glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of colors",
        "parameters": {
            "size": "<listitem> <para> Specifies the number of components per color. Must be 3 or 4. The initial value is 4. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of each color component in the array. Symbolic constants `GL_BYTE`, `GL_UNSIGNED_BYTE`, `GL_SHORT`, `GL_UNSIGNED_SHORT`, `GL_INT`, `GL_UNSIGNED_INT`, `GL_FLOAT`, and `GL_DOUBLE` are accepted. The initial value is `GL_FLOAT`. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive colors. If <parameter>stride</parameter> is 0, the colors are understood to be tightly packed in the array. The initial value is 0. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first component of the first color element in the array. The initial value is 0. </para> </listitem>"
        }
    },
    "glColorSubTable": {
        "signature": "void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data)",
        "purpose": "respecify a portion of a color table",
        "parameters": {
            "target": "<listitem> <para> Must be one of `GL_COLOR_TABLE`, `GL_POST_CONVOLUTION_COLOR_TABLE`, or `GL_POST_COLOR_MATRIX_COLOR_TABLE`. </para> </listitem>",
            "start": "<listitem> <para> The starting index of the portion of the color table to be replaced. </para> </listitem>",
            "count": "<listitem> <para> The number of table entries to replace. </para> </listitem>",
            "format": "<listitem> <para> The format of the pixel data in <parameter>data</parameter>. The allowable values are `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_LUMINANCE`, `GL_LUMINANCE_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, and `GL_BGRA`. </para> </listitem>",
            "type": "<listitem> <para> The type of the pixel data in <parameter>data</parameter>. The allowable values are `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table. </para> </listitem>"
        }
    },
    "glColorTable": {
        "signature": "void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * data)",
        "purpose": "define a color lookup table",
        "parameters": {
            "target": "<listitem> <para> Must be one of `GL_COLOR_TABLE`, `GL_POST_CONVOLUTION_COLOR_TABLE`, `GL_POST_COLOR_MATRIX_COLOR_TABLE`, `GL_PROXY_COLOR_TABLE`, `GL_PROXY_POST_CONVOLUTION_COLOR_TABLE`, or `GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE`. </para> </listitem>",
            "internalformat": "<listitem> <para> The internal format of the color table. The allowable values are `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, and `GL_RGBA16`. </para> </listitem>",
            "width": "<listitem> <para> The number of entries in the color lookup table specified by <parameter>data</parameter>. </para> </listitem>",
            "format": "<listitem> <para> The format of the pixel data in <parameter>data</parameter>. The allowable values are `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_LUMINANCE`, `GL_LUMINANCE_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, and `GL_BGRA`. </para> </listitem>",
            "type": "<listitem> <para> The type of the pixel data in <parameter>data</parameter>. The allowable values are `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Pointer to a one-dimensional array of pixel data that is processed to build the color table. </para> </listitem>"
        }
    },
    "glColorTableParameterfv": {
        "signature": "void glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params)",
        "purpose": "set color lookup table parameters",
        "parameters": {
            "target": "<listitem> <para> The target color table. Must be `GL_COLOR_TABLE`, `GL_POST_CONVOLUTION_COLOR_TABLE`, or `GL_POST_COLOR_MATRIX_COLOR_TABLE`. </para> </listitem>",
            "pname": "<listitem> <para> The symbolic name of a texture color lookup table parameter. Must be one of `GL_COLOR_TABLE_SCALE` or `GL_COLOR_TABLE_BIAS`. </para> </listitem>",
            "params": "<listitem> <para> A pointer to an array where the values of the parameters are stored. </para> </listitem>"
        }
    },
    "glColorTableParameteriv": {
        "signature": "void glColorTableParameteriv(GLenum target, GLenum pname, const GLint * params)",
        "purpose": "set color lookup table parameters",
        "parameters": {
            "target": "<listitem> <para> The target color table. Must be `GL_COLOR_TABLE`, `GL_POST_CONVOLUTION_COLOR_TABLE`, or `GL_POST_COLOR_MATRIX_COLOR_TABLE`. </para> </listitem>",
            "pname": "<listitem> <para> The symbolic name of a texture color lookup table parameter. Must be one of `GL_COLOR_TABLE_SCALE` or `GL_COLOR_TABLE_BIAS`. </para> </listitem>",
            "params": "<listitem> <para> A pointer to an array where the values of the parameters are stored. </para> </listitem>"
        }
    },
    "glCompileShader": {
        "signature": "void glCompileShader(GLuint shader)",
        "purpose": "Compiles a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the shader object to be compiled.</para> </listitem>"
        }
    },
    "glCompressedTexImage1D": {
        "signature": "void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data)",
        "purpose": "specify a one-dimensional texture image in a compressed format",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_1D` or `GL_PROXY_TEXTURE_1D`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "internalformat": "<listitem> <para> Specifies the format of the compressed image data stored at address <parameter>data</parameter>. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be either 0 or 1. </para> </listitem>",
            "imageSize": "<listitem> <para> Specifies the number of unsigned bytes of image data starting at the address specified by <parameter>data</parameter>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the compressed image data in memory. </para> </listitem>"
        }
    },
    "glCompressedTexImage2D": {
        "signature": "void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data)",
        "purpose": "specify a two-dimensional texture image in a compressed format",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_2D`, `GL_PROXY_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`, or `GL_PROXY_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "internalformat": "<listitem> <para> Specifies the format of the compressed image data stored at address <parameter>data</parameter>. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be either 0 or 1. </para> </listitem>",
            "imageSize": "<listitem> <para> Specifies the number of unsigned bytes of image data starting at the address specified by <parameter>data</parameter>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the compressed image data in memory. </para> </listitem>"
        }
    },
    "glCompressedTexImage3D": {
        "signature": "void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)",
        "purpose": "specify a three-dimensional texture image in a compressed format",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_3D` or `GL_PROXY_TEXTURE_3D`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "internalformat": "<listitem> <para> Specifies the format of the compressed image data stored at address <parameter>data</parameter>. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. All implementations support 3D texture images that are at least 16 texels wide. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. All implementations support 3D texture images that are at least 16 texels high. </para> </listitem>",
            "depth": "<listitem> <para> Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. All implementations support 3D texture images that are at least 16 texels deep. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be either 0 or 1. </para> </listitem>",
            "imageSize": "<listitem> <para> Specifies the number of unsigned bytes of image data starting at the address specified by <parameter>data</parameter>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the compressed image data in memory. </para> </listitem>"
        }
    },
    "glCompressedTexSubImage1D": {
        "signature": "void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data)",
        "purpose": "specify a one-dimensional texture subimage in a compressed format",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_1D`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the compressed image data stored at address <parameter>data</parameter>. </para> </listitem>",
            "imageSize": "<listitem> <para> Specifies the number of unsigned bytes of image data starting at the address specified by <parameter>data</parameter>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the compressed image data in memory. </para> </listitem>"
        }
    },
    "glCompressedTexSubImage2D": {
        "signature": "void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)",
        "purpose": "specify a two-dimensional texture subimage in a compressed format",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "yoffset": "<listitem> <para> Specifies a texel offset in the y direction within the texture array. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture subimage. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the compressed image data stored at address <parameter>data</parameter>. </para> </listitem>",
            "imageSize": "<listitem> <para> Specifies the number of unsigned bytes of image data starting at the address specified by <parameter>data</parameter>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the compressed image data in memory. </para> </listitem>"
        }
    },
    "glCompressedTexSubImage3D": {
        "signature": "void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)",
        "purpose": "specify a three-dimensional texture subimage in a compressed format",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_3D`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "yoffset": "<listitem> <para> Specifies a texel offset in the y direction within the texture array. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture subimage. </para> </listitem>",
            "depth": "<listitem> <para> Specifies the depth of the texture subimage. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the compressed image data stored at address <parameter>data</parameter>. </para> </listitem>",
            "imageSize": "<listitem> <para> Specifies the number of unsigned bytes of image data starting at the address specified by <parameter>data</parameter>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the compressed image data in memory. </para> </listitem>"
        }
    },
    "glConvolutionFilter1D": {
        "signature": "void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * data)",
        "purpose": "define a one-dimensional convolution filter",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_CONVOLUTION_1D`. </para> </listitem>",
            "internalformat": "<listitem> <para> The internal format of the convolution filter kernel. The allowable values are `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, or `GL_RGBA16`. </para> </listitem>",
            "width": "<listitem> <para> The width of the pixel array referenced by <parameter>data</parameter>. </para> </listitem>",
            "format": "<listitem> <para> The format of the pixel data in <parameter>data</parameter>. The allowable values are `GL_ALPHA`, `GL_LUMINANCE`, `GL_LUMINANCE_ALPHA`, `GL_INTENSITY`, `GL_RGB`, and `GL_RGBA`. </para> </listitem>",
            "type": "<listitem> <para> The type of the pixel data in <parameter>data</parameter>. Symbolic constants `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV` are accepted. </para> </listitem>",
            "data": "<listitem> <para> Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel. </para> </listitem>"
        }
    },
    "glConvolutionFilter2D": {
        "signature": "void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * data)",
        "purpose": "define a two-dimensional convolution filter",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_CONVOLUTION_2D`. </para> </listitem>",
            "internalformat": "<listitem> <para> The internal format of the convolution filter kernel. The allowable values are `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, or `GL_RGBA16`. </para> </listitem>",
            "width": "<listitem> <para> The width of the pixel array referenced by <parameter>data</parameter>. </para> </listitem>",
            "height": "<listitem> <para> The height of the pixel array referenced by <parameter>data</parameter>. </para> </listitem>",
            "format": "<listitem> <para> The format of the pixel data in <parameter>data</parameter>. The allowable values are `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> The type of the pixel data in <parameter>data</parameter>. Symbolic constants `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV` are accepted. </para> </listitem>",
            "data": "<listitem> <para> Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel. </para> </listitem>"
        }
    },
    "glConvolutionParameterf": {
        "signature": "void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)",
        "purpose": "set convolution parameters",
        "parameters": {
            "target": "<listitem> <para> The target for the convolution parameter. Must be one of `GL_CONVOLUTION_1D`, `GL_CONVOLUTION_2D`, or `GL_SEPARABLE_2D`. </para> </listitem>",
            "pname": "<listitem> <para> The parameter to be set. Must be `GL_CONVOLUTION_BORDER_MODE`. </para> </listitem>",
            "params": "<listitem> <para> The parameter value. Must be one of `GL_REDUCE`, `GL_CONSTANT_BORDER`, `GL_REPLICATE_BORDER`. </para> <para> </para> </listitem>"
        }
    },
    "glConvolutionParameteri": {
        "signature": "void glConvolutionParameteri(GLenum target, GLenum pname, GLint params)",
        "purpose": "set convolution parameters",
        "parameters": {
            "target": "<listitem> <para> The target for the convolution parameter. Must be one of `GL_CONVOLUTION_1D`, `GL_CONVOLUTION_2D`, or `GL_SEPARABLE_2D`. </para> </listitem>",
            "pname": "<listitem> <para> The parameter to be set. Must be `GL_CONVOLUTION_BORDER_MODE`. </para> </listitem>",
            "params": "<listitem> <para> The parameter value. Must be one of `GL_REDUCE`, `GL_CONSTANT_BORDER`, `GL_REPLICATE_BORDER`. </para> <para> </para> </listitem>"
        }
    },
    "glConvolutionParameterfv": {
        "signature": "void glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params)",
        "purpose": "set convolution parameters",
        "parameters": {
            "target": "<listitem> <para> The target for the convolution parameter. Must be one of `GL_CONVOLUTION_1D`, `GL_CONVOLUTION_2D`, or `GL_SEPARABLE_2D`. </para> </listitem>",
            "pname": "<listitem> <para> The parameter to be set. Must be `GL_CONVOLUTION_BORDER_MODE`. </para> </listitem>",
            "params": "<listitem> <para> The parameter value. Must be one of `GL_REDUCE`, `GL_CONSTANT_BORDER`, `GL_REPLICATE_BORDER`. </para> <para> </para> </listitem>"
        }
    },
    "glConvolutionParameteriv": {
        "signature": "void glConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params)",
        "purpose": "set convolution parameters",
        "parameters": {
            "target": "<listitem> <para> The target for the convolution parameter. Must be one of `GL_CONVOLUTION_1D`, `GL_CONVOLUTION_2D`, or `GL_SEPARABLE_2D`. </para> </listitem>",
            "pname": "<listitem> <para> The parameter to be set. Must be `GL_CONVOLUTION_BORDER_MODE`. </para> </listitem>",
            "params": "<listitem> <para> The parameter value. Must be one of `GL_REDUCE`, `GL_CONSTANT_BORDER`, `GL_REPLICATE_BORDER`. </para> <para> </para> </listitem>"
        }
    },
    "glCopyColorSubTable": {
        "signature": "void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)",
        "purpose": "respecify a portion of a color table",
        "parameters": {
            "target": "<listitem> <para> Must be one of `GL_COLOR_TABLE`, `GL_POST_CONVOLUTION_COLOR_TABLE`, or `GL_POST_COLOR_MATRIX_COLOR_TABLE`. </para> </listitem>",
            "start": "<listitem> <para> The starting index of the portion of the color table to be replaced. </para> </listitem>",
            "x": "<listitem> <para> The window coordinates of the left corner of the row of pixels to be copied. </para> </listitem>",
            "width": "<listitem> <para> The number of table entries to replace. </para> </listitem>"
        }
    },
    "glCopyColorTable": {
        "signature": "void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)",
        "purpose": "copy pixels into a color table",
        "parameters": {
            "target": "<listitem> <para> The color table target. Must be `GL_COLOR_TABLE`, `GL_POST_CONVOLUTION_COLOR_TABLE`, or `GL_POST_COLOR_MATRIX_COLOR_TABLE`. </para> </listitem>",
            "internalformat": "<listitem> <para> The internal storage format of the texture image. Must be one of the following symbolic constants: `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, or `GL_RGBA16`. </para> </listitem>",
            "x": "<listitem> <para> The x coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table. </para> </listitem>",
            "y": "<listitem> <para> The y coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table. </para> </listitem>",
            "width": "<listitem> <para> The width of the pixel rectangle. </para> </listitem>"
        }
    },
    "glCopyConvolutionFilter1D": {
        "signature": "void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)",
        "purpose": "copy pixels into a one-dimensional convolution filter",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_CONVOLUTION_1D`. </para> </listitem>",
            "internalformat": "<listitem> <para> The internal format of the convolution filter kernel. The allowable values are `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, or `GL_RGBA16`. </para> </listitem>",
            "x": "<listitem> <para> The window space coordinates of the lower-left coordinate of the pixel array to copy. </para> </listitem>",
            "width": "<listitem> <para> The width of the pixel array to copy. </para> </listitem>"
        }
    },
    "glCopyConvolutionFilter2D": {
        "signature": "void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "copy pixels into a two-dimensional convolution filter",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_CONVOLUTION_2D`. </para> </listitem>",
            "internalformat": "<listitem> <para> The internal format of the convolution filter kernel. The allowable values are `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, or `GL_RGBA16`. </para> </listitem>",
            "x": "<listitem> <para> The window space coordinates of the lower-left coordinate of the pixel array to copy. </para> </listitem>",
            "width": "<listitem> <para> The width of the pixel array to copy. </para> </listitem>",
            "height": "<listitem> <para> The height of the pixel array to copy. </para> </listitem>"
        }
    },
    "glCopyPixels": {
        "signature": "void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)",
        "purpose": "copy pixels in the frame buffer",
        "parameters": {
            "x": "<listitem> <para> Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. </para> </listitem>",
            "width": "<listitem> <para> Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative. </para> </listitem>",
            "type": "<listitem> <para> Specifies whether color values, depth values, or stencil values are to be copied. Symbolic constants `GL_COLOR`, `GL_DEPTH`, and `GL_STENCIL` are accepted. </para> </listitem>"
        }
    },
    "glCopyTexImage1D": {
        "signature": "void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)",
        "purpose": "copy pixels into a 1D texture image",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_1D`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "internalformat": "<listitem> <para> Specifies the internal format of the texture. Must be one of the following symbolic constants: `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_COMPRESSED_ALPHA`, `GL_COMPRESSED_LUMINANCE`, `GL_COMPRESSED_LUMINANCE_ALPHA`, `GL_COMPRESSED_INTENSITY`, `GL_COMPRESSED_RGB`, `GL_COMPRESSED_RGBA`, `GL_DEPTH_COMPONENT`, `GL_DEPTH_COMPONENT16`, `GL_DEPTH_COMPONENT24`, `GL_DEPTH_COMPONENT32`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_RGB`, `GL_R3_G3_B2`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, `GL_RGBA16`, `GL_SLUMINANCE`, `GL_SLUMINANCE8`, `GL_SLUMINANCE_ALPHA`, `GL_SLUMINANCE8_ALPHA8`, `GL_SRGB`, `GL_SRGB8`, `GL_SRGB_ALPHA`, or `GL_SRGB8_ALPHA8`. </para> </listitem>",
            "x": "<listitem> <para> Specify the window coordinates of the left corner of the row of pixels to be copied. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image. Must be 0 or <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. The height of the texture image is 1. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be either 0 or 1. </para> </listitem>"
        }
    },
    "glCopyTexImage2D": {
        "signature": "void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)",
        "purpose": "copy pixels into a 2D texture image",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "internalformat": "<listitem> <para> Specifies the internal format of the texture. Must be one of the following symbolic constants: `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_COMPRESSED_ALPHA`, `GL_COMPRESSED_LUMINANCE`, `GL_COMPRESSED_LUMINANCE_ALPHA`, `GL_COMPRESSED_INTENSITY`, `GL_COMPRESSED_RGB`, `GL_COMPRESSED_RGBA`, `GL_DEPTH_COMPONENT`, `GL_DEPTH_COMPONENT16`, `GL_DEPTH_COMPONENT24`, `GL_DEPTH_COMPONENT32`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_RGB`, `GL_R3_G3_B2`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, `GL_RGBA16`, `GL_SLUMINANCE`, `GL_SLUMINANCE8`, `GL_SLUMINANCE_ALPHA`, `GL_SLUMINANCE8_ALPHA8`, `GL_SRGB`, `GL_SRGB8`, `GL_SRGB_ALPHA`, or `GL_SRGB8_ALPHA8`. </para> </listitem>",
            "x": "<listitem> <para> Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image. Must be 0 or <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture image. Must be 0 or <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">m</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">m</mi></math></inlineequation>. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be either 0 or 1. </para> </listitem>"
        }
    },
    "glCopyTexSubImage1D": {
        "signature": "void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)",
        "purpose": "copy a one-dimensional texture subimage",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_1D`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies the texel offset within the texture array. </para> </listitem>",
            "x": "<listitem> <para> Specify the window coordinates of the left corner of the row of pixels to be copied. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>"
        }
    },
    "glCopyTexSubImage2D": {
        "signature": "void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "copy a two-dimensional texture subimage",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "yoffset": "<listitem> <para> Specifies a texel offset in the y direction within the texture array. </para> </listitem>",
            "x": "<listitem> <para> Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture subimage. </para> </listitem>"
        }
    },
    "glCopyTexSubImage3D": {
        "signature": "void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "copy a three-dimensional texture subimage",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_3D` </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "yoffset": "<listitem> <para> Specifies a texel offset in the y direction within the texture array. </para> </listitem>",
            "zoffset": "<listitem> <para> Specifies a texel offset in the z direction within the texture array. </para> </listitem>",
            "x": "<listitem> <para> Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture subimage. </para> </listitem>"
        }
    },
    "glCreateProgram": {
        "signature": "GLuint glCreateProgram(void)",
        "purpose": "Creates a program object",
        "parameters": {}
    },
    "glCreateShader": {
        "signature": "GLuint glCreateShader(GLenum shaderType)",
        "purpose": "Creates a shader object",
        "parameters": {
            "shaderType": "<listitem> <para>Specifies the type of shader to be created. Must be either `GL_VERTEX_SHADER` or `GL_FRAGMENT_SHADER`.</para> </listitem>"
        }
    },
    "glCullFace": {
        "signature": "void glCullFace(GLenum mode)",
        "purpose": "specify whether front- or back-facing facets can be culled",
        "parameters": {
            "mode": "<listitem> <para> Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants `GL_FRONT`, `GL_BACK`, and `GL_FRONT_AND_BACK` are accepted. The initial value is `GL_BACK`. </para> </listitem>"
        }
    },
    "glDeleteBuffers": {
        "signature": "void glDeleteBuffers(GLsizei n, const GLuint * buffers)",
        "purpose": "delete named buffer objects",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of buffer objects to be deleted. </para> </listitem>",
            "buffers": "<listitem> <para> Specifies an array of buffer objects to be deleted. </para> </listitem>"
        }
    },
    "glDeleteLists": {
        "signature": "void glDeleteLists(GLuint list, GLsizei range)",
        "purpose": "delete a contiguous group of display lists",
        "parameters": {
            "list": "<listitem> <para> Specifies the integer name of the first display list to delete. </para> </listitem>",
            "range": "<listitem> <para> Specifies the number of display lists to delete. </para> </listitem>"
        }
    },
    "glDeleteProgram": {
        "signature": "void glDeleteProgram(GLuint program)",
        "purpose": "Deletes a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be deleted.</para> </listitem>"
        }
    },
    "glDeleteQueries": {
        "signature": "void glDeleteQueries(GLsizei n, const GLuint * ids)",
        "purpose": "delete named query objects",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of query objects to be deleted. </para> </listitem>",
            "ids": "<listitem> <para> Specifies an array of query objects to be deleted. </para> </listitem>"
        }
    },
    "glDeleteShader": {
        "signature": "void glDeleteShader(GLuint shader)",
        "purpose": "Deletes a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the shader object to be deleted.</para> </listitem>"
        }
    },
    "glDeleteTextures": {
        "signature": "void glDeleteTextures(GLsizei n, const GLuint * textures)",
        "purpose": "delete named textures",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of textures to be deleted. </para> </listitem>",
            "textures": "<listitem> <para> Specifies an array of textures to be deleted. </para> </listitem>"
        }
    },
    "glDepthFunc": {
        "signature": "void glDepthFunc(GLenum func)",
        "purpose": "specify the value used for depth buffer comparisons",
        "parameters": {
            "func": "<listitem> <para> Specifies the depth comparison function. Symbolic constants `GL_NEVER`, `GL_LESS`, `GL_EQUAL`, `GL_LEQUAL`, `GL_GREATER`, `GL_NOTEQUAL`, `GL_GEQUAL`, and `GL_ALWAYS` are accepted. The initial value is `GL_LESS`. </para> </listitem>"
        }
    },
    "glDepthMask": {
        "signature": "void glDepthMask(GLboolean flag)",
        "purpose": "enable or disable writing into the depth buffer",
        "parameters": {
            "flag": "<listitem> <para> Specifies whether the depth buffer is enabled for writing. If <parameter>flag</parameter> is `GL_FALSE`, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled. </para> </listitem>"
        }
    },
    "glDepthRange": {
        "signature": "void glDepthRange(GLclampd nearVal, GLclampd farVal)",
        "purpose": "specify mapping of depth values from normalized device coordinates to window coordinates",
        "parameters": {
            "nearVal": "<listitem> <para> Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0. </para> </listitem>",
            "farVal": "<listitem> <para> Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1. </para> </listitem>"
        }
    },
    "glDetachShader": {
        "signature": "void glDetachShader(GLuint program, GLuint shader)",
        "purpose": "Detaches a shader object from a program object to which it is attached",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object from which to detach the shader object.</para> </listitem>",
            "shader": "<listitem> <para>Specifies the shader object to be detached.</para> </listitem>"
        }
    },
    "glDrawArrays": {
        "signature": "void glDrawArrays(GLenum mode, GLint first, GLsizei count)",
        "purpose": "render primitives from array data",
        "parameters": {
            "mode": "<listitem> <para> Specifies what kind of primitives to render. Symbolic constants `GL_POINTS`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_LINES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, `GL_TRIANGLES`, `GL_QUAD_STRIP`, `GL_QUADS`, and `GL_POLYGON` are accepted. </para> </listitem>",
            "first": "<listitem> <para> Specifies the starting index in the enabled arrays. </para> </listitem>",
            "count": "<listitem> <para> Specifies the number of indices to be rendered. </para> </listitem>"
        }
    },
    "glDrawBuffer": {
        "signature": "void glDrawBuffer(GLenum mode)",
        "purpose": "specify which color buffers are to be drawn into",
        "parameters": {
            "mode": "<listitem> <para> Specifies up to four color buffers to be drawn into. Symbolic constants `GL_NONE`, `GL_FRONT_LEFT`, `GL_FRONT_RIGHT`, `GL_BACK_LEFT`, `GL_BACK_RIGHT`, `GL_FRONT`, `GL_BACK`, `GL_LEFT`, `GL_RIGHT`, `GL_FRONT_AND_BACK`, and `GL_AUX`<emphasis>i</emphasis>, where <emphasis>i</emphasis> is between 0 and the value of `GL_AUX_BUFFERS` minus 1, are accepted. (`GL_AUX_BUFFERS` is not the upper limit; use <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> to query the number of available aux buffers.) The initial value is `GL_FRONT` for single-buffered contexts, and `GL_BACK` for double-buffered contexts. </para> </listitem>"
        }
    },
    "glDrawBuffers": {
        "signature": "void glDrawBuffers(GLsizei n, const GLenum *bufs)",
        "purpose": "Specifies a list of color buffers to be drawn into",
        "parameters": {
            "n": "<listitem> <para>Specifies the number of buffers in <parameter>bufs</parameter>.</para> </listitem>",
            "bufs": "<listitem> <para>Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.</para> </listitem>"
        }
    },
    "glDrawElements": {
        "signature": "void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices)",
        "purpose": "render primitives from array data",
        "parameters": {
            "mode": "<listitem> <para> Specifies what kind of primitives to render. Symbolic constants `GL_POINTS`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_LINES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, `GL_TRIANGLES`, `GL_QUAD_STRIP`, `GL_QUADS`, and `GL_POLYGON` are accepted. </para> </listitem>",
            "count": "<listitem> <para> Specifies the number of elements to be rendered. </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of the values in <parameter>indices</parameter>. Must be one of `GL_UNSIGNED_BYTE`, `GL_UNSIGNED_SHORT`, or `GL_UNSIGNED_INT`. </para> </listitem>",
            "indices": "<listitem> <para> Specifies a pointer to the location where the indices are stored. </para> </listitem>"
        }
    },
    "glDrawPixels": {
        "signature": "void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * data)",
        "purpose": "write a block of pixels to the frame buffer",
        "parameters": {
            "width": "<listitem> <para> Specify the dimensions of the pixel rectangle to be written into the frame buffer. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. Symbolic constants `GL_COLOR_INDEX`, `GL_STENCIL_INDEX`, `GL_DEPTH_COMPONENT`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA` are accepted. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type for <parameter>data</parameter>. Symbolic constants `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV` are accepted. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the pixel data. </para> </listitem>"
        }
    },
    "glDrawRangeElements": {
        "signature": "void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices)",
        "purpose": "render primitives from array data",
        "parameters": {
            "mode": "<listitem> <para> Specifies what kind of primitives to render. Symbolic constants `GL_POINTS`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_LINES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, `GL_TRIANGLES`, `GL_QUAD_STRIP`, `GL_QUADS`, and `GL_POLYGON` are accepted. </para> </listitem>",
            "start": "<listitem> <para> Specifies the minimum array index contained in <parameter>indices</parameter>. </para> </listitem>",
            "end": "<listitem> <para> Specifies the maximum array index contained in <parameter>indices</parameter>. </para> </listitem>",
            "count": "<listitem> <para> Specifies the number of elements to be rendered. </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of the values in <parameter>indices</parameter>. Must be one of `GL_UNSIGNED_BYTE`, `GL_UNSIGNED_SHORT`, or `GL_UNSIGNED_INT`. </para> </listitem>",
            "indices": "<listitem> <para> Specifies a pointer to the location where the indices are stored. </para> </listitem>"
        }
    },
    "glEdgeFlag": {
        "signature": "void glEdgeFlag(GLboolean flag)",
        "purpose": "flag edges as either boundary or nonboundary",
        "parameters": {
            "flag": "<listitem> <para> Specifies the current edge flag value, either `GL_TRUE` or `GL_FALSE`. The initial value is `GL_TRUE`. </para> </listitem>"
        }
    },
    "glEdgeFlagv": {
        "signature": "void glEdgeFlagv(const GLboolean * flag)",
        "purpose": "flag edges as either boundary or nonboundary",
        "parameters": {
            "flag": "<listitem> <para> Specifies the current edge flag value, either `GL_TRUE` or `GL_FALSE`. The initial value is `GL_TRUE`. </para> </listitem>"
        }
    },
    "glEdgeFlagPointer": {
        "signature": "void glEdgeFlagPointer(GLsizei stride, const void * pointer)",
        "purpose": "define an array of edge flags",
        "parameters": {
            "stride": "<listitem> <para> Specifies the byte offset between consecutive edge flags. If <parameter>stride</parameter> is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first edge flag in the array. The initial value is 0. </para> </listitem>"
        }
    },
    "glEnable": {
        "signature": "void glEnable(GLenum cap)",
        "purpose": "enable or disable server-side GL capabilities",
        "parameters": {
            "cap": "<listitem> <para> Specifies a symbolic constant indicating a GL capability. </para> </listitem>"
        }
    },
    "glDisable": {
        "signature": "void glDisable(GLenum cap)",
        "purpose": "enable or disable server-side GL capabilities",
        "parameters": {
            "cap": "<listitem> <para> Specifies a symbolic constant indicating a GL capability. </para> </listitem>"
        }
    },
    "glEnableClientState": {
        "signature": "void glEnableClientState(GLenum cap)",
        "purpose": "enable or disable client-side capability",
        "parameters": {
            "cap": "<listitem> <para> Specifies the capability to enable. Symbolic constants `GL_COLOR_ARRAY`, `GL_EDGE_FLAG_ARRAY`, `GL_FOG_COORD_ARRAY`, `GL_INDEX_ARRAY`, `GL_NORMAL_ARRAY`, `GL_SECONDARY_COLOR_ARRAY`, `GL_TEXTURE_COORD_ARRAY`, and `GL_VERTEX_ARRAY` are accepted. </para> </listitem>"
        }
    },
    "glDisableClientState": {
        "signature": "void glDisableClientState(GLenum cap)",
        "purpose": "enable or disable client-side capability",
        "parameters": {
            "cap": "<listitem> <para> Specifies the capability to enable. Symbolic constants `GL_COLOR_ARRAY`, `GL_EDGE_FLAG_ARRAY`, `GL_FOG_COORD_ARRAY`, `GL_INDEX_ARRAY`, `GL_NORMAL_ARRAY`, `GL_SECONDARY_COLOR_ARRAY`, `GL_TEXTURE_COORD_ARRAY`, and `GL_VERTEX_ARRAY` are accepted. </para> </listitem>"
        }
    },
    "glEnableVertexAttribArray": {
        "signature": "void glEnableVertexAttribArray(GLuint index)",
        "purpose": "Enable or disable a generic vertex attribute array",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be enabled or disabled.</para> </listitem>"
        }
    },
    "glDisableVertexAttribArray": {
        "signature": "void glDisableVertexAttribArray(GLuint index)",
        "purpose": "Enable or disable a generic vertex attribute array",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be enabled or disabled.</para> </listitem>"
        }
    },
    "glEvalCoord1f": {
        "signature": "void glEvalCoord1f(GLfloat u)",
        "purpose": "evaluate enabled one- and two-dimensional maps",
        "parameters": {
            "u": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap1</refentrytitle></citerefentry> or <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. </para> </listitem>",
            "v": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. This argument is not present in a <function>glEvalCoord1</function> command. </para> </listitem>"
        }
    },
    "glEvalCoord1d": {
        "signature": "void glEvalCoord1d(GLdouble u)",
        "purpose": "evaluate enabled one- and two-dimensional maps",
        "parameters": {
            "u": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap1</refentrytitle></citerefentry> or <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. </para> </listitem>",
            "v": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. This argument is not present in a <function>glEvalCoord1</function> command. </para> </listitem>"
        }
    },
    "glEvalCoord2f": {
        "signature": "void glEvalCoord2f(GLfloat u, GLfloat v)",
        "purpose": "evaluate enabled one- and two-dimensional maps",
        "parameters": {
            "u": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap1</refentrytitle></citerefentry> or <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. </para> </listitem>",
            "v": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. This argument is not present in a <function>glEvalCoord1</function> command. </para> </listitem>"
        }
    },
    "glEvalCoord2d": {
        "signature": "void glEvalCoord2d(GLdouble u, GLdouble v)",
        "purpose": "evaluate enabled one- and two-dimensional maps",
        "parameters": {
            "u": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap1</refentrytitle></citerefentry> or <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. </para> </listitem>",
            "v": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. This argument is not present in a <function>glEvalCoord1</function> command. </para> </listitem>"
        }
    },
    "glEvalCoord1fv": {
        "signature": "void glEvalCoord1fv(const GLfloat * u)",
        "purpose": "evaluate enabled one- and two-dimensional maps",
        "parameters": {
            "u": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap1</refentrytitle></citerefentry> or <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. </para> </listitem>",
            "v": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. This argument is not present in a <function>glEvalCoord1</function> command. </para> </listitem>"
        }
    },
    "glEvalCoord1dv": {
        "signature": "void glEvalCoord1dv(const GLdouble * u)",
        "purpose": "evaluate enabled one- and two-dimensional maps",
        "parameters": {
            "u": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap1</refentrytitle></citerefentry> or <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. </para> </listitem>",
            "v": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. This argument is not present in a <function>glEvalCoord1</function> command. </para> </listitem>"
        }
    },
    "glEvalCoord2fv": {
        "signature": "void glEvalCoord2fv(const GLfloat * u)",
        "purpose": "evaluate enabled one- and two-dimensional maps",
        "parameters": {
            "u": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap1</refentrytitle></citerefentry> or <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. </para> </listitem>",
            "v": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. This argument is not present in a <function>glEvalCoord1</function> command. </para> </listitem>"
        }
    },
    "glEvalCoord2dv": {
        "signature": "void glEvalCoord2dv(const GLdouble * u)",
        "purpose": "evaluate enabled one- and two-dimensional maps",
        "parameters": {
            "u": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap1</refentrytitle></citerefentry> or <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. </para> </listitem>",
            "v": "<listitem> <para> Specifies a value that is the domain coordinate <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> to the basis function defined in a previous <citerefentry><refentrytitle>glMap2</refentrytitle></citerefentry> command. This argument is not present in a <function>glEvalCoord1</function> command. </para> </listitem>"
        }
    },
    "glEvalMesh1": {
        "signature": "void glEvalMesh1(GLenum mode, GLint i1, GLint i2)",
        "purpose": "compute a one- or two-dimensional grid of points or lines",
        "parameters": {
            "mode": "<listitem> <para> In <function>glEvalMesh1</function>, specifies whether to compute a one-dimensional mesh of points or lines. Symbolic constants `GL_POINT` and `GL_LINE` are accepted. </para> </listitem>",
            "i1": "<listitem> <para> Specify the first and last integer values for grid domain variable <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>. </para> </listitem>"
        }
    },
    "glEvalMesh2": {
        "signature": "void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)",
        "purpose": "compute a one- or two-dimensional grid of points or lines",
        "parameters": {
            "mode": "<listitem> <para> In <function>glEvalMesh1</function>, specifies whether to compute a one-dimensional mesh of points or lines. Symbolic constants `GL_POINT` and `GL_LINE` are accepted. </para> </listitem>",
            "i1": "<listitem> <para> Specify the first and last integer values for grid domain variable <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>. </para> </listitem>"
        }
    },
    "glEvalPoint1": {
        "signature": "void glEvalPoint1(GLint i)",
        "purpose": "generate and evaluate a single point in a mesh",
        "parameters": {
            "i": "<listitem> <para> Specifies the integer value for grid domain variable <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>. </para> </listitem>",
            "j": "<listitem> <para> Specifies the integer value for grid domain variable <inlineequation><math><mi mathvariant=\"italic\">j</mi></math></inlineequation> (<function>glEvalPoint2</function> only). </para> </listitem>"
        }
    },
    "glEvalPoint2": {
        "signature": "void glEvalPoint2(GLint i, GLint j)",
        "purpose": "generate and evaluate a single point in a mesh",
        "parameters": {
            "i": "<listitem> <para> Specifies the integer value for grid domain variable <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>. </para> </listitem>",
            "j": "<listitem> <para> Specifies the integer value for grid domain variable <inlineequation><math><mi mathvariant=\"italic\">j</mi></math></inlineequation> (<function>glEvalPoint2</function> only). </para> </listitem>"
        }
    },
    "glFeedbackBuffer": {
        "signature": "void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer)",
        "purpose": "controls feedback mode",
        "parameters": {
            "size": "<listitem> <para> Specifies the maximum number of values that can be written into <parameter>buffer</parameter>. </para> </listitem>",
            "type": "<listitem> <para> Specifies a symbolic constant that describes the information that will be returned for each vertex. `GL_2D`, `GL_3D`, `GL_3D_COLOR`, `GL_3D_COLOR_TEXTURE`, and `GL_4D_COLOR_TEXTURE` are accepted. </para> </listitem>",
            "buffer": "<listitem> <para> Returns the feedback data. </para> </listitem>"
        }
    },
    "glFinish": {
        "signature": "void glFinish( void)",
        "purpose": "block until all GL execution is complete",
        "parameters": {}
    },
    "glFlush": {
        "signature": "void glFlush( void)",
        "purpose": "force execution of GL commands in finite time",
        "parameters": {}
    },
    "glFogf": {
        "signature": "void glFogf(GLenum pname, GLfloat param)",
        "purpose": "specify fog parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued fog parameter. `GL_FOG_MODE`, `GL_FOG_DENSITY`, `GL_FOG_START`, `GL_FOG_END`, `GL_FOG_INDEX`, and `GL_FOG_COORD_SRC` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> will be set to. </para> </listitem>"
        }
    },
    "glFogi": {
        "signature": "void glFogi(GLenum pname, GLint param)",
        "purpose": "specify fog parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued fog parameter. `GL_FOG_MODE`, `GL_FOG_DENSITY`, `GL_FOG_START`, `GL_FOG_END`, `GL_FOG_INDEX`, and `GL_FOG_COORD_SRC` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> will be set to. </para> </listitem>"
        }
    },
    "glFogfv": {
        "signature": "void glFogfv(GLenum pname, const GLfloat * params)",
        "purpose": "specify fog parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued fog parameter. `GL_FOG_MODE`, `GL_FOG_DENSITY`, `GL_FOG_START`, `GL_FOG_END`, `GL_FOG_INDEX`, and `GL_FOG_COORD_SRC` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> will be set to. </para> </listitem>"
        }
    },
    "glFogiv": {
        "signature": "void glFogiv(GLenum pname, const GLint * params)",
        "purpose": "specify fog parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued fog parameter. `GL_FOG_MODE`, `GL_FOG_DENSITY`, `GL_FOG_START`, `GL_FOG_END`, `GL_FOG_INDEX`, and `GL_FOG_COORD_SRC` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> will be set to. </para> </listitem>"
        }
    },
    "glFogCoordd": {
        "signature": "void glFogCoordd(GLdouble coord)",
        "purpose": "set the current fog coordinates",
        "parameters": {
            "coord": "<listitem> <para> Specify the fog distance. </para> </listitem>"
        }
    },
    "glFogCoordf": {
        "signature": "void glFogCoordf(GLfloat coord)",
        "purpose": "set the current fog coordinates",
        "parameters": {
            "coord": "<listitem> <para> Specify the fog distance. </para> </listitem>"
        }
    },
    "glFogCoorddv": {
        "signature": "void glFogCoorddv(GLdouble * coord)",
        "purpose": "set the current fog coordinates",
        "parameters": {
            "coord": "<listitem> <para> Specify the fog distance. </para> </listitem>"
        }
    },
    "glFogCoordfv": {
        "signature": "void glFogCoordfv(GLfloat * coord)",
        "purpose": "set the current fog coordinates",
        "parameters": {
            "coord": "<listitem> <para> Specify the fog distance. </para> </listitem>"
        }
    },
    "glFogCoordPointer": {
        "signature": "void glFogCoordPointer(GLenum type, GLsizei stride, void * pointer)",
        "purpose": "define an array of fog coordinates",
        "parameters": {
            "type": "<listitem> <para> Specifies the data type of each fog coordinate. Symbolic constants `GL_FLOAT`, or `GL_DOUBLE` are accepted. The initial value is `GL_FLOAT`. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive fog coordinates. If <parameter>stride</parameter> is 0, the array elements are understood to be tightly packed. The initial value is 0. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0. </para> </listitem>"
        }
    },
    "glFrontFace": {
        "signature": "void glFrontFace(GLenum mode)",
        "purpose": "define front- and back-facing polygons",
        "parameters": {
            "mode": "<listitem> <para> Specifies the orientation of front-facing polygons. `GL_CW` and `GL_CCW` are accepted. The initial value is `GL_CCW`. </para> </listitem>"
        }
    },
    "glFrustum": {
        "signature": "void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble nearVal, GLdouble farVal)",
        "purpose": "multiply the current matrix by a perspective matrix",
        "parameters": {
            "left": "<listitem> <para> Specify the coordinates for the left and right vertical clipping planes. </para> </listitem>",
            "bottom": "<listitem> <para> Specify the coordinates for the bottom and top horizontal clipping planes. </para> </listitem>",
            "nearVal": "<listitem> <para> Specify the distances to the near and far depth clipping planes. Both distances must be positive. </para> </listitem>"
        }
    },
    "glGenBuffers": {
        "signature": "void glGenBuffers(GLsizei n, GLuint * buffers)",
        "purpose": "generate buffer object names",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of buffer object names to be generated. </para> </listitem>",
            "buffers": "<listitem> <para> Specifies an array in which the generated buffer object names are stored. </para> </listitem>"
        }
    },
    "glGenLists": {
        "signature": "GLuint glGenLists(GLsizei range)",
        "purpose": "generate a contiguous set of empty display lists",
        "parameters": {
            "range": "<listitem> <para> Specifies the number of contiguous empty display lists to be generated. </para> </listitem>"
        }
    },
    "glGenQueries": {
        "signature": "void glGenQueries(GLsizei n, GLuint * ids)",
        "purpose": "generate query object names",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of query object names to be generated. </para> </listitem>",
            "ids": "<listitem> <para> Specifies an array in which the generated query object names are stored. </para> </listitem>"
        }
    },
    "glGenTextures": {
        "signature": "void glGenTextures(GLsizei n, GLuint * textures)",
        "purpose": "generate texture names",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of texture names to be generated. </para> </listitem>",
            "textures": "<listitem> <para> Specifies an array in which the generated texture names are stored. </para> </listitem>"
        }
    },
    "glGetBooleanv": {
        "signature": "void glGetBooleanv(GLenum pname, GLboolean * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para> Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the value or values of the specified parameter. </para> </listitem>"
        }
    },
    "glGetDoublev": {
        "signature": "void glGetDoublev(GLenum pname, GLdouble * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para> Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the value or values of the specified parameter. </para> </listitem>"
        }
    },
    "glGetFloatv": {
        "signature": "void glGetFloatv(GLenum pname, GLfloat * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para> Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the value or values of the specified parameter. </para> </listitem>"
        }
    },
    "glGetIntegerv": {
        "signature": "void glGetIntegerv(GLenum pname, GLint * params)",
        "purpose": "return the value or values of a selected parameter",
        "parameters": {
            "pname": "<listitem> <para> Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the value or values of the specified parameter. </para> </listitem>"
        }
    },
    "glGetActiveAttrib": {
        "signature": "void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)",
        "purpose": "Returns information about an active attribute variable for the specified program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "index": "<listitem> <para>Specifies the index of the attribute variable to be queried.</para> </listitem>",
            "bufSize": "<listitem> <para>Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by <parameter>name</parameter>.</para> </listitem>",
            "length": "<listitem> <para>Returns the number of characters actually written by OpenGL in the string indicated by <parameter>name</parameter> (excluding the null terminator) if a value other than `NULL` is passed.</para> </listitem>",
            "size": "<listitem> <para>Returns the size of the attribute variable.</para> </listitem>",
            "type": "<listitem> <para>Returns the data type of the attribute variable.</para> </listitem>",
            "name": "<listitem> <para>Returns a null terminated string containing the name of the attribute variable.</para> </listitem>"
        }
    },
    "glGetActiveUniform": {
        "signature": "void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)",
        "purpose": "Returns information about an active uniform variable for the specified program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "index": "<listitem> <para>Specifies the index of the uniform variable to be queried.</para> </listitem>",
            "bufSize": "<listitem> <para>Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by <parameter>name</parameter>.</para> </listitem>",
            "length": "<listitem> <para>Returns the number of characters actually written by OpenGL in the string indicated by <parameter>name</parameter> (excluding the null terminator) if a value other than `NULL` is passed.</para> </listitem>",
            "size": "<listitem> <para>Returns the size of the uniform variable.</para> </listitem>",
            "type": "<listitem> <para>Returns the data type of the uniform variable.</para> </listitem>",
            "name": "<listitem> <para>Returns a null terminated string containing the name of the uniform variable.</para> </listitem>"
        }
    },
    "glGetAttachedShaders": {
        "signature": "void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)",
        "purpose": "Returns the handles of the shader objects attached to a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "maxCount": "<listitem> <para>Specifies the size of the array for storing the returned object names.</para> </listitem>",
            "count": "<listitem> <para>Returns the number of names actually returned in <parameter>shaders</parameter>.</para> </listitem>",
            "shaders": "<listitem> <para>Specifies an array that is used to return the names of attached shader objects.</para> </listitem>"
        }
    },
    "glGetAttribLocation": {
        "signature": "GLint glGetAttribLocation(GLuint program, const GLchar *name)",
        "purpose": "Returns the location of an attribute variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "name": "<listitem> <para>Points to a null terminated string containing the name of the attribute variable whose location is to be queried.</para> </listitem>"
        }
    },
    "glGetBufferParameteriv": {
        "signature": "void glGetBufferParameteriv(GLenum target, GLenum value, GLint * data)",
        "purpose": "return parameters of a buffer object",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER`, `GL_ELEMENT_ARRAY_BUFFER`, `GL_PIXEL_PACK_BUFFER`, or `GL_PIXEL_UNPACK_BUFFER`. </para> </listitem>",
            "value": "<listitem> <para> Specifies the symbolic name of a buffer object parameter. Accepted values are `GL_BUFFER_ACCESS`, `GL_BUFFER_MAPPED`, `GL_BUFFER_SIZE`, or `GL_BUFFER_USAGE`. </para> </listitem>",
            "data": "<listitem> <para> Returns the requested parameter. </para> </listitem>"
        }
    },
    "glGetBufferPointerv": {
        "signature": "void glGetBufferPointerv(GLenum target, GLenum pname, void ** params)",
        "purpose": "return the pointer to a mapped buffer object's data store",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER`, `GL_ELEMENT_ARRAY_BUFFER`, `GL_PIXEL_PACK_BUFFER`, or `GL_PIXEL_UNPACK_BUFFER`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the pointer to be returned. The symbolic constant must be `GL_BUFFER_MAP_POINTER`. </para> </listitem>",
            "params": "<listitem> <para> Returns the pointer value specified by <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glGetBufferSubData": {
        "signature": "void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data)",
        "purpose": "returns a subset of a buffer object's data store",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object. The symbolic constant must be `GL_ARRAY_BUFFER`, `GL_ELEMENT_ARRAY_BUFFER`, `GL_PIXEL_PACK_BUFFER`, or `GL_PIXEL_UNPACK_BUFFER`. </para> </listitem>",
            "offset": "<listitem> <para> Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes. </para> </listitem>",
            "size": "<listitem> <para> Specifies the size in bytes of the data store region being returned. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the location where buffer object data is returned. </para> </listitem>"
        }
    },
    "glGetClipPlane": {
        "signature": "void glGetClipPlane(GLenum plane, GLdouble * equation)",
        "purpose": "return the coefficients of the specified clipping plane",
        "parameters": {
            "plane": "<listitem> <para> Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form `GL_CLIP_PLANE` <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation> where i ranges from 0 to the value of `GL_MAX_CLIP_PLANES` - 1. </para> </listitem>",
            "equation": "<listitem> <para> Returns four double-precision values that are the coefficients of the plane equation of <parameter>plane</parameter> in eye coordinates. The initial value is (0, 0, 0, 0). </para> </listitem>"
        }
    },
    "glGetColorTable": {
        "signature": "void glGetColorTable(GLenum target, GLenum format, GLenum type, void * table)",
        "purpose": "retrieve contents of a color lookup table",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_COLOR_TABLE`, `GL_POST_CONVOLUTION_COLOR_TABLE`, or `GL_POST_COLOR_MATRIX_COLOR_TABLE`. </para> </listitem>",
            "format": "<listitem> <para> The format of the pixel data in <parameter>table</parameter>. The possible values are `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_LUMINANCE`, `GL_LUMINANCE_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, and `GL_BGRA`. </para> </listitem>",
            "type": "<listitem> <para> The type of the pixel data in <parameter>table</parameter>. Symbolic constants `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV` are accepted. </para> </listitem>",
            "table": "<listitem> <para> Pointer to a one-dimensional array of pixel data containing the contents of the color table. </para> </listitem>"
        }
    },
    "glGetColorTableParameterfv": {
        "signature": "void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params)",
        "purpose": "get color lookup table parameters",
        "parameters": {
            "target": "<listitem> <para> The target color table. Must be `GL_COLOR_TABLE`, `GL_POST_CONVOLUTION_COLOR_TABLE`, `GL_POST_COLOR_MATRIX_COLOR_TABLE`, `GL_PROXY_COLOR_TABLE`, `GL_PROXY_POST_CONVOLUTION_COLOR_TABLE`, or `GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE`. </para> </listitem>",
            "pname": "<listitem> <para> The symbolic name of a color lookup table parameter. Must be one of `GL_COLOR_TABLE_BIAS`, `GL_COLOR_TABLE_SCALE`, `GL_COLOR_TABLE_FORMAT`, `GL_COLOR_TABLE_WIDTH`, `GL_COLOR_TABLE_RED_SIZE`, `GL_COLOR_TABLE_GREEN_SIZE`, `GL_COLOR_TABLE_BLUE_SIZE`, `GL_COLOR_TABLE_ALPHA_SIZE`, `GL_COLOR_TABLE_LUMINANCE_SIZE`, or `GL_COLOR_TABLE_INTENSITY_SIZE`. </para> </listitem>",
            "params": "<listitem> <para> A pointer to an array where the values of the parameter will be stored. </para> </listitem>"
        }
    },
    "glGetColorTableParameteriv": {
        "signature": "void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "get color lookup table parameters",
        "parameters": {
            "target": "<listitem> <para> The target color table. Must be `GL_COLOR_TABLE`, `GL_POST_CONVOLUTION_COLOR_TABLE`, `GL_POST_COLOR_MATRIX_COLOR_TABLE`, `GL_PROXY_COLOR_TABLE`, `GL_PROXY_POST_CONVOLUTION_COLOR_TABLE`, or `GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE`. </para> </listitem>",
            "pname": "<listitem> <para> The symbolic name of a color lookup table parameter. Must be one of `GL_COLOR_TABLE_BIAS`, `GL_COLOR_TABLE_SCALE`, `GL_COLOR_TABLE_FORMAT`, `GL_COLOR_TABLE_WIDTH`, `GL_COLOR_TABLE_RED_SIZE`, `GL_COLOR_TABLE_GREEN_SIZE`, `GL_COLOR_TABLE_BLUE_SIZE`, `GL_COLOR_TABLE_ALPHA_SIZE`, `GL_COLOR_TABLE_LUMINANCE_SIZE`, or `GL_COLOR_TABLE_INTENSITY_SIZE`. </para> </listitem>",
            "params": "<listitem> <para> A pointer to an array where the values of the parameter will be stored. </para> </listitem>"
        }
    },
    "glGetCompressedTexImage": {
        "signature": "void glGetCompressedTexImage(GLenum target, GLint lod, void * img)",
        "purpose": "return a compressed texture image",
        "parameters": {
            "target": "<listitem> <para> Specifies which texture is to be obtained. `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, and `GL_TEXTURE_3D` `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, and `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z` are accepted. </para> </listitem>",
            "lod": "<listitem> <para> Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation> is the <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>th mipmap reduction image. </para> </listitem>",
            "img": "<listitem> <para> Returns the compressed texture image. </para> </listitem>"
        }
    },
    "glGetConvolutionFilter": {
        "signature": "void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void * image)",
        "purpose": "get current 1D or 2D convolution filter kernel",
        "parameters": {
            "target": "<listitem> <para> The filter to be retrieved. Must be one of `GL_CONVOLUTION_1D` or `GL_CONVOLUTION_2D`. </para> </listitem>",
            "format": "<listitem> <para> Format of the output image. Must be one of `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, or `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Data type of components in the output image. Symbolic constants `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV` are accepted. </para> </listitem>",
            "image": "<listitem> <para> Pointer to storage for the output image. </para> </listitem>"
        }
    },
    "glGetConvolutionParameterfv": {
        "signature": "void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params)",
        "purpose": "get convolution parameters",
        "parameters": {
            "target": "<listitem> <para> The filter whose parameters are to be retrieved. Must be one of `GL_CONVOLUTION_1D`, `GL_CONVOLUTION_2D`, or `GL_SEPARABLE_2D`. </para> </listitem>",
            "pname": "<listitem> <para> The parameter to be retrieved. Must be one of `GL_CONVOLUTION_BORDER_MODE`, `GL_CONVOLUTION_BORDER_COLOR`, `GL_CONVOLUTION_FILTER_SCALE`, `GL_CONVOLUTION_FILTER_BIAS`, `GL_CONVOLUTION_FORMAT`, `GL_CONVOLUTION_WIDTH`, `GL_CONVOLUTION_HEIGHT`, `GL_MAX_CONVOLUTION_WIDTH`, or `GL_MAX_CONVOLUTION_HEIGHT`. </para> </listitem>",
            "params": "<listitem> <para> Pointer to storage for the parameters to be retrieved. </para> </listitem>"
        }
    },
    "glGetConvolutionParameteriv": {
        "signature": "void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "get convolution parameters",
        "parameters": {
            "target": "<listitem> <para> The filter whose parameters are to be retrieved. Must be one of `GL_CONVOLUTION_1D`, `GL_CONVOLUTION_2D`, or `GL_SEPARABLE_2D`. </para> </listitem>",
            "pname": "<listitem> <para> The parameter to be retrieved. Must be one of `GL_CONVOLUTION_BORDER_MODE`, `GL_CONVOLUTION_BORDER_COLOR`, `GL_CONVOLUTION_FILTER_SCALE`, `GL_CONVOLUTION_FILTER_BIAS`, `GL_CONVOLUTION_FORMAT`, `GL_CONVOLUTION_WIDTH`, `GL_CONVOLUTION_HEIGHT`, `GL_MAX_CONVOLUTION_WIDTH`, or `GL_MAX_CONVOLUTION_HEIGHT`. </para> </listitem>",
            "params": "<listitem> <para> Pointer to storage for the parameters to be retrieved. </para> </listitem>"
        }
    },
    "glGetError": {
        "signature": "GLenum glGetError( void)",
        "purpose": "return error information",
        "parameters": {}
    },
    "glGetHistogram": {
        "signature": "void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values)",
        "purpose": "get histogram table",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_HISTOGRAM`. </para> </listitem>",
            "reset": "<listitem> <para> If `GL_TRUE`, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If `GL_FALSE`, none of the counters in the histogram table is modified. </para> </listitem>",
            "format": "<listitem> <para> The format of values to be returned in <parameter>values</parameter>. Must be one of `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, or `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> The type of values to be returned in <parameter>values</parameter>. Symbolic constants `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV` are accepted. </para> </listitem>",
            "values": "<listitem> <para> A pointer to storage for the returned histogram table. </para> </listitem>"
        }
    },
    "glGetHistogramParameterfv": {
        "signature": "void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params)",
        "purpose": "get histogram parameters",
        "parameters": {
            "target": "<listitem> <para> Must be one of `GL_HISTOGRAM` or `GL_PROXY_HISTOGRAM`. </para> </listitem>",
            "pname": "<listitem> <para> The name of the parameter to be retrieved. Must be one of `GL_HISTOGRAM_WIDTH`, `GL_HISTOGRAM_FORMAT`, `GL_HISTOGRAM_RED_SIZE`, `GL_HISTOGRAM_GREEN_SIZE`, `GL_HISTOGRAM_BLUE_SIZE`, `GL_HISTOGRAM_ALPHA_SIZE`, `GL_HISTOGRAM_LUMINANCE_SIZE`, or `GL_HISTOGRAM_SINK`. </para> </listitem>",
            "params": "<listitem> <para> Pointer to storage for the returned values. </para> </listitem>"
        }
    },
    "glGetHistogramParameteriv": {
        "signature": "void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "get histogram parameters",
        "parameters": {
            "target": "<listitem> <para> Must be one of `GL_HISTOGRAM` or `GL_PROXY_HISTOGRAM`. </para> </listitem>",
            "pname": "<listitem> <para> The name of the parameter to be retrieved. Must be one of `GL_HISTOGRAM_WIDTH`, `GL_HISTOGRAM_FORMAT`, `GL_HISTOGRAM_RED_SIZE`, `GL_HISTOGRAM_GREEN_SIZE`, `GL_HISTOGRAM_BLUE_SIZE`, `GL_HISTOGRAM_ALPHA_SIZE`, `GL_HISTOGRAM_LUMINANCE_SIZE`, or `GL_HISTOGRAM_SINK`. </para> </listitem>",
            "params": "<listitem> <para> Pointer to storage for the returned values. </para> </listitem>"
        }
    },
    "glGetLightfv": {
        "signature": "void glGetLightfv(GLenum light, GLenum pname, GLfloat * params)",
        "purpose": "return light source parameter values",
        "parameters": {
            "light": "<listitem> <para> Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form `GL_LIGHT` <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation> where <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation> ranges from 0 to the value of `GL_MAX_LIGHTS` - 1. </para> </listitem>",
            "pname": "<listitem> <para> Specifies a light source parameter for <parameter>light</parameter>. Accepted symbolic names are `GL_AMBIENT`, `GL_DIFFUSE`, `GL_SPECULAR`, `GL_POSITION`, `GL_SPOT_DIRECTION`, `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetLightiv": {
        "signature": "void glGetLightiv(GLenum light, GLenum pname, GLint * params)",
        "purpose": "return light source parameter values",
        "parameters": {
            "light": "<listitem> <para> Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form `GL_LIGHT` <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation> where <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation> ranges from 0 to the value of `GL_MAX_LIGHTS` - 1. </para> </listitem>",
            "pname": "<listitem> <para> Specifies a light source parameter for <parameter>light</parameter>. Accepted symbolic names are `GL_AMBIENT`, `GL_DIFFUSE`, `GL_SPECULAR`, `GL_POSITION`, `GL_SPOT_DIRECTION`, `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetMapdv": {
        "signature": "void glGetMapdv(GLenum target, GLenum query, GLdouble * v)",
        "purpose": "return evaluator parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the symbolic name of a map. Accepted values are `GL_MAP1_COLOR_4`, `GL_MAP1_INDEX`, `GL_MAP1_NORMAL`, `GL_MAP1_TEXTURE_COORD_1`, `GL_MAP1_TEXTURE_COORD_2`, `GL_MAP1_TEXTURE_COORD_3`, `GL_MAP1_TEXTURE_COORD_4`, `GL_MAP1_VERTEX_3`, `GL_MAP1_VERTEX_4`, `GL_MAP2_COLOR_4`, `GL_MAP2_INDEX`, `GL_MAP2_NORMAL`, `GL_MAP2_TEXTURE_COORD_1`, `GL_MAP2_TEXTURE_COORD_2`, `GL_MAP2_TEXTURE_COORD_3`, `GL_MAP2_TEXTURE_COORD_4`, `GL_MAP2_VERTEX_3`, and `GL_MAP2_VERTEX_4`. </para> </listitem>",
            "query": "<listitem> <para> Specifies which parameter to return. Symbolic names `GL_COEFF`, `GL_ORDER`, and `GL_DOMAIN` are accepted. </para> </listitem>",
            "v": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetMapfv": {
        "signature": "void glGetMapfv(GLenum target, GLenum query, GLfloat * v)",
        "purpose": "return evaluator parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the symbolic name of a map. Accepted values are `GL_MAP1_COLOR_4`, `GL_MAP1_INDEX`, `GL_MAP1_NORMAL`, `GL_MAP1_TEXTURE_COORD_1`, `GL_MAP1_TEXTURE_COORD_2`, `GL_MAP1_TEXTURE_COORD_3`, `GL_MAP1_TEXTURE_COORD_4`, `GL_MAP1_VERTEX_3`, `GL_MAP1_VERTEX_4`, `GL_MAP2_COLOR_4`, `GL_MAP2_INDEX`, `GL_MAP2_NORMAL`, `GL_MAP2_TEXTURE_COORD_1`, `GL_MAP2_TEXTURE_COORD_2`, `GL_MAP2_TEXTURE_COORD_3`, `GL_MAP2_TEXTURE_COORD_4`, `GL_MAP2_VERTEX_3`, and `GL_MAP2_VERTEX_4`. </para> </listitem>",
            "query": "<listitem> <para> Specifies which parameter to return. Symbolic names `GL_COEFF`, `GL_ORDER`, and `GL_DOMAIN` are accepted. </para> </listitem>",
            "v": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetMapiv": {
        "signature": "void glGetMapiv(GLenum target, GLenum query, GLint * v)",
        "purpose": "return evaluator parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the symbolic name of a map. Accepted values are `GL_MAP1_COLOR_4`, `GL_MAP1_INDEX`, `GL_MAP1_NORMAL`, `GL_MAP1_TEXTURE_COORD_1`, `GL_MAP1_TEXTURE_COORD_2`, `GL_MAP1_TEXTURE_COORD_3`, `GL_MAP1_TEXTURE_COORD_4`, `GL_MAP1_VERTEX_3`, `GL_MAP1_VERTEX_4`, `GL_MAP2_COLOR_4`, `GL_MAP2_INDEX`, `GL_MAP2_NORMAL`, `GL_MAP2_TEXTURE_COORD_1`, `GL_MAP2_TEXTURE_COORD_2`, `GL_MAP2_TEXTURE_COORD_3`, `GL_MAP2_TEXTURE_COORD_4`, `GL_MAP2_VERTEX_3`, and `GL_MAP2_VERTEX_4`. </para> </listitem>",
            "query": "<listitem> <para> Specifies which parameter to return. Symbolic names `GL_COEFF`, `GL_ORDER`, and `GL_DOMAIN` are accepted. </para> </listitem>",
            "v": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetMaterialfv": {
        "signature": "void glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params)",
        "purpose": "return material parameters",
        "parameters": {
            "face": "<listitem> <para> Specifies which of the two materials is being queried. `GL_FRONT` or `GL_BACK` are accepted, representing the front and back materials, respectively. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the material parameter to return. `GL_AMBIENT`, `GL_DIFFUSE`, `GL_SPECULAR`, `GL_EMISSION`, `GL_SHININESS`, and `GL_COLOR_INDEXES` are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetMaterialiv": {
        "signature": "void glGetMaterialiv(GLenum face, GLenum pname, GLint * params)",
        "purpose": "return material parameters",
        "parameters": {
            "face": "<listitem> <para> Specifies which of the two materials is being queried. `GL_FRONT` or `GL_BACK` are accepted, representing the front and back materials, respectively. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the material parameter to return. `GL_AMBIENT`, `GL_DIFFUSE`, `GL_SPECULAR`, `GL_EMISSION`, `GL_SHININESS`, and `GL_COLOR_INDEXES` are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetMinmax": {
        "signature": "void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, void * values)",
        "purpose": "get minimum and maximum pixel values",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_MINMAX`. </para> </listitem>",
            "reset": "<listitem> <para> If `GL_TRUE`, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If `GL_FALSE`, the minmax table is unaltered. </para> </listitem>",
            "format": "<listitem> <para> The format of the data to be returned in <parameter>values</parameter>. Must be one of `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, or `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "types": "<listitem> <para> The type of the data to be returned in <parameter>values</parameter>. Symbolic constants `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV` are accepted. </para> </listitem>",
            "values": "<listitem> <para> A pointer to storage for the returned values. </para> </listitem>"
        }
    },
    "glGetMinmaxParameterfv": {
        "signature": "void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params)",
        "purpose": "get minmax parameters",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_MINMAX`. </para> </listitem>",
            "pname": "<listitem> <para> The parameter to be retrieved. Must be one of `GL_MINMAX_FORMAT` or `GL_MINMAX_SINK`. </para> </listitem>",
            "params": "<listitem> <para> A pointer to storage for the retrieved parameters. </para> </listitem>"
        }
    },
    "glGetMinmaxParameteriv": {
        "signature": "void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "get minmax parameters",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_MINMAX`. </para> </listitem>",
            "pname": "<listitem> <para> The parameter to be retrieved. Must be one of `GL_MINMAX_FORMAT` or `GL_MINMAX_SINK`. </para> </listitem>",
            "params": "<listitem> <para> A pointer to storage for the retrieved parameters. </para> </listitem>"
        }
    },
    "glGetPixelMapfv": {
        "signature": "void glGetPixelMapfv(GLenum map, GLfloat * data)",
        "purpose": "return the specified pixel map",
        "parameters": {
            "map": "<listitem> <para> Specifies the name of the pixel map to return. Accepted values are `GL_PIXEL_MAP_I_TO_I`, `GL_PIXEL_MAP_S_TO_S`, `GL_PIXEL_MAP_I_TO_R`, `GL_PIXEL_MAP_I_TO_G`, `GL_PIXEL_MAP_I_TO_B`, `GL_PIXEL_MAP_I_TO_A`, `GL_PIXEL_MAP_R_TO_R`, `GL_PIXEL_MAP_G_TO_G`, `GL_PIXEL_MAP_B_TO_B`, and `GL_PIXEL_MAP_A_TO_A`. </para> </listitem>",
            "data": "<listitem> <para> Returns the pixel map contents. </para> </listitem>"
        }
    },
    "glGetPixelMapuiv": {
        "signature": "void glGetPixelMapuiv(GLenum map, GLuint * data)",
        "purpose": "return the specified pixel map",
        "parameters": {
            "map": "<listitem> <para> Specifies the name of the pixel map to return. Accepted values are `GL_PIXEL_MAP_I_TO_I`, `GL_PIXEL_MAP_S_TO_S`, `GL_PIXEL_MAP_I_TO_R`, `GL_PIXEL_MAP_I_TO_G`, `GL_PIXEL_MAP_I_TO_B`, `GL_PIXEL_MAP_I_TO_A`, `GL_PIXEL_MAP_R_TO_R`, `GL_PIXEL_MAP_G_TO_G`, `GL_PIXEL_MAP_B_TO_B`, and `GL_PIXEL_MAP_A_TO_A`. </para> </listitem>",
            "data": "<listitem> <para> Returns the pixel map contents. </para> </listitem>"
        }
    },
    "glGetPixelMapusv": {
        "signature": "void glGetPixelMapusv(GLenum map, GLushort * data)",
        "purpose": "return the specified pixel map",
        "parameters": {
            "map": "<listitem> <para> Specifies the name of the pixel map to return. Accepted values are `GL_PIXEL_MAP_I_TO_I`, `GL_PIXEL_MAP_S_TO_S`, `GL_PIXEL_MAP_I_TO_R`, `GL_PIXEL_MAP_I_TO_G`, `GL_PIXEL_MAP_I_TO_B`, `GL_PIXEL_MAP_I_TO_A`, `GL_PIXEL_MAP_R_TO_R`, `GL_PIXEL_MAP_G_TO_G`, `GL_PIXEL_MAP_B_TO_B`, and `GL_PIXEL_MAP_A_TO_A`. </para> </listitem>",
            "data": "<listitem> <para> Returns the pixel map contents. </para> </listitem>"
        }
    },
    "glGetPointerv": {
        "signature": "void glGetPointerv(GLenum pname, void ** params)",
        "purpose": "return the address of the specified pointer",
        "parameters": {
            "pname": "<listitem> <para> Specifies the array or buffer pointer to be returned. Symbolic constants `GL_COLOR_ARRAY_POINTER`, `GL_EDGE_FLAG_ARRAY_POINTER`, `GL_FOG_COORD_ARRAY_POINTER`, `GL_FEEDBACK_BUFFER_POINTER`, `GL_INDEX_ARRAY_POINTER`, `GL_NORMAL_ARRAY_POINTER`, `GL_SECONDARY_COLOR_ARRAY_POINTER`, `GL_SELECTION_BUFFER_POINTER`, `GL_TEXTURE_COORD_ARRAY_POINTER`, or `GL_VERTEX_ARRAY_POINTER` are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the pointer value specified by <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glGetPolygonStipple": {
        "signature": "void glGetPolygonStipple(GLubyte * pattern)",
        "purpose": "return the polygon stipple pattern",
        "parameters": {
            "pattern": "<listitem> <para> Returns the stipple pattern. The initial value is all 1's. </para> </listitem>"
        }
    },
    "glGetProgramiv": {
        "signature": "void glGetProgramiv(GLuint program, GLenum pname, GLint *params)",
        "purpose": "Returns a parameter from a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the object parameter. Accepted symbolic names are `GL_DELETE_STATUS`, `GL_LINK_STATUS`, `GL_VALIDATE_STATUS`, `GL_INFO_LOG_LENGTH`, `GL_ATTACHED_SHADERS`, `GL_ACTIVE_ATTRIBUTES`, `GL_ACTIVE_ATTRIBUTE_MAX_LENGTH`, `GL_ACTIVE_UNIFORMS`, `GL_ACTIVE_UNIFORM_MAX_LENGTH`.</para> </listitem>",
            "params": "<listitem> <para>Returns the requested object parameter.</para> </listitem>"
        }
    },
    "glGetProgramInfoLog": {
        "signature": "void glGetProgramInfoLog(GLuint program, GLsizei maxLength, GLsizei *length, GLchar *infoLog)",
        "purpose": "Returns the information log for a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object whose information log is to be queried.</para> </listitem>",
            "maxLength": "<listitem> <para>Specifies the size of the character buffer for storing the returned information log.</para> </listitem>",
            "length": "<listitem> <para>Returns the length of the string returned in <parameter>infoLog</parameter> (excluding the null terminator).</para> </listitem>",
            "infoLog": "<listitem> <para>Specifies an array of characters that is used to return the information log.</para> </listitem>"
        }
    },
    "glGetQueryiv": {
        "signature": "void glGetQueryiv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "return parameters of a query object target",
        "parameters": {
            "target": "<listitem> <para> Specifies a query object target. Must be `GL_SAMPLES_PASSED`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a query object target parameter. Accepted values are `GL_CURRENT_QUERY` or `GL_QUERY_COUNTER_BITS`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetQueryObjectiv": {
        "signature": "void glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params)",
        "purpose": "return parameters of a query object",
        "parameters": {
            "id": "<listitem> <para> Specifies the name of a query object. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a query object parameter. Accepted values are `GL_QUERY_RESULT` or `GL_QUERY_RESULT_AVAILABLE`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetQueryObjectuiv": {
        "signature": "void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params)",
        "purpose": "return parameters of a query object",
        "parameters": {
            "id": "<listitem> <para> Specifies the name of a query object. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a query object parameter. Accepted values are `GL_QUERY_RESULT` or `GL_QUERY_RESULT_AVAILABLE`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetSeparableFilter": {
        "signature": "void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span)",
        "purpose": "get separable convolution filter kernel images",
        "parameters": {
            "target": "<listitem> <para> The separable filter to be retrieved. Must be `GL_SEPARABLE_2D`. </para> </listitem>",
            "format": "<listitem> <para> Format of the output images. Must be one of `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR` `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, or `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Data type of components in the output images. Symbolic constants `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV` are accepted. </para> </listitem>",
            "row": "<listitem> <para> Pointer to storage for the row filter image. </para> </listitem>",
            "column": "<listitem> <para> Pointer to storage for the column filter image. </para> </listitem>",
            "span": "<listitem> <para> Pointer to storage for the span filter image (currently unused). </para> </listitem>"
        }
    },
    "glGetShaderiv": {
        "signature": "void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)",
        "purpose": "Returns a parameter from a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the shader object to be queried.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the object parameter. Accepted symbolic names are `GL_SHADER_TYPE`, `GL_DELETE_STATUS`, `GL_COMPILE_STATUS`, `GL_INFO_LOG_LENGTH`, `GL_SHADER_SOURCE_LENGTH`.</para> </listitem>",
            "params": "<listitem> <para>Returns the requested object parameter.</para> </listitem>"
        }
    },
    "glGetShaderInfoLog": {
        "signature": "void glGetShaderInfoLog(GLuint shader, GLsizei maxLength, GLsizei *length, GLchar *infoLog)",
        "purpose": "Returns the information log for a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the shader object whose information log is to be queried.</para> </listitem>",
            "maxLength": "<listitem> <para>Specifies the size of the character buffer for storing the returned information log.</para> </listitem>",
            "length": "<listitem> <para>Returns the length of the string returned in <parameter>infoLog</parameter> (excluding the null terminator).</para> </listitem>",
            "infoLog": "<listitem> <para>Specifies an array of characters that is used to return the information log.</para> </listitem>"
        }
    },
    "glGetShaderSource": {
        "signature": "void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)",
        "purpose": "Returns the source code string from a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the shader object to be queried.</para> </listitem>",
            "bufSize": "<listitem> <para>Specifies the size of the character buffer for storing the returned source code string.</para> </listitem>",
            "length": "<listitem> <para>Returns the length of the string returned in <parameter>source</parameter> (excluding the null terminator).</para> </listitem>",
            "source": "<listitem> <para>Specifies an array of characters that is used to return the source code string.</para> </listitem>"
        }
    },
    "glGetString": {
        "signature": "const GLubyte* glGetString(GLenum name)",
        "purpose": "return a string describing the current GL connection",
        "parameters": {
            "name": "<listitem> <para> Specifies a symbolic constant, one of `GL_VENDOR`, `GL_RENDERER`, `GL_VERSION`, `GL_SHADING_LANGUAGE_VERSION`, or `GL_EXTENSIONS`. </para> </listitem>"
        }
    },
    "glGetTexEnvfv": {
        "signature": "void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params)",
        "purpose": "return texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV`, `GL_TEXTURE_FILTER_CONTROL`, or `GL_POINT_SPRITE`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture environment parameter. Accepted values are `GL_TEXTURE_ENV_MODE`, `GL_TEXTURE_ENV_COLOR`, `GL_TEXTURE_LOD_BIAS`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetTexEnviv": {
        "signature": "void glGetTexEnviv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "return texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV`, `GL_TEXTURE_FILTER_CONTROL`, or `GL_POINT_SPRITE`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture environment parameter. Accepted values are `GL_TEXTURE_ENV_MODE`, `GL_TEXTURE_ENV_COLOR`, `GL_TEXTURE_LOD_BIAS`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetTexGendv": {
        "signature": "void glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params)",
        "purpose": "return texture coordinate generation parameters",
        "parameters": {
            "coord": "<listitem> <para> Specifies a texture coordinate. Must be `GL_S`, `GL_T`, `GL_R`, or `GL_Q`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of the value(s) to be returned. Must be either `GL_TEXTURE_GEN_MODE` or the name of one of the texture generation plane equations: `GL_OBJECT_PLANE` or `GL_EYE_PLANE`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetTexGenfv": {
        "signature": "void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params)",
        "purpose": "return texture coordinate generation parameters",
        "parameters": {
            "coord": "<listitem> <para> Specifies a texture coordinate. Must be `GL_S`, `GL_T`, `GL_R`, or `GL_Q`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of the value(s) to be returned. Must be either `GL_TEXTURE_GEN_MODE` or the name of one of the texture generation plane equations: `GL_OBJECT_PLANE` or `GL_EYE_PLANE`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetTexGeniv": {
        "signature": "void glGetTexGeniv(GLenum coord, GLenum pname, GLint * params)",
        "purpose": "return texture coordinate generation parameters",
        "parameters": {
            "coord": "<listitem> <para> Specifies a texture coordinate. Must be `GL_S`, `GL_T`, `GL_R`, or `GL_Q`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of the value(s) to be returned. Must be either `GL_TEXTURE_GEN_MODE` or the name of one of the texture generation plane equations: `GL_OBJECT_PLANE` or `GL_EYE_PLANE`. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetTexImage": {
        "signature": "void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * img)",
        "purpose": "return a texture image",
        "parameters": {
            "target": "<listitem> <para> Specifies which texture is to be obtained. `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, and `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z` are accepted. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation> is the <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>th mipmap reduction image. </para> </listitem>",
            "format": "<listitem> <para> Specifies a pixel format for the returned data. The supported formats are `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies a pixel type for the returned data. The supported types are `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "img": "<listitem> <para> Returns the texture image. Should be a pointer to an array of the type specified by <parameter>type</parameter>. </para> </listitem>"
        }
    },
    "glGetTexLevelParameterfv": {
        "signature": "void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params)",
        "purpose": "return texture parameter values for a specific level of detail",
        "parameters": {
            "target": "<listitem> <para> Specifies the symbolic name of the target texture, either `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, `GL_PROXY_TEXTURE_1D`, `GL_PROXY_TEXTURE_2D`, `GL_PROXY_TEXTURE_3D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`, or `GL_PROXY_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation> is the <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>th mipmap reduction image. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture parameter. `GL_TEXTURE_WIDTH`, `GL_TEXTURE_HEIGHT`, `GL_TEXTURE_DEPTH`, `GL_TEXTURE_INTERNAL_FORMAT`, `GL_TEXTURE_BORDER`, `GL_TEXTURE_RED_SIZE`, `GL_TEXTURE_GREEN_SIZE`, `GL_TEXTURE_BLUE_SIZE`, `GL_TEXTURE_ALPHA_SIZE`, `GL_TEXTURE_LUMINANCE_SIZE`, `GL_TEXTURE_INTENSITY_SIZE`, `GL_TEXTURE_DEPTH_SIZE`, `GL_TEXTURE_COMPRESSED`, and `GL_TEXTURE_COMPRESSED_IMAGE_SIZE` are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetTexLevelParameteriv": {
        "signature": "void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params)",
        "purpose": "return texture parameter values for a specific level of detail",
        "parameters": {
            "target": "<listitem> <para> Specifies the symbolic name of the target texture, either `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, `GL_PROXY_TEXTURE_1D`, `GL_PROXY_TEXTURE_2D`, `GL_PROXY_TEXTURE_3D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`, or `GL_PROXY_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation> is the <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>th mipmap reduction image. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture parameter. `GL_TEXTURE_WIDTH`, `GL_TEXTURE_HEIGHT`, `GL_TEXTURE_DEPTH`, `GL_TEXTURE_INTERNAL_FORMAT`, `GL_TEXTURE_BORDER`, `GL_TEXTURE_RED_SIZE`, `GL_TEXTURE_GREEN_SIZE`, `GL_TEXTURE_BLUE_SIZE`, `GL_TEXTURE_ALPHA_SIZE`, `GL_TEXTURE_LUMINANCE_SIZE`, `GL_TEXTURE_INTENSITY_SIZE`, `GL_TEXTURE_DEPTH_SIZE`, `GL_TEXTURE_COMPRESSED`, and `GL_TEXTURE_COMPRESSED_IMAGE_SIZE` are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the requested data. </para> </listitem>"
        }
    },
    "glGetTexParameterfv": {
        "signature": "void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params)",
        "purpose": "return texture parameter values",
        "parameters": {
            "target": "<listitem> <para> Specifies the symbolic name of the target texture. `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, and `GL_TEXTURE_CUBE_MAP` are accepted. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture parameter. `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MIN_LOD`, `GL_TEXTURE_MAX_LOD`, `GL_TEXTURE_BASE_LEVEL`, `GL_TEXTURE_MAX_LEVEL`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, `GL_TEXTURE_WRAP_R`, `GL_TEXTURE_BORDER_COLOR`, `GL_TEXTURE_PRIORITY`, `GL_TEXTURE_RESIDENT`, `GL_TEXTURE_COMPARE_MODE`, `GL_TEXTURE_COMPARE_FUNC`, `GL_DEPTH_TEXTURE_MODE`, and `GL_GENERATE_MIPMAP` are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the texture parameters. </para> </listitem>"
        }
    },
    "glGetTexParameteriv": {
        "signature": "void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params)",
        "purpose": "return texture parameter values",
        "parameters": {
            "target": "<listitem> <para> Specifies the symbolic name of the target texture. `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, and `GL_TEXTURE_CUBE_MAP` are accepted. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a texture parameter. `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MIN_LOD`, `GL_TEXTURE_MAX_LOD`, `GL_TEXTURE_BASE_LEVEL`, `GL_TEXTURE_MAX_LEVEL`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, `GL_TEXTURE_WRAP_R`, `GL_TEXTURE_BORDER_COLOR`, `GL_TEXTURE_PRIORITY`, `GL_TEXTURE_RESIDENT`, `GL_TEXTURE_COMPARE_MODE`, `GL_TEXTURE_COMPARE_FUNC`, `GL_DEPTH_TEXTURE_MODE`, and `GL_GENERATE_MIPMAP` are accepted. </para> </listitem>",
            "params": "<listitem> <para> Returns the texture parameters. </para> </listitem>"
        }
    },
    "glGetUniformfv": {
        "signature": "void glGetUniformfv(GLuint program, GLint location, GLfloat *params)",
        "purpose": "Returns the value of a uniform variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "location": "<listitem> <para>Specifies the location of the uniform variable to be queried.</para> </listitem>",
            "params": "<listitem> <para>Returns the value of the specified uniform variable.</para> </listitem>"
        }
    },
    "glGetUniformiv": {
        "signature": "void glGetUniformiv(GLuint program, GLint location, GLint *params)",
        "purpose": "Returns the value of a uniform variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "location": "<listitem> <para>Specifies the location of the uniform variable to be queried.</para> </listitem>",
            "params": "<listitem> <para>Returns the value of the specified uniform variable.</para> </listitem>"
        }
    },
    "glGetUniformLocation": {
        "signature": "GLint glGetUniformLocation(GLuint program, const GLchar *name)",
        "purpose": "Returns the location of a uniform variable",
        "parameters": {
            "program": "<listitem> <para>Specifies the program object to be queried.</para> </listitem>",
            "name": "<listitem> <para>Points to a null terminated string containing the name of the uniform variable whose location is to be queried.</para> </listitem>"
        }
    },
    "glGetVertexAttribdv": {
        "signature": "void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)",
        "purpose": "Return a generic vertex attribute parameter",
        "parameters": {
            "index": "<listitem> <para>Specifies the generic vertex attribute parameter to be queried.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are `GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING`, `GL_VERTEX_ATTRIB_ARRAY_ENABLED`, `GL_VERTEX_ATTRIB_ARRAY_SIZE`, `GL_VERTEX_ATTRIB_ARRAY_STRIDE`, `GL_VERTEX_ATTRIB_ARRAY_TYPE`, `GL_VERTEX_ATTRIB_ARRAY_NORMALIZED`, or `GL_CURRENT_VERTEX_ATTRIB`.</para> </listitem>",
            "params": "<listitem> <para>Returns the requested data.</para> </listitem>"
        }
    },
    "glGetVertexAttribfv": {
        "signature": "void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)",
        "purpose": "Return a generic vertex attribute parameter",
        "parameters": {
            "index": "<listitem> <para>Specifies the generic vertex attribute parameter to be queried.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are `GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING`, `GL_VERTEX_ATTRIB_ARRAY_ENABLED`, `GL_VERTEX_ATTRIB_ARRAY_SIZE`, `GL_VERTEX_ATTRIB_ARRAY_STRIDE`, `GL_VERTEX_ATTRIB_ARRAY_TYPE`, `GL_VERTEX_ATTRIB_ARRAY_NORMALIZED`, or `GL_CURRENT_VERTEX_ATTRIB`.</para> </listitem>",
            "params": "<listitem> <para>Returns the requested data.</para> </listitem>"
        }
    },
    "glGetVertexAttribiv": {
        "signature": "void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)",
        "purpose": "Return a generic vertex attribute parameter",
        "parameters": {
            "index": "<listitem> <para>Specifies the generic vertex attribute parameter to be queried.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are `GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING`, `GL_VERTEX_ATTRIB_ARRAY_ENABLED`, `GL_VERTEX_ATTRIB_ARRAY_SIZE`, `GL_VERTEX_ATTRIB_ARRAY_STRIDE`, `GL_VERTEX_ATTRIB_ARRAY_TYPE`, `GL_VERTEX_ATTRIB_ARRAY_NORMALIZED`, or `GL_CURRENT_VERTEX_ATTRIB`.</para> </listitem>",
            "params": "<listitem> <para>Returns the requested data.</para> </listitem>"
        }
    },
    "glGetVertexAttribPointerv": {
        "signature": "void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)",
        "purpose": "return the address of the specified generic vertex attribute pointer",
        "parameters": {
            "index": "<listitem> <para>Specifies the generic vertex attribute parameter to be returned.</para> </listitem>",
            "pname": "<listitem> <para>Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be `GL_VERTEX_ATTRIB_ARRAY_POINTER`.</para> </listitem>",
            "pointer": "<listitem> <para>Returns the pointer value.</para> </listitem>"
        }
    },
    "glHint": {
        "signature": "void glHint(GLenum target, GLenum mode)",
        "purpose": "specify implementation-specific hints",
        "parameters": {
            "target": "<listitem> <para> Specifies a symbolic constant indicating the behavior to be controlled. `GL_FOG_HINT`, `GL_GENERATE_MIPMAP_HINT`, `GL_LINE_SMOOTH_HINT`, `GL_PERSPECTIVE_CORRECTION_HINT`, `GL_POINT_SMOOTH_HINT`, `GL_POLYGON_SMOOTH_HINT`, `GL_TEXTURE_COMPRESSION_HINT`, and `GL_FRAGMENT_SHADER_DERIVATIVE_HINT` are accepted. </para> </listitem>",
            "mode": "<listitem> <para> Specifies a symbolic constant indicating the desired behavior. `GL_FASTEST`, `GL_NICEST`, and `GL_DONT_CARE` are accepted. </para> </listitem>"
        }
    },
    "glHistogram": {
        "signature": "void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)",
        "purpose": "define histogram table",
        "parameters": {
            "target": "<listitem> <para> The histogram whose parameters are to be set. Must be one of `GL_HISTOGRAM` or `GL_PROXY_HISTOGRAM`. </para> </listitem>",
            "width": "<listitem> <para> The number of entries in the histogram table. Must be a power of 2. </para> </listitem>",
            "internalformat": "<listitem> <para> The format of entries in the histogram table. Must be one of `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, or `GL_RGBA16`. </para> </listitem>",
            "sink": "<listitem> <para> If `GL_TRUE`, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If `GL_FALSE`, pixels will proceed to the minmax process after histogramming. </para> </listitem>"
        }
    },
    "glIndexs": {
        "signature": "void glIndexs(GLshort c)",
        "purpose": "set the current color index",
        "parameters": {
            "c": "<listitem> <para> Specifies the new value for the current color index. </para> <para> </para> </listitem>"
        }
    },
    "glIndexi": {
        "signature": "void glIndexi(GLint c)",
        "purpose": "set the current color index",
        "parameters": {
            "c": "<listitem> <para> Specifies the new value for the current color index. </para> <para> </para> </listitem>"
        }
    },
    "glIndexf": {
        "signature": "void glIndexf(GLfloat c)",
        "purpose": "set the current color index",
        "parameters": {
            "c": "<listitem> <para> Specifies the new value for the current color index. </para> <para> </para> </listitem>"
        }
    },
    "glIndexd": {
        "signature": "void glIndexd(GLdouble c)",
        "purpose": "set the current color index",
        "parameters": {
            "c": "<listitem> <para> Specifies the new value for the current color index. </para> <para> </para> </listitem>"
        }
    },
    "glIndexub": {
        "signature": "void glIndexub(GLubyte c)",
        "purpose": "set the current color index",
        "parameters": {
            "c": "<listitem> <para> Specifies the new value for the current color index. </para> <para> </para> </listitem>"
        }
    },
    "glIndexsv": {
        "signature": "void glIndexsv(const GLshort * c)",
        "purpose": "set the current color index",
        "parameters": {
            "c": "<listitem> <para> Specifies the new value for the current color index. </para> <para> </para> </listitem>"
        }
    },
    "glIndexiv": {
        "signature": "void glIndexiv(const GLint * c)",
        "purpose": "set the current color index",
        "parameters": {
            "c": "<listitem> <para> Specifies the new value for the current color index. </para> <para> </para> </listitem>"
        }
    },
    "glIndexfv": {
        "signature": "void glIndexfv(const GLfloat * c)",
        "purpose": "set the current color index",
        "parameters": {
            "c": "<listitem> <para> Specifies the new value for the current color index. </para> <para> </para> </listitem>"
        }
    },
    "glIndexdv": {
        "signature": "void glIndexdv(const GLdouble * c)",
        "purpose": "set the current color index",
        "parameters": {
            "c": "<listitem> <para> Specifies the new value for the current color index. </para> <para> </para> </listitem>"
        }
    },
    "glIndexubv": {
        "signature": "void glIndexubv(const GLubyte * c)",
        "purpose": "set the current color index",
        "parameters": {
            "c": "<listitem> <para> Specifies the new value for the current color index. </para> <para> </para> </listitem>"
        }
    },
    "glIndexMask": {
        "signature": "void glIndexMask(GLuint mask)",
        "purpose": "control the writing of individual bits in the color index buffers",
        "parameters": {
            "mask": "<listitem> <para> Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers. Initially, the mask is all 1's. </para> </listitem>"
        }
    },
    "glIndexPointer": {
        "signature": "void glIndexPointer(GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of color indexes",
        "parameters": {
            "type": "<listitem> <para> Specifies the data type of each color index in the array. Symbolic constants `GL_UNSIGNED_BYTE`, `GL_SHORT`, `GL_INT`, `GL_FLOAT`, and `GL_DOUBLE` are accepted. The initial value is `GL_FLOAT`. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive color indexes. If <parameter>stride</parameter> is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first index in the array. The initial value is 0. </para> </listitem>"
        }
    },
    "glInitNames": {
        "signature": "void glInitNames( void)",
        "purpose": "initialize the name stack",
        "parameters": {}
    },
    "glInterleavedArrays": {
        "signature": "void glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer)",
        "purpose": "simultaneously specify and enable several interleaved arrays",
        "parameters": {
            "format": "<listitem> <para> Specifies the type of array to enable. Symbolic constants `GL_V2F`, `GL_V3F`, `GL_C4UB_V2F`, `GL_C4UB_V3F`, `GL_C3F_V3F`, `GL_N3F_V3F`, `GL_C4F_N3F_V3F`, `GL_T2F_V3F`, `GL_T4F_V4F`, `GL_T2F_C4UB_V3F`, `GL_T2F_C3F_V3F`, `GL_T2F_N3F_V3F`, `GL_T2F_C4F_N3F_V3F`, and `GL_T4F_C4F_N3F_V4F` are accepted. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the offset in bytes between each aggregate array element. </para> </listitem>"
        }
    },
    "glIsBuffer": {
        "signature": "GLboolean glIsBuffer(GLuint buffer)",
        "purpose": "determine if a name corresponds to a buffer object",
        "parameters": {
            "buffer": "<listitem> <para> Specifies a value that may be the name of a buffer object. </para> </listitem>"
        }
    },
    "glIsEnabled": {
        "signature": "GLboolean glIsEnabled(GLenum cap)",
        "purpose": "test whether a capability is enabled",
        "parameters": {
            "cap": "<listitem> <para> Specifies a symbolic constant indicating a GL capability. </para> </listitem>"
        }
    },
    "glIsList": {
        "signature": "GLboolean glIsList(GLuint list)",
        "purpose": "determine if a name corresponds to a display list",
        "parameters": {
            "list": "<listitem> <para> Specifies a potential display list name. </para> </listitem>"
        }
    },
    "glIsProgram": {
        "signature": "GLboolean glIsProgram(GLuint program)",
        "purpose": "Determines if a name corresponds to a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies a potential program object.</para> </listitem>"
        }
    },
    "glIsQuery": {
        "signature": "GLboolean glIsQuery(GLuint id)",
        "purpose": "determine if a name corresponds to a query object",
        "parameters": {
            "id": "<listitem> <para> Specifies a value that may be the name of a query object. </para> </listitem>"
        }
    },
    "glIsShader": {
        "signature": "GLboolean glIsShader(GLuint shader)",
        "purpose": "Determines if a name corresponds to a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies a potential shader object.</para> </listitem>"
        }
    },
    "glIsTexture": {
        "signature": "GLboolean glIsTexture(GLuint texture)",
        "purpose": "determine if a name corresponds to a texture",
        "parameters": {
            "texture": "<listitem> <para> Specifies a value that may be the name of a texture. </para> </listitem>"
        }
    },
    "glLightf": {
        "signature": "void glLightf(GLenum light, GLenum pname, GLfloat param)",
        "purpose": "set light source parameters",
        "parameters": {
            "light": "<listitem> <para> Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form `GL_LIGHT` <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to the value of `GL_MAX_LIGHTS` - 1. </para> </listitem>",
            "pname": "<listitem> <para> Specifies a single-valued light source parameter for <parameter>light</parameter>. `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that parameter <parameter>pname</parameter> of light source <parameter>light</parameter> will be set to. </para> </listitem>"
        }
    },
    "glLighti": {
        "signature": "void glLighti(GLenum light, GLenum pname, GLint param)",
        "purpose": "set light source parameters",
        "parameters": {
            "light": "<listitem> <para> Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form `GL_LIGHT` <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to the value of `GL_MAX_LIGHTS` - 1. </para> </listitem>",
            "pname": "<listitem> <para> Specifies a single-valued light source parameter for <parameter>light</parameter>. `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that parameter <parameter>pname</parameter> of light source <parameter>light</parameter> will be set to. </para> </listitem>"
        }
    },
    "glLightfv": {
        "signature": "void glLightfv(GLenum light, GLenum pname, const GLfloat * params)",
        "purpose": "set light source parameters",
        "parameters": {
            "light": "<listitem> <para> Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form `GL_LIGHT` <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to the value of `GL_MAX_LIGHTS` - 1. </para> </listitem>",
            "pname": "<listitem> <para> Specifies a single-valued light source parameter for <parameter>light</parameter>. `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that parameter <parameter>pname</parameter> of light source <parameter>light</parameter> will be set to. </para> </listitem>"
        }
    },
    "glLightiv": {
        "signature": "void glLightiv(GLenum light, GLenum pname, const GLint * params)",
        "purpose": "set light source parameters",
        "parameters": {
            "light": "<listitem> <para> Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form `GL_LIGHT` <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to the value of `GL_MAX_LIGHTS` - 1. </para> </listitem>",
            "pname": "<listitem> <para> Specifies a single-valued light source parameter for <parameter>light</parameter>. `GL_SPOT_EXPONENT`, `GL_SPOT_CUTOFF`, `GL_CONSTANT_ATTENUATION`, `GL_LINEAR_ATTENUATION`, and `GL_QUADRATIC_ATTENUATION` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that parameter <parameter>pname</parameter> of light source <parameter>light</parameter> will be set to. </para> </listitem>"
        }
    },
    "glLightModelf": {
        "signature": "void glLightModelf(GLenum pname, GLfloat param)",
        "purpose": "set the lighting model parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued lighting model parameter. `GL_LIGHT_MODEL_LOCAL_VIEWER`, `GL_LIGHT_MODEL_COLOR_CONTROL`, and `GL_LIGHT_MODEL_TWO_SIDE` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>param</parameter> will be set to. </para> </listitem>"
        }
    },
    "glLightModeli": {
        "signature": "void glLightModeli(GLenum pname, GLint param)",
        "purpose": "set the lighting model parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued lighting model parameter. `GL_LIGHT_MODEL_LOCAL_VIEWER`, `GL_LIGHT_MODEL_COLOR_CONTROL`, and `GL_LIGHT_MODEL_TWO_SIDE` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>param</parameter> will be set to. </para> </listitem>"
        }
    },
    "glLightModelfv": {
        "signature": "void glLightModelfv(GLenum pname, const GLfloat * params)",
        "purpose": "set the lighting model parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued lighting model parameter. `GL_LIGHT_MODEL_LOCAL_VIEWER`, `GL_LIGHT_MODEL_COLOR_CONTROL`, and `GL_LIGHT_MODEL_TWO_SIDE` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>param</parameter> will be set to. </para> </listitem>"
        }
    },
    "glLightModeliv": {
        "signature": "void glLightModeliv(GLenum pname, const GLint * params)",
        "purpose": "set the lighting model parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued lighting model parameter. `GL_LIGHT_MODEL_LOCAL_VIEWER`, `GL_LIGHT_MODEL_COLOR_CONTROL`, and `GL_LIGHT_MODEL_TWO_SIDE` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>param</parameter> will be set to. </para> </listitem>"
        }
    },
    "glLineStipple": {
        "signature": "void glLineStipple(GLint factor, GLushort pattern)",
        "purpose": "specify the line stipple pattern",
        "parameters": {
            "factor": "<listitem> <para> Specifies a multiplier for each bit in the line stipple pattern. If <parameter>factor</parameter> is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. <parameter>factor</parameter> is clamped to the range [1, 256] and defaults to 1. </para> </listitem>",
            "pattern": "<listitem> <para> Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's. </para> </listitem>"
        }
    },
    "glLineWidth": {
        "signature": "void glLineWidth(GLfloat width)",
        "purpose": "specify the width of rasterized lines",
        "parameters": {
            "width": "<listitem> <para> Specifies the width of rasterized lines. The initial value is 1. </para> </listitem>"
        }
    },
    "glLinkProgram": {
        "signature": "void glLinkProgram(GLuint program)",
        "purpose": "Links a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object to be linked.</para> </listitem>"
        }
    },
    "glListBase": {
        "signature": "void glListBase(GLuint base)",
        "purpose": "set the display-list base for ",
        "parameters": {
            "base": "<listitem> <para> Specifies an integer offset that will be added to <citerefentry><refentrytitle>glCallLists</refentrytitle></citerefentry> offsets to generate display-list names. The initial value is 0. </para> </listitem>"
        }
    },
    "glLoadIdentity": {
        "signature": "void glLoadIdentity( void)",
        "purpose": "replace the current matrix with the identity matrix",
        "parameters": {}
    },
    "glLoadMatrixd": {
        "signature": "void glLoadMatrixd(const GLdouble * m)",
        "purpose": "replace the current matrix with the specified matrix",
        "parameters": {
            "m": "<listitem> <para> Specifies a pointer to 16 consecutive values, which are used as the elements of a <inlineequation><math> <mrow> <mn>4</mn> <mo /> <mn>4</mn> </mrow> </math></inlineequation> column-major matrix. </para> </listitem>"
        }
    },
    "glLoadMatrixf": {
        "signature": "void glLoadMatrixf(const GLfloat * m)",
        "purpose": "replace the current matrix with the specified matrix",
        "parameters": {
            "m": "<listitem> <para> Specifies a pointer to 16 consecutive values, which are used as the elements of a <inlineequation><math> <mrow> <mn>4</mn> <mo /> <mn>4</mn> </mrow> </math></inlineequation> column-major matrix. </para> </listitem>"
        }
    },
    "glLoadName": {
        "signature": "void glLoadName(GLuint name)",
        "purpose": "load a name onto the name stack",
        "parameters": {
            "name": "<listitem> <para> Specifies a name that will replace the top value on the name stack. </para> </listitem>"
        }
    },
    "glLoadTransposeMatrixd": {
        "signature": "void glLoadTransposeMatrixd(const GLdouble * m)",
        "purpose": "replace the current matrix with the specified row-major ordered matrix",
        "parameters": {
            "m": "<listitem> <para> Specifies a pointer to 16 consecutive values, which are used as the elements of a <inlineequation><math> <mrow> <mn>4</mn> <mo /> <mn>4</mn> </mrow> </math></inlineequation> row-major matrix. </para> </listitem>"
        }
    },
    "glLoadTransposeMatrixf": {
        "signature": "void glLoadTransposeMatrixf(const GLfloat * m)",
        "purpose": "replace the current matrix with the specified row-major ordered matrix",
        "parameters": {
            "m": "<listitem> <para> Specifies a pointer to 16 consecutive values, which are used as the elements of a <inlineequation><math> <mrow> <mn>4</mn> <mo /> <mn>4</mn> </mrow> </math></inlineequation> row-major matrix. </para> </listitem>"
        }
    },
    "glLogicOp": {
        "signature": "void glLogicOp(GLenum opcode)",
        "purpose": "specify a logical pixel operation for color index rendering",
        "parameters": {
            "opcode": "<listitem> <para> Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: `GL_CLEAR`, `GL_SET`, `GL_COPY`, `GL_COPY_INVERTED`, `GL_NOOP`, `GL_INVERT`, `GL_AND`, `GL_NAND`, `GL_OR`, `GL_NOR`, `GL_XOR`, `GL_EQUIV`, `GL_AND_REVERSE`, `GL_AND_INVERTED`, `GL_OR_REVERSE`, and `GL_OR_INVERTED`. The initial value is `GL_COPY`. </para> </listitem>"
        }
    },
    "glMap1f": {
        "signature": "void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points)",
        "purpose": "define a one-dimensional evaluator",
        "parameters": {
            "target": "<listitem> <para> Specifies the kind of values that are generated by the evaluator. Symbolic constants `GL_MAP1_VERTEX_3`, `GL_MAP1_VERTEX_4`, `GL_MAP1_INDEX`, `GL_MAP1_COLOR_4`, `GL_MAP1_NORMAL`, `GL_MAP1_TEXTURE_COORD_1`, `GL_MAP1_TEXTURE_COORD_2`, `GL_MAP1_TEXTURE_COORD_3`, and `GL_MAP1_TEXTURE_COORD_4` are accepted. </para> </listitem>",
            "u1": "<listitem> <para> Specify a linear mapping of <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation>, as presented to <citerefentry><refentrytitle>glEvalCoord1</refentrytitle></citerefentry>, to <inlineequation><math> <mover><mi mathvariant=\"italic\">u</mi><mo /></mover> </math></inlineequation>, the variable that is evaluated by the equations specified by this command. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in <parameter>points</parameter>. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. </para> </listitem>",
            "order": "<listitem> <para> Specifies the number of control points. Must be positive. </para> </listitem>",
            "points": "<listitem> <para> Specifies a pointer to the array of control points. </para> </listitem>"
        }
    },
    "glMap1d": {
        "signature": "void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points)",
        "purpose": "define a one-dimensional evaluator",
        "parameters": {
            "target": "<listitem> <para> Specifies the kind of values that are generated by the evaluator. Symbolic constants `GL_MAP1_VERTEX_3`, `GL_MAP1_VERTEX_4`, `GL_MAP1_INDEX`, `GL_MAP1_COLOR_4`, `GL_MAP1_NORMAL`, `GL_MAP1_TEXTURE_COORD_1`, `GL_MAP1_TEXTURE_COORD_2`, `GL_MAP1_TEXTURE_COORD_3`, and `GL_MAP1_TEXTURE_COORD_4` are accepted. </para> </listitem>",
            "u1": "<listitem> <para> Specify a linear mapping of <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation>, as presented to <citerefentry><refentrytitle>glEvalCoord1</refentrytitle></citerefentry>, to <inlineequation><math> <mover><mi mathvariant=\"italic\">u</mi><mo /></mover> </math></inlineequation>, the variable that is evaluated by the equations specified by this command. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in <parameter>points</parameter>. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. </para> </listitem>",
            "order": "<listitem> <para> Specifies the number of control points. Must be positive. </para> </listitem>",
            "points": "<listitem> <para> Specifies a pointer to the array of control points. </para> </listitem>"
        }
    },
    "glMap2f": {
        "signature": "void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points)",
        "purpose": "define a two-dimensional evaluator",
        "parameters": {
            "target": "<listitem> <para> Specifies the kind of values that are generated by the evaluator. Symbolic constants `GL_MAP2_VERTEX_3`, `GL_MAP2_VERTEX_4`, `GL_MAP2_INDEX`, `GL_MAP2_COLOR_4`, `GL_MAP2_NORMAL`, `GL_MAP2_TEXTURE_COORD_1`, `GL_MAP2_TEXTURE_COORD_2`, `GL_MAP2_TEXTURE_COORD_3`, and `GL_MAP2_TEXTURE_COORD_4` are accepted. </para> </listitem>",
            "u1": "<listitem> <para> Specify a linear mapping of <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation>, as presented to <citerefentry><refentrytitle>glEvalCoord2</refentrytitle></citerefentry>, to <inlineequation><math> <mover><mi mathvariant=\"italic\">u</mi><mo /></mover> </math></inlineequation>, one of the two variables that are evaluated by the equations specified by this command. Initially, <parameter>u1</parameter> is 0 and <parameter>u2</parameter> is 1. </para> </listitem>",
            "ustride": "<listitem> <para> Specifies the number of floats or doubles between the beginning of control point <inlineequation><math> <msub><mi mathvariant=\"italic\">R</mi> <mi mathvariant=\"italic\">ij</mi> </msub> </math></inlineequation> and the beginning of control point <inlineequation><math> <msub><mi mathvariant=\"italic\">R</mi> <mfenced open=\"\" close=\"\"> <mrow> <mfenced open=\"(\" close=\")\"> <mrow> <mi mathvariant=\"italic\">i</mi> <mo>+</mo> <mn>1</mn> </mrow> </mfenced> <mo /> <mi mathvariant=\"italic\">j</mi> </mrow> </mfenced> </msub> </math></inlineequation>, where <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation> and <inlineequation><math><mi mathvariant=\"italic\">j</mi></math></inlineequation> are the <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> and <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of <parameter>ustride</parameter> is 0. </para> </listitem>",
            "uorder": "<listitem> <para> Specifies the dimension of the control point array in the <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> axis. Must be positive. The initial value is 1. </para> </listitem>",
            "v1": "<listitem> <para> Specify a linear mapping of <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation>, as presented to <citerefentry><refentrytitle>glEvalCoord2</refentrytitle></citerefentry>, to <inlineequation><math> <mover><mi mathvariant=\"italic\">v</mi><mo /></mover> </math></inlineequation>, one of the two variables that are evaluated by the equations specified by this command. Initially, <parameter>v1</parameter> is 0 and <parameter>v2</parameter> is 1. </para> </listitem>",
            "vstride": "<listitem> <para> Specifies the number of floats or doubles between the beginning of control point <inlineequation><math> <msub><mi mathvariant=\"italic\">R</mi> <mi mathvariant=\"italic\">ij</mi> </msub> </math></inlineequation> and the beginning of control point <inlineequation><math> <msub><mi mathvariant=\"italic\">R</mi> <mfenced open=\"\" close=\"\"> <mrow> <mi mathvariant=\"italic\">i</mi> <mo /> <mfenced open=\"(\" close=\")\"> <mrow> <mi mathvariant=\"italic\">j</mi> <mo>+</mo> <mn>1</mn> </mrow> </mfenced> </mrow> </mfenced> </msub> </math></inlineequation>, where <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation> and <inlineequation><math><mi mathvariant=\"italic\">j</mi></math></inlineequation> are the <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> and <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of <parameter>vstride</parameter> is 0. </para> </listitem>",
            "vorder": "<listitem> <para> Specifies the dimension of the control point array in the <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> axis. Must be positive. The initial value is 1. </para> </listitem>",
            "points": "<listitem> <para> Specifies a pointer to the array of control points. </para> </listitem>"
        }
    },
    "glMap2d": {
        "signature": "void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points)",
        "purpose": "define a two-dimensional evaluator",
        "parameters": {
            "target": "<listitem> <para> Specifies the kind of values that are generated by the evaluator. Symbolic constants `GL_MAP2_VERTEX_3`, `GL_MAP2_VERTEX_4`, `GL_MAP2_INDEX`, `GL_MAP2_COLOR_4`, `GL_MAP2_NORMAL`, `GL_MAP2_TEXTURE_COORD_1`, `GL_MAP2_TEXTURE_COORD_2`, `GL_MAP2_TEXTURE_COORD_3`, and `GL_MAP2_TEXTURE_COORD_4` are accepted. </para> </listitem>",
            "u1": "<listitem> <para> Specify a linear mapping of <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation>, as presented to <citerefentry><refentrytitle>glEvalCoord2</refentrytitle></citerefentry>, to <inlineequation><math> <mover><mi mathvariant=\"italic\">u</mi><mo /></mover> </math></inlineequation>, one of the two variables that are evaluated by the equations specified by this command. Initially, <parameter>u1</parameter> is 0 and <parameter>u2</parameter> is 1. </para> </listitem>",
            "ustride": "<listitem> <para> Specifies the number of floats or doubles between the beginning of control point <inlineequation><math> <msub><mi mathvariant=\"italic\">R</mi> <mi mathvariant=\"italic\">ij</mi> </msub> </math></inlineequation> and the beginning of control point <inlineequation><math> <msub><mi mathvariant=\"italic\">R</mi> <mfenced open=\"\" close=\"\"> <mrow> <mfenced open=\"(\" close=\")\"> <mrow> <mi mathvariant=\"italic\">i</mi> <mo>+</mo> <mn>1</mn> </mrow> </mfenced> <mo /> <mi mathvariant=\"italic\">j</mi> </mrow> </mfenced> </msub> </math></inlineequation>, where <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation> and <inlineequation><math><mi mathvariant=\"italic\">j</mi></math></inlineequation> are the <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> and <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of <parameter>ustride</parameter> is 0. </para> </listitem>",
            "uorder": "<listitem> <para> Specifies the dimension of the control point array in the <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> axis. Must be positive. The initial value is 1. </para> </listitem>",
            "v1": "<listitem> <para> Specify a linear mapping of <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation>, as presented to <citerefentry><refentrytitle>glEvalCoord2</refentrytitle></citerefentry>, to <inlineequation><math> <mover><mi mathvariant=\"italic\">v</mi><mo /></mover> </math></inlineequation>, one of the two variables that are evaluated by the equations specified by this command. Initially, <parameter>v1</parameter> is 0 and <parameter>v2</parameter> is 1. </para> </listitem>",
            "vstride": "<listitem> <para> Specifies the number of floats or doubles between the beginning of control point <inlineequation><math> <msub><mi mathvariant=\"italic\">R</mi> <mi mathvariant=\"italic\">ij</mi> </msub> </math></inlineequation> and the beginning of control point <inlineequation><math> <msub><mi mathvariant=\"italic\">R</mi> <mfenced open=\"\" close=\"\"> <mrow> <mi mathvariant=\"italic\">i</mi> <mo /> <mfenced open=\"(\" close=\")\"> <mrow> <mi mathvariant=\"italic\">j</mi> <mo>+</mo> <mn>1</mn> </mrow> </mfenced> </mrow> </mfenced> </msub> </math></inlineequation>, where <inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation> and <inlineequation><math><mi mathvariant=\"italic\">j</mi></math></inlineequation> are the <inlineequation><math><mi mathvariant=\"italic\">u</mi></math></inlineequation> and <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of <parameter>vstride</parameter> is 0. </para> </listitem>",
            "vorder": "<listitem> <para> Specifies the dimension of the control point array in the <inlineequation><math><mi mathvariant=\"italic\">v</mi></math></inlineequation> axis. Must be positive. The initial value is 1. </para> </listitem>",
            "points": "<listitem> <para> Specifies a pointer to the array of control points. </para> </listitem>"
        }
    },
    "glMapBuffer": {
        "signature": "void * glMapBuffer(GLenum target, GLenum access)",
        "purpose": "map a buffer object's data store",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object being mapped. The symbolic constant must be `GL_ARRAY_BUFFER`, `GL_ELEMENT_ARRAY_BUFFER`, `GL_PIXEL_PACK_BUFFER`, or `GL_PIXEL_UNPACK_BUFFER`. </para> </listitem>",
            "access": "<listitem> <para> Specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be `GL_READ_ONLY`, `GL_WRITE_ONLY`, or `GL_READ_WRITE`. </para> </listitem>"
        }
    },
    "glUnmapBuffer": {
        "signature": "GLboolean glUnmapBuffer(GLenum target)",
        "purpose": "map a buffer object's data store",
        "parameters": {
            "target": "<listitem> <para> Specifies the target buffer object being mapped. The symbolic constant must be `GL_ARRAY_BUFFER`, `GL_ELEMENT_ARRAY_BUFFER`, `GL_PIXEL_PACK_BUFFER`, or `GL_PIXEL_UNPACK_BUFFER`. </para> </listitem>",
            "access": "<listitem> <para> Specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be `GL_READ_ONLY`, `GL_WRITE_ONLY`, or `GL_READ_WRITE`. </para> </listitem>"
        }
    },
    "glMapGrid1d": {
        "signature": "void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)",
        "purpose": "define a one- or two-dimensional mesh",
        "parameters": {
            "un": "<listitem> <para> Specifies the number of partitions in the grid range interval [<parameter>u1</parameter>, <parameter>u2</parameter>]. Must be positive. </para> </listitem>",
            "u1": "<listitem> <para> Specify the mappings for integer grid domain values <inlineequation><math> <mrow> <mi mathvariant=\"italic\">i</mi> <mo>=</mo> <mn>0</mn> </mrow> </math></inlineequation> and <inlineequation><math> <mrow> <mi mathvariant=\"italic\">i</mi> <mo>=</mo> <mi mathvariant=\"italic\">un</mi> </mrow> </math></inlineequation>. </para> </listitem>",
            "vn": "<listitem> <para> Specifies the number of partitions in the grid range interval [<parameter>v1</parameter>, <parameter>v2</parameter>] (<function>glMapGrid2</function> only). </para> </listitem>",
            "v1": "<listitem> <para> Specify the mappings for integer grid domain values <inlineequation><math> <mrow> <mi mathvariant=\"italic\">j</mi> <mo>=</mo> <mn>0</mn> </mrow> </math></inlineequation> and <inlineequation><math> <mrow> <mi mathvariant=\"italic\">j</mi> <mo>=</mo> <mi mathvariant=\"italic\">vn</mi> </mrow> </math></inlineequation> (<function>glMapGrid2</function> only). </para> </listitem>"
        }
    },
    "glMapGrid1f": {
        "signature": "void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)",
        "purpose": "define a one- or two-dimensional mesh",
        "parameters": {
            "un": "<listitem> <para> Specifies the number of partitions in the grid range interval [<parameter>u1</parameter>, <parameter>u2</parameter>]. Must be positive. </para> </listitem>",
            "u1": "<listitem> <para> Specify the mappings for integer grid domain values <inlineequation><math> <mrow> <mi mathvariant=\"italic\">i</mi> <mo>=</mo> <mn>0</mn> </mrow> </math></inlineequation> and <inlineequation><math> <mrow> <mi mathvariant=\"italic\">i</mi> <mo>=</mo> <mi mathvariant=\"italic\">un</mi> </mrow> </math></inlineequation>. </para> </listitem>",
            "vn": "<listitem> <para> Specifies the number of partitions in the grid range interval [<parameter>v1</parameter>, <parameter>v2</parameter>] (<function>glMapGrid2</function> only). </para> </listitem>",
            "v1": "<listitem> <para> Specify the mappings for integer grid domain values <inlineequation><math> <mrow> <mi mathvariant=\"italic\">j</mi> <mo>=</mo> <mn>0</mn> </mrow> </math></inlineequation> and <inlineequation><math> <mrow> <mi mathvariant=\"italic\">j</mi> <mo>=</mo> <mi mathvariant=\"italic\">vn</mi> </mrow> </math></inlineequation> (<function>glMapGrid2</function> only). </para> </listitem>"
        }
    },
    "glMapGrid2d": {
        "signature": "void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)",
        "purpose": "define a one- or two-dimensional mesh",
        "parameters": {
            "un": "<listitem> <para> Specifies the number of partitions in the grid range interval [<parameter>u1</parameter>, <parameter>u2</parameter>]. Must be positive. </para> </listitem>",
            "u1": "<listitem> <para> Specify the mappings for integer grid domain values <inlineequation><math> <mrow> <mi mathvariant=\"italic\">i</mi> <mo>=</mo> <mn>0</mn> </mrow> </math></inlineequation> and <inlineequation><math> <mrow> <mi mathvariant=\"italic\">i</mi> <mo>=</mo> <mi mathvariant=\"italic\">un</mi> </mrow> </math></inlineequation>. </para> </listitem>",
            "vn": "<listitem> <para> Specifies the number of partitions in the grid range interval [<parameter>v1</parameter>, <parameter>v2</parameter>] (<function>glMapGrid2</function> only). </para> </listitem>",
            "v1": "<listitem> <para> Specify the mappings for integer grid domain values <inlineequation><math> <mrow> <mi mathvariant=\"italic\">j</mi> <mo>=</mo> <mn>0</mn> </mrow> </math></inlineequation> and <inlineequation><math> <mrow> <mi mathvariant=\"italic\">j</mi> <mo>=</mo> <mi mathvariant=\"italic\">vn</mi> </mrow> </math></inlineequation> (<function>glMapGrid2</function> only). </para> </listitem>"
        }
    },
    "glMapGrid2f": {
        "signature": "void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)",
        "purpose": "define a one- or two-dimensional mesh",
        "parameters": {
            "un": "<listitem> <para> Specifies the number of partitions in the grid range interval [<parameter>u1</parameter>, <parameter>u2</parameter>]. Must be positive. </para> </listitem>",
            "u1": "<listitem> <para> Specify the mappings for integer grid domain values <inlineequation><math> <mrow> <mi mathvariant=\"italic\">i</mi> <mo>=</mo> <mn>0</mn> </mrow> </math></inlineequation> and <inlineequation><math> <mrow> <mi mathvariant=\"italic\">i</mi> <mo>=</mo> <mi mathvariant=\"italic\">un</mi> </mrow> </math></inlineequation>. </para> </listitem>",
            "vn": "<listitem> <para> Specifies the number of partitions in the grid range interval [<parameter>v1</parameter>, <parameter>v2</parameter>] (<function>glMapGrid2</function> only). </para> </listitem>",
            "v1": "<listitem> <para> Specify the mappings for integer grid domain values <inlineequation><math> <mrow> <mi mathvariant=\"italic\">j</mi> <mo>=</mo> <mn>0</mn> </mrow> </math></inlineequation> and <inlineequation><math> <mrow> <mi mathvariant=\"italic\">j</mi> <mo>=</mo> <mi mathvariant=\"italic\">vn</mi> </mrow> </math></inlineequation> (<function>glMapGrid2</function> only). </para> </listitem>"
        }
    },
    "glMaterialf": {
        "signature": "void glMaterialf(GLenum face, GLenum pname, GLfloat param)",
        "purpose": "specify material parameters for the lighting model",
        "parameters": {
            "face": "<listitem> <para> Specifies which face or faces are being updated. Must be one of `GL_FRONT`, `GL_BACK`, or `GL_FRONT_AND_BACK`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the single-valued material parameter of the face or faces that is being updated. Must be `GL_SHININESS`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that parameter `GL_SHININESS` will be set to. </para> </listitem>"
        }
    },
    "glMateriali": {
        "signature": "void glMateriali(GLenum face, GLenum pname, GLint param)",
        "purpose": "specify material parameters for the lighting model",
        "parameters": {
            "face": "<listitem> <para> Specifies which face or faces are being updated. Must be one of `GL_FRONT`, `GL_BACK`, or `GL_FRONT_AND_BACK`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the single-valued material parameter of the face or faces that is being updated. Must be `GL_SHININESS`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that parameter `GL_SHININESS` will be set to. </para> </listitem>"
        }
    },
    "glMaterialfv": {
        "signature": "void glMaterialfv(GLenum face, GLenum pname, const GLfloat * params)",
        "purpose": "specify material parameters for the lighting model",
        "parameters": {
            "face": "<listitem> <para> Specifies which face or faces are being updated. Must be one of `GL_FRONT`, `GL_BACK`, or `GL_FRONT_AND_BACK`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the single-valued material parameter of the face or faces that is being updated. Must be `GL_SHININESS`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that parameter `GL_SHININESS` will be set to. </para> </listitem>"
        }
    },
    "glMaterialiv": {
        "signature": "void glMaterialiv(GLenum face, GLenum pname, const GLint * params)",
        "purpose": "specify material parameters for the lighting model",
        "parameters": {
            "face": "<listitem> <para> Specifies which face or faces are being updated. Must be one of `GL_FRONT`, `GL_BACK`, or `GL_FRONT_AND_BACK`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the single-valued material parameter of the face or faces that is being updated. Must be `GL_SHININESS`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that parameter `GL_SHININESS` will be set to. </para> </listitem>"
        }
    },
    "glMatrixMode": {
        "signature": "void glMatrixMode(GLenum mode)",
        "purpose": "specify which matrix is the current matrix",
        "parameters": {
            "mode": "<listitem> <para> Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: `GL_MODELVIEW`, `GL_PROJECTION`, and `GL_TEXTURE`. The initial value is `GL_MODELVIEW`. Additionally, if the <code>ARB_imaging</code> extension is supported, `GL_COLOR` is also accepted. </para> </listitem>"
        }
    },
    "glMinmax": {
        "signature": "void glMinmax(GLenum target, GLenum internalformat, GLboolean sink)",
        "purpose": "define minmax table",
        "parameters": {
            "target": "<listitem> <para> The minmax table whose parameters are to be set. Must be `GL_MINMAX`. </para> </listitem>",
            "internalformat": "<listitem> <para> The format of entries in the minmax table. Must be one of `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, or `GL_RGBA16`. </para> </listitem>",
            "sink": "<listitem> <para> If `GL_TRUE`, pixels will be consumed by the minmax process and no drawing or texture loading will take place. If `GL_FALSE`, pixels will proceed to the final conversion process after minmax. </para> </listitem>"
        }
    },
    "glMultiDrawArrays": {
        "signature": "void glMultiDrawArrays(GLenum mode, GLint * first, GLsizei * count, GLsizei primcount)",
        "purpose": "render multiple sets of primitives from array data",
        "parameters": {
            "mode": "<listitem> <para> Specifies what kind of primitives to render. Symbolic constants `GL_POINTS`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_LINES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, `GL_TRIANGLES`, `GL_QUAD_STRIP`, `GL_QUADS`, and `GL_POLYGON` are accepted. </para> </listitem>",
            "first": "<listitem> <para> Points to an array of starting indices in the enabled arrays. </para> </listitem>",
            "count": "<listitem> <para> Points to an array of the number of indices to be rendered. </para> </listitem>",
            "primcount": "<listitem> <para> Specifies the size of the first and count </para> </listitem>"
        }
    },
    "glMultiDrawElements": {
        "signature": "void glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void ** indices, GLsizei primcount)",
        "purpose": "render multiple sets of primitives by specifying indices of array data elements",
        "parameters": {
            "mode": "<listitem> <para> Specifies what kind of primitives to render. Symbolic constants `GL_POINTS`, `GL_LINE_STRIP`, `GL_LINE_LOOP`, `GL_LINES`, `GL_TRIANGLE_STRIP`, `GL_TRIANGLE_FAN`, `GL_TRIANGLES`, `GL_QUAD_STRIP`, `GL_QUADS`, and `GL_POLYGON` are accepted. </para> </listitem>",
            "count": "<listitem> <para> Points to an array of the elements counts. </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of the values in <parameter>indices</parameter>. Must be one of `GL_UNSIGNED_BYTE`, `GL_UNSIGNED_SHORT`, or `GL_UNSIGNED_INT`. </para> </listitem>",
            "indices": "<listitem> <para> Specifies a pointer to the location where the indices are stored. </para> </listitem>",
            "primcount": "<listitem> <para> Specifies the size of the <parameter>count</parameter> array. </para> </listitem>"
        }
    },
    "glMultiTexCoord1s": {
        "signature": "void glMultiTexCoord1s(GLenum target, GLshort s)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord1i": {
        "signature": "void glMultiTexCoord1i(GLenum target, GLint s)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord1f": {
        "signature": "void glMultiTexCoord1f(GLenum target, GLfloat s)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord1d": {
        "signature": "void glMultiTexCoord1d(GLenum target, GLdouble s)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord2s": {
        "signature": "void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord2i": {
        "signature": "void glMultiTexCoord2i(GLenum target, GLint s, GLint t)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord2f": {
        "signature": "void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord2d": {
        "signature": "void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord3s": {
        "signature": "void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord3i": {
        "signature": "void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord3f": {
        "signature": "void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord3d": {
        "signature": "void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord4s": {
        "signature": "void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord4i": {
        "signature": "void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord4f": {
        "signature": "void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord4d": {
        "signature": "void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord1sv": {
        "signature": "void glMultiTexCoord1sv(GLenum target, const GLshort * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord1iv": {
        "signature": "void glMultiTexCoord1iv(GLenum target, const GLint * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord1fv": {
        "signature": "void glMultiTexCoord1fv(GLenum target, const GLfloat * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord1dv": {
        "signature": "void glMultiTexCoord1dv(GLenum target, const GLdouble * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord2sv": {
        "signature": "void glMultiTexCoord2sv(GLenum target, const GLshort * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord2iv": {
        "signature": "void glMultiTexCoord2iv(GLenum target, const GLint * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord2fv": {
        "signature": "void glMultiTexCoord2fv(GLenum target, const GLfloat * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord2dv": {
        "signature": "void glMultiTexCoord2dv(GLenum target, const GLdouble * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord3sv": {
        "signature": "void glMultiTexCoord3sv(GLenum target, const GLshort * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord3iv": {
        "signature": "void glMultiTexCoord3iv(GLenum target, const GLint * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord3fv": {
        "signature": "void glMultiTexCoord3fv(GLenum target, const GLfloat * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord3dv": {
        "signature": "void glMultiTexCoord3dv(GLenum target, const GLdouble * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord4sv": {
        "signature": "void glMultiTexCoord4sv(GLenum target, const GLshort * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord4iv": {
        "signature": "void glMultiTexCoord4iv(GLenum target, const GLint * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord4fv": {
        "signature": "void glMultiTexCoord4fv(GLenum target, const GLfloat * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultiTexCoord4dv": {
        "signature": "void glMultiTexCoord4dv(GLenum target, const GLdouble * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "target": "<listitem> <para> Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of `GL_TEXTURE`<inlineequation><math><mi mathvariant=\"italic\">i</mi></math></inlineequation>, where i ranges from 0 to `GL_MAX_TEXTURE_COORDS` - 1, which is an implementation-dependent value. </para> </listitem>",
            "s": "<listitem> <para> Specify <parameter>s</parameter>, <parameter>t</parameter>, <parameter>r</parameter>, and <parameter>q</parameter> texture coordinates for <parameter>target</parameter> texture unit. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glMultMatrixd": {
        "signature": "void glMultMatrixd(const GLdouble * m)",
        "purpose": "multiply the current matrix with the specified matrix",
        "parameters": {
            "m": "<listitem> <para> Points to 16 consecutive values that are used as the elements of a <inlineequation><math> <mrow> <mn>4</mn> <mo /> <mn>4</mn> </mrow> </math></inlineequation> column-major matrix. </para> </listitem>"
        }
    },
    "glMultMatrixf": {
        "signature": "void glMultMatrixf(const GLfloat * m)",
        "purpose": "multiply the current matrix with the specified matrix",
        "parameters": {
            "m": "<listitem> <para> Points to 16 consecutive values that are used as the elements of a <inlineequation><math> <mrow> <mn>4</mn> <mo /> <mn>4</mn> </mrow> </math></inlineequation> column-major matrix. </para> </listitem>"
        }
    },
    "glMultTransposeMatrixd": {
        "signature": "void glMultTransposeMatrixd(const GLdouble * m)",
        "purpose": "multiply the current matrix with the specified row-major ordered matrix",
        "parameters": {
            "m": "<listitem> <para> Points to 16 consecutive values that are used as the elements of a <inlineequation><math> <mrow> <mn>4</mn> <mo /> <mn>4</mn> </mrow> </math></inlineequation> row-major matrix. </para> </listitem>"
        }
    },
    "glMultTransposeMatrixf": {
        "signature": "void glMultTransposeMatrixf(const GLfloat * m)",
        "purpose": "multiply the current matrix with the specified row-major ordered matrix",
        "parameters": {
            "m": "<listitem> <para> Points to 16 consecutive values that are used as the elements of a <inlineequation><math> <mrow> <mn>4</mn> <mo /> <mn>4</mn> </mrow> </math></inlineequation> row-major matrix. </para> </listitem>"
        }
    },
    "glNewList": {
        "signature": "void glNewList(GLuint list, GLenum mode)",
        "purpose": "create or replace a display list",
        "parameters": {
            "list": "<listitem> <para> Specifies the display-list name. </para> </listitem>",
            "mode": "<listitem> <para> Specifies the compilation mode, which can be `GL_COMPILE` or `GL_COMPILE_AND_EXECUTE`. </para> </listitem>"
        }
    },
    "glEndList": {
        "signature": "void glEndList( void)",
        "purpose": "create or replace a display list",
        "parameters": {
            "list": "<listitem> <para> Specifies the display-list name. </para> </listitem>",
            "mode": "<listitem> <para> Specifies the compilation mode, which can be `GL_COMPILE` or `GL_COMPILE_AND_EXECUTE`. </para> </listitem>"
        }
    },
    "glNormal3b": {
        "signature": "void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1). </para> <para> </para> </listitem>"
        }
    },
    "glNormal3d": {
        "signature": "void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1). </para> <para> </para> </listitem>"
        }
    },
    "glNormal3f": {
        "signature": "void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1). </para> <para> </para> </listitem>"
        }
    },
    "glNormal3i": {
        "signature": "void glNormal3i(GLint nx, GLint ny, GLint nz)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1). </para> <para> </para> </listitem>"
        }
    },
    "glNormal3s": {
        "signature": "void glNormal3s(GLshort nx, GLshort ny, GLshort nz)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1). </para> <para> </para> </listitem>"
        }
    },
    "glNormal3bv": {
        "signature": "void glNormal3bv(const GLbyte * v)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1). </para> <para> </para> </listitem>"
        }
    },
    "glNormal3dv": {
        "signature": "void glNormal3dv(const GLdouble * v)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1). </para> <para> </para> </listitem>"
        }
    },
    "glNormal3fv": {
        "signature": "void glNormal3fv(const GLfloat * v)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1). </para> <para> </para> </listitem>"
        }
    },
    "glNormal3iv": {
        "signature": "void glNormal3iv(const GLint * v)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1). </para> <para> </para> </listitem>"
        }
    },
    "glNormal3sv": {
        "signature": "void glNormal3sv(const GLshort * v)",
        "purpose": "set the current normal vector",
        "parameters": {
            "nx": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1). </para> <para> </para> </listitem>"
        }
    },
    "glNormalPointer": {
        "signature": "void glNormalPointer(GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of normals",
        "parameters": {
            "type": "<listitem> <para> Specifies the data type of each coordinate in the array. Symbolic constants `GL_BYTE`, `GL_SHORT`, `GL_INT`, `GL_FLOAT`, and `GL_DOUBLE` are accepted. The initial value is `GL_FLOAT`. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive normals. If <parameter>stride</parameter> is 0, the normals are understood to be tightly packed in the array. The initial value is 0. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0. </para> </listitem>"
        }
    },
    "glOrtho": {
        "signature": "void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble nearVal, GLdouble farVal)",
        "purpose": "multiply the current matrix with an orthographic matrix",
        "parameters": {
            "left": "<listitem> <para> Specify the coordinates for the left and right vertical clipping planes. </para> </listitem>",
            "bottom": "<listitem> <para> Specify the coordinates for the bottom and top horizontal clipping planes. </para> </listitem>",
            "nearVal": "<listitem> <para> Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer. </para> </listitem>"
        }
    },
    "glPassThrough": {
        "signature": "void glPassThrough(GLfloat token)",
        "purpose": "place a marker in the feedback buffer",
        "parameters": {
            "token": "<listitem> <para> Specifies a marker value to be placed in the feedback buffer following a `GL_PASS_THROUGH_TOKEN`. </para> </listitem>"
        }
    },
    "glPixelMapfv": {
        "signature": "void glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values)",
        "purpose": "set up pixel transfer maps",
        "parameters": {
            "map": "<listitem> <para> Specifies a symbolic map name. Must be one of the following: `GL_PIXEL_MAP_I_TO_I`, `GL_PIXEL_MAP_S_TO_S`, `GL_PIXEL_MAP_I_TO_R`, `GL_PIXEL_MAP_I_TO_G`, `GL_PIXEL_MAP_I_TO_B`, `GL_PIXEL_MAP_I_TO_A`, `GL_PIXEL_MAP_R_TO_R`, `GL_PIXEL_MAP_G_TO_G`, `GL_PIXEL_MAP_B_TO_B`, or `GL_PIXEL_MAP_A_TO_A`. </para> </listitem>",
            "mapsize": "<listitem> <para> Specifies the size of the map being defined. </para> </listitem>",
            "values": "<listitem> <para> Specifies an array of <parameter>mapsize</parameter> values. </para> </listitem>"
        }
    },
    "glPixelMapuiv": {
        "signature": "void glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values)",
        "purpose": "set up pixel transfer maps",
        "parameters": {
            "map": "<listitem> <para> Specifies a symbolic map name. Must be one of the following: `GL_PIXEL_MAP_I_TO_I`, `GL_PIXEL_MAP_S_TO_S`, `GL_PIXEL_MAP_I_TO_R`, `GL_PIXEL_MAP_I_TO_G`, `GL_PIXEL_MAP_I_TO_B`, `GL_PIXEL_MAP_I_TO_A`, `GL_PIXEL_MAP_R_TO_R`, `GL_PIXEL_MAP_G_TO_G`, `GL_PIXEL_MAP_B_TO_B`, or `GL_PIXEL_MAP_A_TO_A`. </para> </listitem>",
            "mapsize": "<listitem> <para> Specifies the size of the map being defined. </para> </listitem>",
            "values": "<listitem> <para> Specifies an array of <parameter>mapsize</parameter> values. </para> </listitem>"
        }
    },
    "glPixelMapusv": {
        "signature": "void glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values)",
        "purpose": "set up pixel transfer maps",
        "parameters": {
            "map": "<listitem> <para> Specifies a symbolic map name. Must be one of the following: `GL_PIXEL_MAP_I_TO_I`, `GL_PIXEL_MAP_S_TO_S`, `GL_PIXEL_MAP_I_TO_R`, `GL_PIXEL_MAP_I_TO_G`, `GL_PIXEL_MAP_I_TO_B`, `GL_PIXEL_MAP_I_TO_A`, `GL_PIXEL_MAP_R_TO_R`, `GL_PIXEL_MAP_G_TO_G`, `GL_PIXEL_MAP_B_TO_B`, or `GL_PIXEL_MAP_A_TO_A`. </para> </listitem>",
            "mapsize": "<listitem> <para> Specifies the size of the map being defined. </para> </listitem>",
            "values": "<listitem> <para> Specifies an array of <parameter>mapsize</parameter> values. </para> </listitem>"
        }
    },
    "glPixelStoref": {
        "signature": "void glPixelStoref(GLenum pname, GLfloat param)",
        "purpose": "set pixel storage modes",
        "parameters": {
            "pname": "<listitem> <para> Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: `GL_PACK_SWAP_BYTES`, `GL_PACK_LSB_FIRST`, `GL_PACK_ROW_LENGTH`, `GL_PACK_IMAGE_HEIGHT`, `GL_PACK_SKIP_PIXELS`, `GL_PACK_SKIP_ROWS`, `GL_PACK_SKIP_IMAGES`, and `GL_PACK_ALIGNMENT`. Six more affect the unpacking of pixel data <emphasis>from</emphasis> memory: `GL_UNPACK_SWAP_BYTES`, `GL_UNPACK_LSB_FIRST`, `GL_UNPACK_ROW_LENGTH`, `GL_UNPACK_IMAGE_HEIGHT`, `GL_UNPACK_SKIP_PIXELS`, `GL_UNPACK_SKIP_ROWS`, `GL_UNPACK_SKIP_IMAGES`, and `GL_UNPACK_ALIGNMENT`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> is set to. </para> </listitem>"
        }
    },
    "glPixelStorei": {
        "signature": "void glPixelStorei(GLenum pname, GLint param)",
        "purpose": "set pixel storage modes",
        "parameters": {
            "pname": "<listitem> <para> Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: `GL_PACK_SWAP_BYTES`, `GL_PACK_LSB_FIRST`, `GL_PACK_ROW_LENGTH`, `GL_PACK_IMAGE_HEIGHT`, `GL_PACK_SKIP_PIXELS`, `GL_PACK_SKIP_ROWS`, `GL_PACK_SKIP_IMAGES`, and `GL_PACK_ALIGNMENT`. Six more affect the unpacking of pixel data <emphasis>from</emphasis> memory: `GL_UNPACK_SWAP_BYTES`, `GL_UNPACK_LSB_FIRST`, `GL_UNPACK_ROW_LENGTH`, `GL_UNPACK_IMAGE_HEIGHT`, `GL_UNPACK_SKIP_PIXELS`, `GL_UNPACK_SKIP_ROWS`, `GL_UNPACK_SKIP_IMAGES`, and `GL_UNPACK_ALIGNMENT`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> is set to. </para> </listitem>"
        }
    },
    "glPixelTransferf": {
        "signature": "void glPixelTransferf(GLenum pname, GLfloat param)",
        "purpose": "set pixel transfer modes",
        "parameters": {
            "pname": "<listitem> <para> Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following: `GL_MAP_COLOR`, `GL_MAP_STENCIL`, `GL_INDEX_SHIFT`, `GL_INDEX_OFFSET`, `GL_RED_SCALE`, `GL_RED_BIAS`, `GL_GREEN_SCALE`, `GL_GREEN_BIAS`, `GL_BLUE_SCALE`, `GL_BLUE_BIAS`, `GL_ALPHA_SCALE`, `GL_ALPHA_BIAS`, `GL_DEPTH_SCALE`, or `GL_DEPTH_BIAS`. </para> <para> Additionally, if the <code>ARB_imaging</code> extension is supported, the following symbolic names are accepted: `GL_POST_COLOR_MATRIX_RED_SCALE`, `GL_POST_COLOR_MATRIX_GREEN_SCALE`, `GL_POST_COLOR_MATRIX_BLUE_SCALE`, `GL_POST_COLOR_MATRIX_ALPHA_SCALE`, `GL_POST_COLOR_MATRIX_RED_BIAS`, `GL_POST_COLOR_MATRIX_GREEN_BIAS`, `GL_POST_COLOR_MATRIX_BLUE_BIAS`, `GL_POST_COLOR_MATRIX_ALPHA_BIAS`, `GL_POST_CONVOLUTION_RED_SCALE`, `GL_POST_CONVOLUTION_GREEN_SCALE`, `GL_POST_CONVOLUTION_BLUE_SCALE`, `GL_POST_CONVOLUTION_ALPHA_SCALE`, `GL_POST_CONVOLUTION_RED_BIAS`, `GL_POST_CONVOLUTION_GREEN_BIAS`, `GL_POST_CONVOLUTION_BLUE_BIAS`, and `GL_POST_CONVOLUTION_ALPHA_BIAS`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> is set to. </para> </listitem>"
        }
    },
    "glPixelTransferi": {
        "signature": "void glPixelTransferi(GLenum pname, GLint param)",
        "purpose": "set pixel transfer modes",
        "parameters": {
            "pname": "<listitem> <para> Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following: `GL_MAP_COLOR`, `GL_MAP_STENCIL`, `GL_INDEX_SHIFT`, `GL_INDEX_OFFSET`, `GL_RED_SCALE`, `GL_RED_BIAS`, `GL_GREEN_SCALE`, `GL_GREEN_BIAS`, `GL_BLUE_SCALE`, `GL_BLUE_BIAS`, `GL_ALPHA_SCALE`, `GL_ALPHA_BIAS`, `GL_DEPTH_SCALE`, or `GL_DEPTH_BIAS`. </para> <para> Additionally, if the <code>ARB_imaging</code> extension is supported, the following symbolic names are accepted: `GL_POST_COLOR_MATRIX_RED_SCALE`, `GL_POST_COLOR_MATRIX_GREEN_SCALE`, `GL_POST_COLOR_MATRIX_BLUE_SCALE`, `GL_POST_COLOR_MATRIX_ALPHA_SCALE`, `GL_POST_COLOR_MATRIX_RED_BIAS`, `GL_POST_COLOR_MATRIX_GREEN_BIAS`, `GL_POST_COLOR_MATRIX_BLUE_BIAS`, `GL_POST_COLOR_MATRIX_ALPHA_BIAS`, `GL_POST_CONVOLUTION_RED_SCALE`, `GL_POST_CONVOLUTION_GREEN_SCALE`, `GL_POST_CONVOLUTION_BLUE_SCALE`, `GL_POST_CONVOLUTION_ALPHA_SCALE`, `GL_POST_CONVOLUTION_RED_BIAS`, `GL_POST_CONVOLUTION_GREEN_BIAS`, `GL_POST_CONVOLUTION_BLUE_BIAS`, and `GL_POST_CONVOLUTION_ALPHA_BIAS`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> is set to. </para> </listitem>"
        }
    },
    "glPixelZoom": {
        "signature": "void glPixelZoom(GLfloat xfactor, GLfloat yfactor)",
        "purpose": "specify the pixel zoom factors",
        "parameters": {
            "xfactor": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation> and <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation> zoom factors for pixel write operations. </para> </listitem>"
        }
    },
    "glPointParameterf": {
        "signature": "void glPointParameterf(GLenum pname, GLfloat param)",
        "purpose": "specify point parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued point parameter. `GL_POINT_SIZE_MIN`, `GL_POINT_SIZE_MAX`, `GL_POINT_FADE_THRESHOLD_SIZE`, and `GL_POINT_SPRITE_COORD_ORIGIN` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> will be set to. </para> </listitem>"
        }
    },
    "glPointParameteri": {
        "signature": "void glPointParameteri(GLenum pname, GLint param)",
        "purpose": "specify point parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued point parameter. `GL_POINT_SIZE_MIN`, `GL_POINT_SIZE_MAX`, `GL_POINT_FADE_THRESHOLD_SIZE`, and `GL_POINT_SPRITE_COORD_ORIGIN` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> will be set to. </para> </listitem>"
        }
    },
    "glPointParameterfv": {
        "signature": "void glPointParameterfv(GLenum pname, const GLfloat * params)",
        "purpose": "specify point parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued point parameter. `GL_POINT_SIZE_MIN`, `GL_POINT_SIZE_MAX`, `GL_POINT_FADE_THRESHOLD_SIZE`, and `GL_POINT_SPRITE_COORD_ORIGIN` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> will be set to. </para> </listitem>"
        }
    },
    "glPointParameteriv": {
        "signature": "void glPointParameteriv(GLenum pname, const GLint * params)",
        "purpose": "specify point parameters",
        "parameters": {
            "pname": "<listitem> <para> Specifies a single-valued point parameter. `GL_POINT_SIZE_MIN`, `GL_POINT_SIZE_MAX`, `GL_POINT_FADE_THRESHOLD_SIZE`, and `GL_POINT_SPRITE_COORD_ORIGIN` are accepted. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value that <parameter>pname</parameter> will be set to. </para> </listitem>"
        }
    },
    "glPointSize": {
        "signature": "void glPointSize(GLfloat size)",
        "purpose": "specify the diameter of rasterized points",
        "parameters": {
            "size": "<listitem> <para> Specifies the diameter of rasterized points. The initial value is 1. </para> </listitem>"
        }
    },
    "glPolygonMode": {
        "signature": "void glPolygonMode(GLenum face, GLenum mode)",
        "purpose": "select a polygon rasterization mode",
        "parameters": {
            "face": "<listitem> <para> Specifies the polygons that <parameter>mode</parameter> applies to. Must be `GL_FRONT` for front-facing polygons, `GL_BACK` for back-facing polygons, or `GL_FRONT_AND_BACK` for front- and back-facing polygons. </para> </listitem>",
            "mode": "<listitem> <para> Specifies how polygons will be rasterized. Accepted values are `GL_POINT`, `GL_LINE`, and `GL_FILL`. The initial value is `GL_FILL` for both front- and back-facing polygons. </para> </listitem>"
        }
    },
    "glPolygonOffset": {
        "signature": "void glPolygonOffset(GLfloat factor, GLfloat units)",
        "purpose": "set the scale and units used to calculate depth values",
        "parameters": {
            "factor": "<listitem> <para> Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0. </para> </listitem>",
            "units": "<listitem> <para> Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0. </para> </listitem>"
        }
    },
    "glPolygonStipple": {
        "signature": "void glPolygonStipple(const GLubyte * pattern)",
        "purpose": "set the polygon stippling pattern",
        "parameters": {
            "pattern": "<listitem> <para> Specifies a pointer to a <inlineequation><math> <mrow> <mn>32</mn> <mo /> <mn>32</mn> </mrow> </math></inlineequation> stipple pattern that will be unpacked from memory in the same way that <citerefentry><refentrytitle>glDrawPixels</refentrytitle></citerefentry> unpacks pixels. </para> </listitem>"
        }
    },
    "glPrioritizeTextures": {
        "signature": "void glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLclampf * priorities)",
        "purpose": "set texture residence priority",
        "parameters": {
            "n": "<listitem> <para> Specifies the number of textures to be prioritized. </para> </listitem>",
            "textures": "<listitem> <para> Specifies an array containing the names of the textures to be prioritized. </para> </listitem>",
            "priorities": "<listitem> <para> Specifies an array containing the texture priorities. A priority given in an element of <parameter>priorities</parameter> applies to the texture named by the corresponding element of <parameter>textures</parameter>. </para> </listitem>"
        }
    },
    "glPushAttrib": {
        "signature": "void glPushAttrib(GLbitfield mask)",
        "purpose": "push and pop the server attribute stack",
        "parameters": {
            "mask": "<listitem> <para> Specifies a mask that indicates which attributes to save. Values for <parameter>mask</parameter> are listed below. </para> </listitem>"
        }
    },
    "glPopAttrib": {
        "signature": "void glPopAttrib( void)",
        "purpose": "push and pop the server attribute stack",
        "parameters": {
            "mask": "<listitem> <para> Specifies a mask that indicates which attributes to save. Values for <parameter>mask</parameter> are listed below. </para> </listitem>"
        }
    },
    "glPushClientAttrib": {
        "signature": "void glPushClientAttrib(GLbitfield mask)",
        "purpose": "push and pop the client attribute stack",
        "parameters": {
            "mask": "<listitem> <para> Specifies a mask that indicates which attributes to save. Values for <parameter>mask</parameter> are listed below. </para> </listitem>"
        }
    },
    "glPopClientAttrib": {
        "signature": "void glPopClientAttrib( void)",
        "purpose": "push and pop the client attribute stack",
        "parameters": {
            "mask": "<listitem> <para> Specifies a mask that indicates which attributes to save. Values for <parameter>mask</parameter> are listed below. </para> </listitem>"
        }
    },
    "glPushMatrix": {
        "signature": "void glPushMatrix( void)",
        "purpose": "push and pop the current matrix stack",
        "parameters": {}
    },
    "glPopMatrix": {
        "signature": "void glPopMatrix( void)",
        "purpose": "push and pop the current matrix stack",
        "parameters": {}
    },
    "glPushName": {
        "signature": "void glPushName(GLuint name)",
        "purpose": "push and pop the name stack",
        "parameters": {
            "name": "<listitem> <para> Specifies a name that will be pushed onto the name stack. </para> </listitem>"
        }
    },
    "glPopName": {
        "signature": "void glPopName( void)",
        "purpose": "push and pop the name stack",
        "parameters": {
            "name": "<listitem> <para> Specifies a name that will be pushed onto the name stack. </para> </listitem>"
        }
    },
    "glRasterPos2s": {
        "signature": "void glRasterPos2s(GLshort x, GLshort y)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos2i": {
        "signature": "void glRasterPos2i(GLint x, GLint y)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos2f": {
        "signature": "void glRasterPos2f(GLfloat x, GLfloat y)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos2d": {
        "signature": "void glRasterPos2d(GLdouble x, GLdouble y)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos3s": {
        "signature": "void glRasterPos3s(GLshort x, GLshort y, GLshort z)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos3i": {
        "signature": "void glRasterPos3i(GLint x, GLint y, GLint z)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos3f": {
        "signature": "void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos3d": {
        "signature": "void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos4s": {
        "signature": "void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos4i": {
        "signature": "void glRasterPos4i(GLint x, GLint y, GLint z, GLint w)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos4f": {
        "signature": "void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos4d": {
        "signature": "void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos2sv": {
        "signature": "void glRasterPos2sv(const GLshort * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos2iv": {
        "signature": "void glRasterPos2iv(const GLint * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos2fv": {
        "signature": "void glRasterPos2fv(const GLfloat * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos2dv": {
        "signature": "void glRasterPos2dv(const GLdouble * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos3sv": {
        "signature": "void glRasterPos3sv(const GLshort * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos3iv": {
        "signature": "void glRasterPos3iv(const GLint * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos3fv": {
        "signature": "void glRasterPos3fv(const GLfloat * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos3dv": {
        "signature": "void glRasterPos3dv(const GLdouble * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos4sv": {
        "signature": "void glRasterPos4sv(const GLshort * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos4iv": {
        "signature": "void glRasterPos4iv(const GLint * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos4fv": {
        "signature": "void glRasterPos4fv(const GLfloat * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glRasterPos4dv": {
        "signature": "void glRasterPos4dv(const GLdouble * v)",
        "purpose": "specify the raster position for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>, and <inlineequation><math><mi mathvariant=\"italic\">w</mi></math></inlineequation> object coordinates (if present) for the raster position. </para> </listitem>"
        }
    },
    "glReadBuffer": {
        "signature": "void glReadBuffer(GLenum mode)",
        "purpose": "select a color buffer source for pixels",
        "parameters": {
            "mode": "<listitem> <para> Specifies a color buffer. Accepted values are `GL_FRONT_LEFT`, `GL_FRONT_RIGHT`, `GL_BACK_LEFT`, `GL_BACK_RIGHT`, `GL_FRONT`, `GL_BACK`, `GL_LEFT`, `GL_RIGHT`, and `GL_AUX`<emphasis>i</emphasis>, where <emphasis>i</emphasis> is between 0 and the value of `GL_AUX_BUFFERS` minus 1. </para> </listitem>"
        }
    },
    "glReadPixels": {
        "signature": "void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * data)",
        "purpose": "read a block of pixels from the frame buffer",
        "parameters": {
            "x": "<listitem> <para> Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels. </para> </listitem>",
            "width": "<listitem> <para> Specify the dimensions of the pixel rectangle. <parameter>width</parameter> and <parameter>height</parameter> of one correspond to a single pixel. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are accepted: `GL_COLOR_INDEX`, `GL_STENCIL_INDEX`, `GL_DEPTH_COMPONENT`, `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of the pixel data. Must be one of `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, or `GL_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Returns the pixel data. </para> </listitem>"
        }
    },
    "glRectd": {
        "signature": "void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)",
        "purpose": "draw a rectangle",
        "parameters": {
            "x1": "<listitem> <para> Specify one vertex of a rectangle. </para> </listitem>",
            "x2": "<listitem> <para> Specify the opposite vertex of the rectangle. </para> </listitem>"
        }
    },
    "glRectf": {
        "signature": "void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)",
        "purpose": "draw a rectangle",
        "parameters": {
            "x1": "<listitem> <para> Specify one vertex of a rectangle. </para> </listitem>",
            "x2": "<listitem> <para> Specify the opposite vertex of the rectangle. </para> </listitem>"
        }
    },
    "glRecti": {
        "signature": "void glRecti(GLint x1, GLint y1, GLint x2, GLint y2)",
        "purpose": "draw a rectangle",
        "parameters": {
            "x1": "<listitem> <para> Specify one vertex of a rectangle. </para> </listitem>",
            "x2": "<listitem> <para> Specify the opposite vertex of the rectangle. </para> </listitem>"
        }
    },
    "glRects": {
        "signature": "void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)",
        "purpose": "draw a rectangle",
        "parameters": {
            "x1": "<listitem> <para> Specify one vertex of a rectangle. </para> </listitem>",
            "x2": "<listitem> <para> Specify the opposite vertex of the rectangle. </para> </listitem>"
        }
    },
    "glRectdv": {
        "signature": "void glRectdv(const GLdouble * v1, const GLdouble * v2)",
        "purpose": "draw a rectangle",
        "parameters": {
            "x1": "<listitem> <para> Specify one vertex of a rectangle. </para> </listitem>",
            "x2": "<listitem> <para> Specify the opposite vertex of the rectangle. </para> </listitem>"
        }
    },
    "glRectfv": {
        "signature": "void glRectfv(const GLfloat * v1, const GLfloat * v2)",
        "purpose": "draw a rectangle",
        "parameters": {
            "x1": "<listitem> <para> Specify one vertex of a rectangle. </para> </listitem>",
            "x2": "<listitem> <para> Specify the opposite vertex of the rectangle. </para> </listitem>"
        }
    },
    "glRectiv": {
        "signature": "void glRectiv(const GLint * v1, const GLint * v2)",
        "purpose": "draw a rectangle",
        "parameters": {
            "x1": "<listitem> <para> Specify one vertex of a rectangle. </para> </listitem>",
            "x2": "<listitem> <para> Specify the opposite vertex of the rectangle. </para> </listitem>"
        }
    },
    "glRectsv": {
        "signature": "void glRectsv(const GLshort * v1, const GLshort * v2)",
        "purpose": "draw a rectangle",
        "parameters": {
            "x1": "<listitem> <para> Specify one vertex of a rectangle. </para> </listitem>",
            "x2": "<listitem> <para> Specify the opposite vertex of the rectangle. </para> </listitem>"
        }
    },
    "glRenderMode": {
        "signature": "GLint glRenderMode(GLenum mode)",
        "purpose": "set rasterization mode",
        "parameters": {
            "mode": "<listitem> <para> Specifies the rasterization mode. Three values are accepted: `GL_RENDER`, `GL_SELECT`, and `GL_FEEDBACK`. The initial value is `GL_RENDER`. </para> </listitem>"
        }
    },
    "glResetHistogram": {
        "signature": "void glResetHistogram(GLenum target)",
        "purpose": "reset histogram table entries to zero",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_HISTOGRAM`. </para> </listitem>"
        }
    },
    "glResetMinmax": {
        "signature": "void glResetMinmax(GLenum target)",
        "purpose": "reset minmax table entries to initial values",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_MINMAX`. </para> </listitem>"
        }
    },
    "glRotated": {
        "signature": "void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)",
        "purpose": "multiply the current matrix by a rotation matrix",
        "parameters": {
            "angle": "<listitem> <para> Specifies the angle of rotation, in degrees. </para> </listitem>",
            "x": "<listitem> <para> Specify the <emphasis>x</emphasis>, <emphasis>y</emphasis>, and <emphasis>z</emphasis> coordinates of a vector, respectively. </para> </listitem>"
        }
    },
    "glRotatef": {
        "signature": "void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "multiply the current matrix by a rotation matrix",
        "parameters": {
            "angle": "<listitem> <para> Specifies the angle of rotation, in degrees. </para> </listitem>",
            "x": "<listitem> <para> Specify the <emphasis>x</emphasis>, <emphasis>y</emphasis>, and <emphasis>z</emphasis> coordinates of a vector, respectively. </para> </listitem>"
        }
    },
    "glSampleCoverage": {
        "signature": "void glSampleCoverage(GLclampf value, GLboolean invert)",
        "purpose": "specify multisample coverage parameters",
        "parameters": {
            "value": "<listitem> <para> Specify a single floating-point sample coverage value. The value is clamped to the range <inlineequation><math> <mfenced open=\"[\" close=\"]\"> <mn>0</mn> <mn>1</mn> </mfenced> </math></inlineequation>. The initial value is 1.0. </para> </listitem>",
            "invert": "<listitem> <para> Specify a single boolean value representing if the coverage masks should be inverted. `GL_TRUE` and `GL_FALSE` are accepted. The initial value is `GL_FALSE`. </para> </listitem>"
        }
    },
    "glScaled": {
        "signature": "void glScaled(GLdouble x, GLdouble y, GLdouble z)",
        "purpose": "multiply the current matrix by a general scaling matrix",
        "parameters": {
            "x": "<listitem> <para> Specify scale factors along the <emphasis>x</emphasis>, <emphasis>y</emphasis>, and <emphasis>z</emphasis> axes, respectively. </para> </listitem>"
        }
    },
    "glScalef": {
        "signature": "void glScalef(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "multiply the current matrix by a general scaling matrix",
        "parameters": {
            "x": "<listitem> <para> Specify scale factors along the <emphasis>x</emphasis>, <emphasis>y</emphasis>, and <emphasis>z</emphasis> axes, respectively. </para> </listitem>"
        }
    },
    "glScissor": {
        "signature": "void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "define the scissor box",
        "parameters": {
            "x": "<listitem> <para> Specify the lower left corner of the scissor box. Initially (0, 0). </para> </listitem>",
            "width": "<listitem> <para> Specify the width and height of the scissor box. When a GL context is first attached to a window, <parameter>width</parameter> and <parameter>height</parameter> are set to the dimensions of that window. </para> </listitem>"
        }
    },
    "glSecondaryColor3b": {
        "signature": "void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3s": {
        "signature": "void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3i": {
        "signature": "void glSecondaryColor3i(GLint red, GLint green, GLint blue)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3f": {
        "signature": "void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3d": {
        "signature": "void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3ub": {
        "signature": "void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3us": {
        "signature": "void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3ui": {
        "signature": "void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3bv": {
        "signature": "void glSecondaryColor3bv(const GLbyte * v)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3sv": {
        "signature": "void glSecondaryColor3sv(const GLshort * v)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3iv": {
        "signature": "void glSecondaryColor3iv(const GLint * v)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3fv": {
        "signature": "void glSecondaryColor3fv(const GLfloat * v)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3dv": {
        "signature": "void glSecondaryColor3dv(const GLdouble * v)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3ubv": {
        "signature": "void glSecondaryColor3ubv(const GLubyte * v)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3usv": {
        "signature": "void glSecondaryColor3usv(const GLushort * v)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColor3uiv": {
        "signature": "void glSecondaryColor3uiv(const GLuint * v)",
        "purpose": "set the current secondary color",
        "parameters": {
            "red": "<listitem> <para> Specify new red, green, and blue values for the current secondary color. </para> </listitem>"
        }
    },
    "glSecondaryColorPointer": {
        "signature": "void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of secondary colors",
        "parameters": {
            "size": "<listitem> <para> Specifies the number of components per color. Must be 3. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of each color component in the array. Symbolic constants `GL_BYTE`, `GL_UNSIGNED_BYTE`, `GL_SHORT`, `GL_UNSIGNED_SHORT`, `GL_INT`, `GL_UNSIGNED_INT`, `GL_FLOAT`, or `GL_DOUBLE` are accepted. The initial value is `GL_FLOAT`. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive colors. If <parameter>stride</parameter> is 0, the colors are understood to be tightly packed in the array. The initial value is 0. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first component of the first color element in the array. The initial value is 0. </para> </listitem>"
        }
    },
    "glSelectBuffer": {
        "signature": "void glSelectBuffer(GLsizei size, GLuint * buffer)",
        "purpose": "establish a buffer for selection mode values",
        "parameters": {
            "size": "<listitem> <para> Specifies the size of <parameter>buffer</parameter>. </para> </listitem>",
            "buffer": "<listitem> <para> Returns the selection data. </para> </listitem>"
        }
    },
    "glSeparableFilter2D": {
        "signature": "void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column)",
        "purpose": "define a separable two-dimensional convolution filter",
        "parameters": {
            "target": "<listitem> <para> Must be `GL_SEPARABLE_2D`. </para> </listitem>",
            "internalformat": "<listitem> <para> The internal format of the convolution filter kernel. The allowable values are `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, or `GL_RGBA16`. </para> </listitem>",
            "width": "<listitem> <para> The number of elements in the pixel array referenced by <parameter>row</parameter>. (This is the width of the separable filter kernel.) </para> </listitem>",
            "height": "<listitem> <para> The number of elements in the pixel array referenced by <parameter>column</parameter>. (This is the height of the separable filter kernel.) </para> </listitem>",
            "format": "<listitem> <para> The format of the pixel data in <parameter>row</parameter> and <parameter>column</parameter>. The allowable values are `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_INTENSITY`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> The type of the pixel data in <parameter>row</parameter> and <parameter>column</parameter>. Symbolic constants `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV` are accepted. </para> </listitem>",
            "row": "<listitem> <para> Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel. </para> </listitem>",
            "column": "<listitem> <para> Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel. </para> </listitem>"
        }
    },
    "glShadeModel": {
        "signature": "void glShadeModel(GLenum mode)",
        "purpose": "select flat or smooth shading",
        "parameters": {
            "mode": "<listitem> <para> Specifies a symbolic value representing a shading technique. Accepted values are `GL_FLAT` and `GL_SMOOTH`. The initial value is `GL_SMOOTH`. </para> </listitem>"
        }
    },
    "glShaderSource": {
        "signature": "void glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length)",
        "purpose": "Replaces the source code in a shader object",
        "parameters": {
            "shader": "<listitem> <para>Specifies the handle of the shader object whose source code is to be replaced.</para> </listitem>",
            "count": "<listitem> <para>Specifies the number of elements in the <parameter>string</parameter> and <parameter>length</parameter> arrays.</para> </listitem>",
            "string": "<listitem> <para>Specifies an array of pointers to strings containing the source code to be loaded into the shader.</para> </listitem>",
            "length": "<listitem> <para>Specifies an array of string lengths.</para> </listitem>"
        }
    },
    "glStencilFunc": {
        "signature": "void glStencilFunc(GLenum func, GLint ref, GLuint mask)",
        "purpose": "set front and back function and reference value for stencil testing",
        "parameters": {
            "func": "<listitem> <para> Specifies the test function. Eight symbolic constants are valid: `GL_NEVER`, `GL_LESS`, `GL_LEQUAL`, `GL_GREATER`, `GL_GEQUAL`, `GL_EQUAL`, `GL_NOTEQUAL`, and `GL_ALWAYS`. The initial value is `GL_ALWAYS`. </para> </listitem>",
            "ref": "<listitem> <para> Specifies the reference value for the stencil test. <parameter>ref</parameter> is clamped to the range <inlineequation><math> <mfenced open=\"[\" close=\"]\"> <mn>0</mn> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </mfenced> </math></inlineequation>, where <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation> is the number of bitplanes in the stencil buffer. The initial value is 0. </para> </listitem>",
            "mask": "<listitem> <para> Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's. </para> </listitem>"
        }
    },
    "glStencilFuncSeparate": {
        "signature": "void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)",
        "purpose": "set front and/or back function and reference value for stencil testing",
        "parameters": {
            "face": "<listitem> <para> Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: `GL_FRONT`, `GL_BACK`, and `GL_FRONT_AND_BACK`. </para> </listitem>",
            "func": "<listitem> <para> Specifies the test function. Eight symbolic constants are valid: `GL_NEVER`, `GL_LESS`, `GL_LEQUAL`, `GL_GREATER`, `GL_GEQUAL`, `GL_EQUAL`, `GL_NOTEQUAL`, and `GL_ALWAYS`. The initial value is `GL_ALWAYS`. </para> </listitem>",
            "ref": "<listitem> <para> Specifies the reference value for the stencil test. <parameter>ref</parameter> is clamped to the range <inlineequation><math> <mfenced open=\"[\" close=\"]\"> <mn>0</mn> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>-</mo> <mn>1</mn> </mrow> </mfenced> </math></inlineequation>, where <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation> is the number of bitplanes in the stencil buffer. The initial value is 0. </para> </listitem>",
            "mask": "<listitem> <para> Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's. </para> </listitem>"
        }
    },
    "glStencilMask": {
        "signature": "void glStencilMask(GLuint mask)",
        "purpose": "control the front and back writing of individual bits in the stencil planes",
        "parameters": {
            "mask": "<listitem> <para> Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's. </para> </listitem>"
        }
    },
    "glStencilMaskSeparate": {
        "signature": "void glStencilMaskSeparate(GLenum face, GLuint mask)",
        "purpose": "control the front and/or back writing of individual bits in the stencil planes",
        "parameters": {
            "face": "<listitem> <para> Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: `GL_FRONT`, `GL_BACK`, and `GL_FRONT_AND_BACK`. </para> </listitem>",
            "mask": "<listitem> <para> Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's. </para> </listitem>"
        }
    },
    "glStencilOp": {
        "signature": "void glStencilOp(GLenum sfail, GLenum dpfail, GLenum dppass)",
        "purpose": "set front and back stencil test actions",
        "parameters": {
            "sfail": "<listitem> <para> Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: `GL_KEEP`, `GL_ZERO`, `GL_REPLACE`, `GL_INCR`, `GL_INCR_WRAP`, `GL_DECR`, `GL_DECR_WRAP`, and `GL_INVERT`. The initial value is `GL_KEEP`. </para> </listitem>",
            "dpfail": "<listitem> <para> Specifies the stencil action when the stencil test passes, but the depth test fails. <parameter>dpfail</parameter> accepts the same symbolic constants as <parameter>sfail</parameter>. The initial value is `GL_KEEP`. </para> </listitem>",
            "dppass": "<listitem> <para> Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. <parameter>dppass</parameter> accepts the same symbolic constants as <parameter>sfail</parameter>. The initial value is `GL_KEEP`. </para> </listitem>"
        }
    },
    "glStencilOpSeparate": {
        "signature": "void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)",
        "purpose": "set front and/or back stencil test actions",
        "parameters": {
            "face": "<listitem> <para> Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: `GL_FRONT`, `GL_BACK`, and `GL_FRONT_AND_BACK`. </para> </listitem>",
            "sfail": "<listitem> <para> Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: `GL_KEEP`, `GL_ZERO`, `GL_REPLACE`, `GL_INCR`, `GL_INCR_WRAP`, `GL_DECR`, `GL_DECR_WRAP`, and `GL_INVERT`. The initial value is `GL_KEEP`. </para> </listitem>",
            "dpfail": "<listitem> <para> Specifies the stencil action when the stencil test passes, but the depth test fails. <parameter>dpfail</parameter> accepts the same symbolic constants as <parameter>sfail</parameter>. The initial value is `GL_KEEP`. </para> </listitem>",
            "dppass": "<listitem> <para> Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. <parameter>dppass</parameter> accepts the same symbolic constants as <parameter>sfail</parameter>. The initial value is `GL_KEEP`. </para> </listitem>"
        }
    },
    "glTexCoord1s": {
        "signature": "void glTexCoord1s(GLshort s)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord1i": {
        "signature": "void glTexCoord1i(GLint s)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord1f": {
        "signature": "void glTexCoord1f(GLfloat s)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord1d": {
        "signature": "void glTexCoord1d(GLdouble s)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord2s": {
        "signature": "void glTexCoord2s(GLshort s, GLshort t)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord2i": {
        "signature": "void glTexCoord2i(GLint s, GLint t)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord2f": {
        "signature": "void glTexCoord2f(GLfloat s, GLfloat t)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord2d": {
        "signature": "void glTexCoord2d(GLdouble s, GLdouble t)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord3s": {
        "signature": "void glTexCoord3s(GLshort s, GLshort t, GLshort r)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord3i": {
        "signature": "void glTexCoord3i(GLint s, GLint t, GLint r)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord3f": {
        "signature": "void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord3d": {
        "signature": "void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord4s": {
        "signature": "void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord4i": {
        "signature": "void glTexCoord4i(GLint s, GLint t, GLint r, GLint q)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord4f": {
        "signature": "void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord4d": {
        "signature": "void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord1sv": {
        "signature": "void glTexCoord1sv(const GLshort * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord1iv": {
        "signature": "void glTexCoord1iv(const GLint * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord1fv": {
        "signature": "void glTexCoord1fv(const GLfloat * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord1dv": {
        "signature": "void glTexCoord1dv(const GLdouble * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord2sv": {
        "signature": "void glTexCoord2sv(const GLshort * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord2iv": {
        "signature": "void glTexCoord2iv(const GLint * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord2fv": {
        "signature": "void glTexCoord2fv(const GLfloat * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord2dv": {
        "signature": "void glTexCoord2dv(const GLdouble * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord3sv": {
        "signature": "void glTexCoord3sv(const GLshort * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord3iv": {
        "signature": "void glTexCoord3iv(const GLint * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord3fv": {
        "signature": "void glTexCoord3fv(const GLfloat * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord3dv": {
        "signature": "void glTexCoord3dv(const GLdouble * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord4sv": {
        "signature": "void glTexCoord4sv(const GLshort * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord4iv": {
        "signature": "void glTexCoord4iv(const GLint * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord4fv": {
        "signature": "void glTexCoord4fv(const GLfloat * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoord4dv": {
        "signature": "void glTexCoord4dv(const GLdouble * v)",
        "purpose": "set the current texture coordinates",
        "parameters": {
            "s": "<listitem> <para> Specify <emphasis>s</emphasis>, <emphasis>t</emphasis>, <emphasis>r</emphasis>, and <emphasis>q</emphasis> texture coordinates. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glTexCoordPointer": {
        "signature": "void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of texture coordinates",
        "parameters": {
            "size": "<listitem> <para> Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of each texture coordinate. Symbolic constants `GL_SHORT`, `GL_INT`, `GL_FLOAT`, or `GL_DOUBLE` are accepted. The initial value is `GL_FLOAT`. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive texture coordinate sets. If <parameter>stride</parameter> is 0, the array elements are understood to be tightly packed. The initial value is 0. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0. </para> </listitem>"
        }
    },
    "glTexEnvf": {
        "signature": "void glTexEnvf(GLenum target, GLenum pname, GLfloat param)",
        "purpose": "set texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV`, `GL_TEXTURE_FILTER_CONTROL` or `GL_POINT_SPRITE`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture environment parameter. May be either `GL_TEXTURE_ENV_MODE`, `GL_TEXTURE_LOD_BIAS`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single symbolic constant, one of `GL_ADD`, `GL_ADD_SIGNED`, `GL_INTERPOLATE`, `GL_MODULATE`, `GL_DECAL`, `GL_BLEND`, `GL_REPLACE`, `GL_SUBTRACT`, `GL_COMBINE`, `GL_TEXTURE`, `GL_CONSTANT`, `GL_PRIMARY_COLOR`, `GL_PREVIOUS`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the `GL_RGB_SCALE` or `GL_ALPHA_SCALE`. </para> </listitem>"
        }
    },
    "glTexEnvi": {
        "signature": "void glTexEnvi(GLenum target, GLenum pname, GLint param)",
        "purpose": "set texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV`, `GL_TEXTURE_FILTER_CONTROL` or `GL_POINT_SPRITE`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture environment parameter. May be either `GL_TEXTURE_ENV_MODE`, `GL_TEXTURE_LOD_BIAS`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single symbolic constant, one of `GL_ADD`, `GL_ADD_SIGNED`, `GL_INTERPOLATE`, `GL_MODULATE`, `GL_DECAL`, `GL_BLEND`, `GL_REPLACE`, `GL_SUBTRACT`, `GL_COMBINE`, `GL_TEXTURE`, `GL_CONSTANT`, `GL_PRIMARY_COLOR`, `GL_PREVIOUS`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the `GL_RGB_SCALE` or `GL_ALPHA_SCALE`. </para> </listitem>"
        }
    },
    "glTexEnvfv": {
        "signature": "void glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params)",
        "purpose": "set texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV`, `GL_TEXTURE_FILTER_CONTROL` or `GL_POINT_SPRITE`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture environment parameter. May be either `GL_TEXTURE_ENV_MODE`, `GL_TEXTURE_LOD_BIAS`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single symbolic constant, one of `GL_ADD`, `GL_ADD_SIGNED`, `GL_INTERPOLATE`, `GL_MODULATE`, `GL_DECAL`, `GL_BLEND`, `GL_REPLACE`, `GL_SUBTRACT`, `GL_COMBINE`, `GL_TEXTURE`, `GL_CONSTANT`, `GL_PRIMARY_COLOR`, `GL_PREVIOUS`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the `GL_RGB_SCALE` or `GL_ALPHA_SCALE`. </para> </listitem>"
        }
    },
    "glTexEnviv": {
        "signature": "void glTexEnviv(GLenum target, GLenum pname, const GLint * params)",
        "purpose": "set texture environment parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies a texture environment. May be `GL_TEXTURE_ENV`, `GL_TEXTURE_FILTER_CONTROL` or `GL_POINT_SPRITE`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture environment parameter. May be either `GL_TEXTURE_ENV_MODE`, `GL_TEXTURE_LOD_BIAS`, `GL_COMBINE_RGB`, `GL_COMBINE_ALPHA`, `GL_SRC0_RGB`, `GL_SRC1_RGB`, `GL_SRC2_RGB`, `GL_SRC0_ALPHA`, `GL_SRC1_ALPHA`, `GL_SRC2_ALPHA`, `GL_OPERAND0_RGB`, `GL_OPERAND1_RGB`, `GL_OPERAND2_RGB`, `GL_OPERAND0_ALPHA`, `GL_OPERAND1_ALPHA`, `GL_OPERAND2_ALPHA`, `GL_RGB_SCALE`, `GL_ALPHA_SCALE`, or `GL_COORD_REPLACE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single symbolic constant, one of `GL_ADD`, `GL_ADD_SIGNED`, `GL_INTERPOLATE`, `GL_MODULATE`, `GL_DECAL`, `GL_BLEND`, `GL_REPLACE`, `GL_SUBTRACT`, `GL_COMBINE`, `GL_TEXTURE`, `GL_CONSTANT`, `GL_PRIMARY_COLOR`, `GL_PREVIOUS`, `GL_SRC_COLOR`, `GL_ONE_MINUS_SRC_COLOR`, `GL_SRC_ALPHA`, `GL_ONE_MINUS_SRC_ALPHA`, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the `GL_RGB_SCALE` or `GL_ALPHA_SCALE`. </para> </listitem>"
        }
    },
    "glTexGeni": {
        "signature": "void glTexGeni(GLenum coord, GLenum pname, GLint param)",
        "purpose": "control the generation of texture coordinates",
        "parameters": {
            "coord": "<listitem> <para> Specifies a texture coordinate. Must be one of `GL_S`, `GL_T`, `GL_R`, or `GL_Q`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of the texture-coordinate generation function. Must be `GL_TEXTURE_GEN_MODE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single-valued texture generation parameter, one of `GL_OBJECT_LINEAR`, `GL_EYE_LINEAR`, `GL_SPHERE_MAP`, `GL_NORMAL_MAP`, or `GL_REFLECTION_MAP`. </para> </listitem>"
        }
    },
    "glTexGenf": {
        "signature": "void glTexGenf(GLenum coord, GLenum pname, GLfloat param)",
        "purpose": "control the generation of texture coordinates",
        "parameters": {
            "coord": "<listitem> <para> Specifies a texture coordinate. Must be one of `GL_S`, `GL_T`, `GL_R`, or `GL_Q`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of the texture-coordinate generation function. Must be `GL_TEXTURE_GEN_MODE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single-valued texture generation parameter, one of `GL_OBJECT_LINEAR`, `GL_EYE_LINEAR`, `GL_SPHERE_MAP`, `GL_NORMAL_MAP`, or `GL_REFLECTION_MAP`. </para> </listitem>"
        }
    },
    "glTexGend": {
        "signature": "void glTexGend(GLenum coord, GLenum pname, GLdouble param)",
        "purpose": "control the generation of texture coordinates",
        "parameters": {
            "coord": "<listitem> <para> Specifies a texture coordinate. Must be one of `GL_S`, `GL_T`, `GL_R`, or `GL_Q`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of the texture-coordinate generation function. Must be `GL_TEXTURE_GEN_MODE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single-valued texture generation parameter, one of `GL_OBJECT_LINEAR`, `GL_EYE_LINEAR`, `GL_SPHERE_MAP`, `GL_NORMAL_MAP`, or `GL_REFLECTION_MAP`. </para> </listitem>"
        }
    },
    "glTexGeniv": {
        "signature": "void glTexGeniv(GLenum coord, GLenum pname, const GLint * params)",
        "purpose": "control the generation of texture coordinates",
        "parameters": {
            "coord": "<listitem> <para> Specifies a texture coordinate. Must be one of `GL_S`, `GL_T`, `GL_R`, or `GL_Q`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of the texture-coordinate generation function. Must be `GL_TEXTURE_GEN_MODE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single-valued texture generation parameter, one of `GL_OBJECT_LINEAR`, `GL_EYE_LINEAR`, `GL_SPHERE_MAP`, `GL_NORMAL_MAP`, or `GL_REFLECTION_MAP`. </para> </listitem>"
        }
    },
    "glTexGenfv": {
        "signature": "void glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params)",
        "purpose": "control the generation of texture coordinates",
        "parameters": {
            "coord": "<listitem> <para> Specifies a texture coordinate. Must be one of `GL_S`, `GL_T`, `GL_R`, or `GL_Q`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of the texture-coordinate generation function. Must be `GL_TEXTURE_GEN_MODE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single-valued texture generation parameter, one of `GL_OBJECT_LINEAR`, `GL_EYE_LINEAR`, `GL_SPHERE_MAP`, `GL_NORMAL_MAP`, or `GL_REFLECTION_MAP`. </para> </listitem>"
        }
    },
    "glTexGendv": {
        "signature": "void glTexGendv(GLenum coord, GLenum pname, const GLdouble * params)",
        "purpose": "control the generation of texture coordinates",
        "parameters": {
            "coord": "<listitem> <para> Specifies a texture coordinate. Must be one of `GL_S`, `GL_T`, `GL_R`, or `GL_Q`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of the texture-coordinate generation function. Must be `GL_TEXTURE_GEN_MODE`. </para> </listitem>",
            "param": "<listitem> <para> Specifies a single-valued texture generation parameter, one of `GL_OBJECT_LINEAR`, `GL_EYE_LINEAR`, `GL_SPHERE_MAP`, `GL_NORMAL_MAP`, or `GL_REFLECTION_MAP`. </para> </listitem>"
        }
    },
    "glTexImage1D": {
        "signature": "void glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const void * data)",
        "purpose": "specify a one-dimensional texture image",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_1D` or `GL_PROXY_TEXTURE_1D`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "internalFormat": "<listitem> <para> Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_COMPRESSED_ALPHA`, `GL_COMPRESSED_LUMINANCE`, `GL_COMPRESSED_LUMINANCE_ALPHA`, `GL_COMPRESSED_INTENSITY`, `GL_COMPRESSED_RGB`, `GL_COMPRESSED_RGBA`, `GL_DEPTH_COMPONENT`, `GL_DEPTH_COMPONENT16`, `GL_DEPTH_COMPONENT24`, `GL_DEPTH_COMPONENT32`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, `GL_RGBA16`, `GL_SLUMINANCE`, `GL_SLUMINANCE8`, `GL_SLUMINANCE_ALPHA`, `GL_SLUMINANCE8_ALPHA8`, `GL_SRGB`, `GL_SRGB8`, `GL_SRGB_ALPHA`, or `GL_SRGB8_ALPHA8`. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be either 0 or 1. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are accepted: `GL_COLOR_INDEX`, `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of the pixel data. The following symbolic values are accepted: `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "glTexImage2D": {
        "signature": "void glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * data)",
        "purpose": "specify a two-dimensional texture image",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_2D`, `GL_PROXY_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`, or `GL_PROXY_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "internalFormat": "<listitem> <para> Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_COMPRESSED_ALPHA`, `GL_COMPRESSED_LUMINANCE`, `GL_COMPRESSED_LUMINANCE_ALPHA`, `GL_COMPRESSED_INTENSITY`, `GL_COMPRESSED_RGB`, `GL_COMPRESSED_RGBA`, `GL_DEPTH_COMPONENT`, `GL_DEPTH_COMPONENT16`, `GL_DEPTH_COMPONENT24`, `GL_DEPTH_COMPONENT32`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, `GL_RGBA16`, `GL_SLUMINANCE`, `GL_SLUMINANCE8`, `GL_SLUMINANCE_ALPHA`, `GL_SLUMINANCE8_ALPHA8`, `GL_SRGB`, `GL_SRGB8`, `GL_SRGB_ALPHA`, or `GL_SRGB8_ALPHA8`. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. All implementations support texture images that are at least 64 texels wide. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">m</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">m</mi></math></inlineequation>. All implementations support texture images that are at least 64 texels high. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be either 0 or 1. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are accepted: `GL_COLOR_INDEX`, `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of the pixel data. The following symbolic values are accepted: `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "glTexImage3D": {
        "signature": "void glTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * data)",
        "purpose": "specify a three-dimensional texture image",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_3D` or `GL_PROXY_TEXTURE_3D`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation> is the <inlineequation><math> <msup><mi mathvariant=\"italic\">n</mi> <mi mathvariant=\"italic\">th</mi> </msup> </math></inlineequation> mipmap reduction image. </para> </listitem>",
            "internalFormat": "<listitem> <para> Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: `GL_ALPHA`, `GL_ALPHA4`, `GL_ALPHA8`, `GL_ALPHA12`, `GL_ALPHA16`, `GL_COMPRESSED_ALPHA`, `GL_COMPRESSED_LUMINANCE`, `GL_COMPRESSED_LUMINANCE_ALPHA`, `GL_COMPRESSED_INTENSITY`, `GL_COMPRESSED_RGB`, `GL_COMPRESSED_RGBA`, `GL_LUMINANCE`, `GL_LUMINANCE4`, `GL_LUMINANCE8`, `GL_LUMINANCE12`, `GL_LUMINANCE16`, `GL_LUMINANCE_ALPHA`, `GL_LUMINANCE4_ALPHA4`, `GL_LUMINANCE6_ALPHA2`, `GL_LUMINANCE8_ALPHA8`, `GL_LUMINANCE12_ALPHA4`, `GL_LUMINANCE12_ALPHA12`, `GL_LUMINANCE16_ALPHA16`, `GL_INTENSITY`, `GL_INTENSITY4`, `GL_INTENSITY8`, `GL_INTENSITY12`, `GL_INTENSITY16`, `GL_R3_G3_B2`, `GL_RGB`, `GL_RGB4`, `GL_RGB5`, `GL_RGB8`, `GL_RGB10`, `GL_RGB12`, `GL_RGB16`, `GL_RGBA`, `GL_RGBA2`, `GL_RGBA4`, `GL_RGB5_A1`, `GL_RGBA8`, `GL_RGB10_A2`, `GL_RGBA12`, `GL_RGBA16`, `GL_SLUMINANCE`, `GL_SLUMINANCE8`, `GL_SLUMINANCE_ALPHA`, `GL_SLUMINANCE8_ALPHA8`, `GL_SRGB`, `GL_SRGB8`, `GL_SRGB_ALPHA`, or `GL_SRGB8_ALPHA8`. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">n</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">n</mi></math></inlineequation>. All implementations support 3D texture images that are at least 16 texels wide. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">m</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">m</mi></math></inlineequation>. All implementations support 3D texture images that are at least 16 texels high. </para> </listitem>",
            "depth": "<listitem> <para> Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be <inlineequation><math> <mrow> <msup><mn>2</mn> <mi mathvariant=\"italic\">k</mi> </msup> <mo>+</mo> <mrow> <mn>2</mn> <mo /> <mfenced open=\"(\" close=\")\"> <mi mathvariant=\"italic\">border</mi> </mfenced> </mrow> </mrow> </math></inlineequation> for some integer <inlineequation><math><mi mathvariant=\"italic\">k</mi></math></inlineequation>. All implementations support 3D texture images that are at least 16 texels deep. </para> </listitem>",
            "border": "<listitem> <para> Specifies the width of the border. Must be either 0 or 1. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are accepted: `GL_COLOR_INDEX`, `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of the pixel data. The following symbolic values are accepted: `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "glTexParameterf": {
        "signature": "void glTexParameterf(GLenum target, GLenum pname, GLfloat param)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture, which must be either `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, or `GL_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture parameter. <parameter>pname</parameter> can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_MIN_LOD`, `GL_TEXTURE_MAX_LOD`, `GL_TEXTURE_BASE_LEVEL`, `GL_TEXTURE_MAX_LEVEL`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, `GL_TEXTURE_WRAP_R`, `GL_TEXTURE_PRIORITY`, `GL_TEXTURE_COMPARE_MODE`, `GL_TEXTURE_COMPARE_FUNC`, `GL_DEPTH_TEXTURE_MODE`, or `GL_GENERATE_MIPMAP`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value of <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glTexParameteri": {
        "signature": "void glTexParameteri(GLenum target, GLenum pname, GLint param)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture, which must be either `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, or `GL_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture parameter. <parameter>pname</parameter> can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_MIN_LOD`, `GL_TEXTURE_MAX_LOD`, `GL_TEXTURE_BASE_LEVEL`, `GL_TEXTURE_MAX_LEVEL`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, `GL_TEXTURE_WRAP_R`, `GL_TEXTURE_PRIORITY`, `GL_TEXTURE_COMPARE_MODE`, `GL_TEXTURE_COMPARE_FUNC`, `GL_DEPTH_TEXTURE_MODE`, or `GL_GENERATE_MIPMAP`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value of <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glTexParameterfv": {
        "signature": "void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture, which must be either `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, or `GL_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture parameter. <parameter>pname</parameter> can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_MIN_LOD`, `GL_TEXTURE_MAX_LOD`, `GL_TEXTURE_BASE_LEVEL`, `GL_TEXTURE_MAX_LEVEL`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, `GL_TEXTURE_WRAP_R`, `GL_TEXTURE_PRIORITY`, `GL_TEXTURE_COMPARE_MODE`, `GL_TEXTURE_COMPARE_FUNC`, `GL_DEPTH_TEXTURE_MODE`, or `GL_GENERATE_MIPMAP`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value of <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glTexParameteriv": {
        "signature": "void glTexParameteriv(GLenum target, GLenum pname, const GLint * params)",
        "purpose": "set texture parameters",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture, which must be either `GL_TEXTURE_1D`, `GL_TEXTURE_2D`, `GL_TEXTURE_3D`, or `GL_TEXTURE_CUBE_MAP`. </para> </listitem>",
            "pname": "<listitem> <para> Specifies the symbolic name of a single-valued texture parameter. <parameter>pname</parameter> can be one of the following: `GL_TEXTURE_MIN_FILTER`, `GL_TEXTURE_MAG_FILTER`, `GL_TEXTURE_MIN_LOD`, `GL_TEXTURE_MAX_LOD`, `GL_TEXTURE_BASE_LEVEL`, `GL_TEXTURE_MAX_LEVEL`, `GL_TEXTURE_WRAP_S`, `GL_TEXTURE_WRAP_T`, `GL_TEXTURE_WRAP_R`, `GL_TEXTURE_PRIORITY`, `GL_TEXTURE_COMPARE_MODE`, `GL_TEXTURE_COMPARE_FUNC`, `GL_DEPTH_TEXTURE_MODE`, or `GL_GENERATE_MIPMAP`. </para> </listitem>",
            "param": "<listitem> <para> Specifies the value of <parameter>pname</parameter>. </para> </listitem>"
        }
    },
    "glTexSubImage1D": {
        "signature": "void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * data)",
        "purpose": "specify a one-dimensional texture subimage",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_1D`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are accepted: `GL_COLOR_INDEX`, `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of the pixel data. The following symbolic values are accepted: `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "glTexSubImage2D": {
        "signature": "void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * data)",
        "purpose": "specify a two-dimensional texture subimage",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_2D`, `GL_TEXTURE_CUBE_MAP_POSITIVE_X`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`, `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`, `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`, or `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "yoffset": "<listitem> <para> Specifies a texel offset in the y direction within the texture array. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture subimage. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are accepted: `GL_COLOR_INDEX`, `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of the pixel data. The following symbolic values are accepted: `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "glTexSubImage3D": {
        "signature": "void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data)",
        "purpose": "specify a three-dimensional texture subimage",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GL_TEXTURE_3D`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the level-of-detail number. Level 0 is the base image level. Level <emphasis>n</emphasis> is the <emphasis>n</emphasis>th mipmap reduction image. </para> </listitem>",
            "xoffset": "<listitem> <para> Specifies a texel offset in the x direction within the texture array. </para> </listitem>",
            "yoffset": "<listitem> <para> Specifies a texel offset in the y direction within the texture array. </para> </listitem>",
            "zoffset": "<listitem> <para> Specifies a texel offset in the z direction within the texture array. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width of the texture subimage. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the texture subimage. </para> </listitem>",
            "depth": "<listitem> <para> Specifies the depth of the texture subimage. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are accepted: `GL_COLOR_INDEX`, `GL_RED`, `GL_GREEN`, `GL_BLUE`, `GL_ALPHA`, `GL_RGB`, `GL_BGR`, `GL_RGBA`, `GL_BGRA`, `GL_LUMINANCE`, and `GL_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of the pixel data. The following symbolic values are accepted: `GL_UNSIGNED_BYTE`, `GL_BYTE`, `GL_BITMAP`, `GL_UNSIGNED_SHORT`, `GL_SHORT`, `GL_UNSIGNED_INT`, `GL_INT`, `GL_FLOAT`, `GL_UNSIGNED_BYTE_3_3_2`, `GL_UNSIGNED_BYTE_2_3_3_REV`, `GL_UNSIGNED_SHORT_5_6_5`, `GL_UNSIGNED_SHORT_5_6_5_REV`, `GL_UNSIGNED_SHORT_4_4_4_4`, `GL_UNSIGNED_SHORT_4_4_4_4_REV`, `GL_UNSIGNED_SHORT_5_5_5_1`, `GL_UNSIGNED_SHORT_1_5_5_5_REV`, `GL_UNSIGNED_INT_8_8_8_8`, `GL_UNSIGNED_INT_8_8_8_8_REV`, `GL_UNSIGNED_INT_10_10_10_2`, and `GL_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "glTranslated": {
        "signature": "void glTranslated(GLdouble x, GLdouble y, GLdouble z)",
        "purpose": "multiply the current matrix by a translation matrix",
        "parameters": {
            "x": "<listitem> <para> Specify the <emphasis>x</emphasis>, <emphasis>y</emphasis>, and <emphasis>z</emphasis> coordinates of a translation vector. </para> </listitem>"
        }
    },
    "glTranslatef": {
        "signature": "void glTranslatef(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "multiply the current matrix by a translation matrix",
        "parameters": {
            "x": "<listitem> <para> Specify the <emphasis>x</emphasis>, <emphasis>y</emphasis>, and <emphasis>z</emphasis> coordinates of a translation vector. </para> </listitem>"
        }
    },
    "gluBeginCurve": {
        "signature": "void gluBeginCurve(GLUnurbs* nurb)",
        "purpose": "delimit a NURBS curve definition",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluEndCurve": {
        "signature": "void gluEndCurve(GLUnurbs* nurb)",
        "purpose": "delimit a NURBS curve definition",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluBeginPolygon": {
        "signature": "void gluBeginPolygon(GLUtesselator* tess)",
        "purpose": "delimit a polygon description",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluEndPolygon": {
        "signature": "void gluEndPolygon(GLUtesselator* tess)",
        "purpose": "delimit a polygon description",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluBeginSurface": {
        "signature": "void gluBeginSurface(GLUnurbs* nurb)",
        "purpose": "delimit a NURBS surface definition",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluEndSurface": {
        "signature": "void gluEndSurface(GLUnurbs* nurb)",
        "purpose": "delimit a NURBS surface definition",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluBeginTrim": {
        "signature": "void gluBeginTrim(GLUnurbs* nurb)",
        "purpose": "delimit a NURBS trimming loop definition",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluEndTrim": {
        "signature": "void gluEndTrim(GLUnurbs* nurb)",
        "purpose": "delimit a NURBS trimming loop definition",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluBuild1DMipmapLevels": {
        "signature": "GLint gluBuild1DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void * data)",
        "purpose": "builds a subset of one-dimensional mipmap levels",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GLU_TEXTURE_1D`. </para> </listitem>",
            "internalFormat": "<listitem> <para> Requests the internal storage format of the texture image. The most current version of the SGI implementation of GLU does not check this value for validity before passing it on to the underlying OpenGL implementation. A value that is not accepted by the OpenGL implementation will lead to an OpenGL error. The benefit of not checking this value at the GLU level is that OpenGL extensions can add new internal texture formats without requiring a revision of the GLU implementation. Older implementations of GLU check this value and raise a GLU error if it is not 1, 2, 3, or 4 or one of the following symbolic constants: `GLU_ALPHA`, `GLU_ALPHA4`, `GLU_ALPHA8`, `GLU_ALPHA12`, `GLU_ALPHA16`, `GLU_LUMINANCE`, `GLU_LUMINANCE4`, `GLU_LUMINANCE8`, `GLU_LUMINANCE12`, `GLU_LUMINANCE16`, `GLU_LUMINANCE_ALPHA`, `GLU_LUMINANCE4_ALPHA4`, `GLU_LUMINANCE6_ALPHA2`, `GLU_LUMINANCE8_ALPHA8`, `GLU_LUMINANCE12_ALPHA4`, `GLU_LUMINANCE12_ALPHA12`, `GLU_LUMINANCE16_ALPHA16`, `GLU_INTENSITY`, `GLU_INTENSITY4`, `GLU_INTENSITY8`, `GLU_INTENSITY12`, `GLU_INTENSITY16`, `GLU_RGB`, `GLU_R3_G3_B2`, `GLU_RGB4`, `GLU_RGB5`, `GLU_RGB8`, `GLU_RGB10`, `GLU_RGB12`, `GLU_RGB16`, `GLU_RGBA`, `GLU_RGBA2`, `GLU_RGBA4`, `GLU_RGB5_A1`, `GLU_RGBA8`, `GLU_RGB10_A2`, `GLU_RGBA12`, or `GLU_RGBA16`. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width in pixels of the texture image. This should be a power of 2. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. Must be one of: `GLU_COLOR_INDEX`, `GLU_DEPTH_COMPONENT`, `GLU_RED`, `GLU_GREEN`, `GLU_BLUE`, `GLU_ALPHA`, `GLU_RGB`, `GLU_RGBA`, `GLU_BGR`, `GLU_BGRA`, `GLU_LUMINANCE`, or `GLU_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type for <parameter>data</parameter>. Must be one of: `GLU_UNSIGNED_BYTE`, `GLU_BYTE`, `GLU_BITMAP`, `GLU_UNSIGNED_SHORT`, `GLU_SHORT`, `GLU_UNSIGNED_INT`, `GLU_INT`, `GLU_FLOAT`, `GLU_UNSIGNED_BYTE_3_3_2`, `GLU_UNSIGNED_BYTE_2_3_3_REV`, `GLU_UNSIGNED_SHORT_5_6_5`, `GLU_UNSIGNED_SHORT_5_6_5_REV`, `GLU_UNSIGNED_SHORT_4_4_4_4`, `GLU_UNSIGNED_SHORT_4_4_4_4_REV`, `GLU_UNSIGNED_SHORT_5_5_5_1`, `GLU_UNSIGNED_SHORT_1_5_5_5_REV`, `GLU_UNSIGNED_INT_8_8_8_8`, `GLU_UNSIGNED_INT_8_8_8_8_REV`, `GLU_UNSIGNED_INT_10_10_10_2`, or `GLU_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the mipmap level of the image data. </para> </listitem>",
            "base": "<listitem> <para> Specifies the minimum mipmap level to pass to <citerefentry><refentrytitle>glTexImage1D</refentrytitle></citerefentry>. </para> </listitem>",
            "max": "<listitem> <para> Specifies the maximum mipmap level to pass to <citerefentry><refentrytitle>glTexImage1D</refentrytitle></citerefentry>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "gluBuild1DMipmaps": {
        "signature": "GLint gluBuild1DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, const void * data)",
        "purpose": "builds a one-dimensional mipmap",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GLU_TEXTURE_1D`. </para> </listitem>",
            "internalFormat": "<listitem> <para> Requests the internal storage format of the texture image. The most current version of the SGI implementation of GLU does not check this value for validity before passing it on to the underlying OpenGL implementation. A value that is not accepted by the OpenGL implementation will lead to an OpenGL error. The benefit of not checking this value at the GLU level is that OpenGL extensions can add new internal texture formats without requiring a revision of the GLU implementation. Older implementations of GLU check this value and raise a GLU error if it is not 1, 2, 3, or 4 or one of the following symbolic constants: `GLU_ALPHA`, `GLU_ALPHA4`, `GLU_ALPHA8`, `GLU_ALPHA12`, `GLU_ALPHA16`, `GLU_LUMINANCE`, `GLU_LUMINANCE4`, `GLU_LUMINANCE8`, `GLU_LUMINANCE12`, `GLU_LUMINANCE16`, `GLU_LUMINANCE_ALPHA`, `GLU_LUMINANCE4_ALPHA4`, `GLU_LUMINANCE6_ALPHA2`, `GLU_LUMINANCE8_ALPHA8`, `GLU_LUMINANCE12_ALPHA4`, `GLU_LUMINANCE12_ALPHA12`, `GLU_LUMINANCE16_ALPHA16`, `GLU_INTENSITY`, `GLU_INTENSITY4`, `GLU_INTENSITY8`, `GLU_INTENSITY12`, `GLU_INTENSITY16`, `GLU_RGB`, `GLU_R3_G3_B2`, `GLU_RGB4`, `GLU_RGB5`, `GLU_RGB8`, `GLU_RGB10`, `GLU_RGB12`, `GLU_RGB16`, `GLU_RGBA`, `GLU_RGBA2`, `GLU_RGBA4`, `GLU_RGB5_A1`, `GLU_RGBA8`, `GLU_RGB10_A2`, `GLU_RGBA12`, or `GLU_RGBA16`. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width, in pixels, of the texture image. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. Must be one of `GLU_COLOR_INDEX`, `GLU_DEPTH_COMPONENT`, `GLU_RED`, `GLU_GREEN`, `GLU_BLUE`, `GLU_ALPHA`, `GLU_RGB`, `GLU_RGBA`, `GLU_BGR`, `GLU_BGRA`, `GLU_LUMINANCE`, or `GLU_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type for <parameter>data</parameter>. Must be one of `GLU_UNSIGNED_BYTE`, `GLU_BYTE`, `GLU_BITMAP`, `GLU_UNSIGNED_SHORT`, `GLU_SHORT`, `GLU_UNSIGNED_INT`, `GLU_INT`, `GLU_FLOAT`, `GLU_UNSIGNED_BYTE_3_3_2`, `GLU_UNSIGNED_BYTE_2_3_3_REV`, `GLU_UNSIGNED_SHORT_5_6_5`, `GLU_UNSIGNED_SHORT_5_6_5_REV`, `GLU_UNSIGNED_SHORT_4_4_4_4`, `GLU_UNSIGNED_SHORT_4_4_4_4_REV`, `GLU_UNSIGNED_SHORT_5_5_5_1`, `GLU_UNSIGNED_SHORT_1_5_5_5_REV`, `GLU_UNSIGNED_INT_8_8_8_8`, `GLU_UNSIGNED_INT_8_8_8_8_REV`, `GLU_UNSIGNED_INT_10_10_10_2`, or `GLU_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "gluBuild2DMipmapLevels": {
        "signature": "GLint gluBuild2DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void * data)",
        "purpose": "builds a subset of two-dimensional mipmap levels",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GLU_TEXTURE_2D`. </para> </listitem>",
            "internalFormat": "<listitem> <para> Requests the internal storage format of the texture image. The most current version of the SGI implementation of GLU does not check this value for validity before passing it on to the underlying OpenGL implementation. A value that is not accepted by the OpenGL implementation will lead to an OpenGL error. The benefit of not checking this value at the GLU level is that OpenGL extensions can add new internal texture formats without requiring a revision of the GLU implementation. Older implementations of GLU check this value and raise a GLU error if it is not 1, 2, 3, or 4 or one of the following symbolic constants: `GLU_ALPHA`, `GLU_ALPHA4`, `GLU_ALPHA8`, `GLU_ALPHA12`, `GLU_ALPHA16`, `GLU_LUMINANCE`, `GLU_LUMINANCE4`, `GLU_LUMINANCE8`, `GLU_LUMINANCE12`, `GLU_LUMINANCE16`, `GLU_LUMINANCE_ALPHA`, `GLU_LUMINANCE4_ALPHA4`, `GLU_LUMINANCE6_ALPHA2`, `GLU_LUMINANCE8_ALPHA8`, `GLU_LUMINANCE12_ALPHA4`, `GLU_LUMINANCE12_ALPHA12`, `GLU_LUMINANCE16_ALPHA16`, `GLU_INTENSITY`, `GLU_INTENSITY4`, `GLU_INTENSITY8`, `GLU_INTENSITY12`, `GLU_INTENSITY16`, `GLU_RGB`, `GLU_R3_G3_B2`, `GLU_RGB4`, `GLU_RGB5`, `GLU_RGB8`, `GLU_RGB10`, `GLU_RGB12`, `GLU_RGB16`, `GLU_RGBA`, `GLU_RGBA2`, `GLU_RGBA4`, `GLU_RGB5_A1`, `GLU_RGBA8`, `GLU_RGB10_A2`, `GLU_RGBA12`, or `GLU_RGBA16`. </para> </listitem>",
            "width": "<listitem> <para> Specifies the width and height, respectively, in pixels of the texture image. These should be a power of 2. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. Must be one of `GLU_COLOR_INDEX`, `GLU_DEPTH_COMPONENT`, `GLU_RED`, `GLU_GREEN`, `GLU_BLUE`, `GLU_ALPHA`, `GLU_RGB`, `GLU_RGBA`, `GLU_BGR`, `GLU_BGRA`, `GLU_LUMINANCE`, or `GLU_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type for <parameter>data</parameter>. Must be one of `GLU_UNSIGNED_BYTE`, `GLU_BYTE`, `GLU_BITMAP`, `GLU_UNSIGNED_SHORT`, `GLU_SHORT`, `GLU_UNSIGNED_INT`, `GLU_INT`, `GLU_FLOAT`, `GLU_UNSIGNED_BYTE_3_3_2`, `GLU_UNSIGNED_BYTE_2_3_3_REV`, `GLU_UNSIGNED_SHORT_5_6_5`, `GLU_UNSIGNED_SHORT_5_6_5_REV`, `GLU_UNSIGNED_SHORT_4_4_4_4`, `GLU_UNSIGNED_SHORT_4_4_4_4_REV`, `GLU_UNSIGNED_SHORT_5_5_5_1`, `GLU_UNSIGNED_SHORT_1_5_5_5_REV`, `GLU_UNSIGNED_INT_8_8_8_8`, `GLU_UNSIGNED_INT_8_8_8_8_REV`, `GLU_UNSIGNED_INT_10_10_10_2`, or `GLU_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the mipmap level of the image data. </para> </listitem>",
            "base": "<listitem> <para> Specifies the minimum mipmap level to pass to <citerefentry><refentrytitle>glTexImage2D</refentrytitle></citerefentry>. </para> </listitem>",
            "max": "<listitem> <para> Specifies the maximum mipmap level to pass to <citerefentry><refentrytitle>glTexImage2D</refentrytitle></citerefentry>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "gluBuild2DMipmaps": {
        "signature": "GLint gluBuild2DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * data)",
        "purpose": "builds a two-dimensional mipmap",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GLU_TEXTURE_2D`. </para> </listitem>",
            "internalFormat": "<listitem> <para> Requests the internal storage format of the texture image. The most current version of the SGI implementation of GLU does not check this value for validity before passing it on to the underlying OpenGL implementation. A value that is not accepted by the OpenGL implementation will lead to an OpenGL error. The benefit of not checking this value at the GLU level is that OpenGL extensions can add new internal texture formats without requiring a revision of the GLU implementation. Older implementations of GLU check this value and raise a GLU error if it is not 1, 2, 3, or 4 or one of the following symbolic constants: `GLU_ALPHA`, `GLU_ALPHA4`, `GLU_ALPHA8`, `GLU_ALPHA12`, `GLU_ALPHA16`, `GLU_LUMINANCE`, `GLU_LUMINANCE4`, `GLU_LUMINANCE8`, `GLU_LUMINANCE12`, `GLU_LUMINANCE16`, `GLU_LUMINANCE_ALPHA`, `GLU_LUMINANCE4_ALPHA4`, `GLU_LUMINANCE6_ALPHA2`, `GLU_LUMINANCE8_ALPHA8`, `GLU_LUMINANCE12_ALPHA4`, `GLU_LUMINANCE12_ALPHA12`, `GLU_LUMINANCE16_ALPHA16`, `GLU_INTENSITY`, `GLU_INTENSITY4`, `GLU_INTENSITY8`, `GLU_INTENSITY12`, `GLU_INTENSITY16`, `GLU_RGB`, `GLU_R3_G3_B2`, `GLU_RGB4`, `GLU_RGB5`, `GLU_RGB8`, `GLU_RGB10`, `GLU_RGB12`, `GLU_RGB16`, `GLU_RGBA`, `GLU_RGBA2`, `GLU_RGBA4`, `GLU_RGB5_A1`, `GLU_RGBA8`, `GLU_RGB10_A2`, `GLU_RGBA12`, or `GLU_RGBA16`. </para> </listitem>",
            "width": "<listitem> <para> Specifies in pixels the width and height, respectively, of the texture image. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. Must be one of `GLU_COLOR_INDEX`, `GLU_DEPTH_COMPONENT`, `GLU_RED`, `GLU_GREEN`, `GLU_BLUE`, `GLU_ALPHA`, `GLU_RGB`, `GLU_RGBA`, `GLU_BGR`, `GLU_BGRA`, `GLU_LUMINANCE`, or `GLU_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type for <parameter>data</parameter>. Must be one of `GLU_UNSIGNED_BYTE`, `GLU_BYTE`, `GLU_BITMAP`, `GLU_UNSIGNED_SHORT`, `GLU_SHORT`, `GLU_UNSIGNED_INT`, `GLU_INT`, `GLU_FLOAT`, `GLU_UNSIGNED_BYTE_3_3_2`, `GLU_UNSIGNED_BYTE_2_3_3_REV`, `GLU_UNSIGNED_SHORT_5_6_5`, `GLU_UNSIGNED_SHORT_5_6_5_REV`, `GLU_UNSIGNED_SHORT_4_4_4_4`, `GLU_UNSIGNED_SHORT_4_4_4_4_REV`, `GLU_UNSIGNED_SHORT_5_5_5_1`, `GLU_UNSIGNED_SHORT_1_5_5_5_REV`, `GLU_UNSIGNED_INT_8_8_8_8`, `GLU_UNSIGNED_INT_8_8_8_8_REV`, `GLU_UNSIGNED_INT_10_10_10_2`, or `GLU_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "gluBuild3DMipmapLevels": {
        "signature": "GLint gluBuild3DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void * data)",
        "purpose": "builds a subset of three-dimensional mipmap levels",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GLU_TEXTURE_3D`. </para> </listitem>",
            "internalFormat": "<listitem> <para> Requests the internal storage format of the texture image. The most current version of the SGI implementation of GLU does not check this value for validity before passing it on to the underlying OpenGL implementation. A value that is not accepted by the OpenGL implementation will lead to an OpenGL error. The benefit of not checking this value at the GLU level is that OpenGL extensions can add new internal texture formats without requiring a revision of the GLU implementation. Older implementations of GLU check this value and raise a GLU error if it is not 1, 2, 3, or 4 or one of the following symbolic constants: `GLU_ALPHA`, `GLU_ALPHA4`, `GLU_ALPHA8`, `GLU_ALPHA12`, `GLU_ALPHA16`, `GLU_LUMINANCE`, `GLU_LUMINANCE4`, `GLU_LUMINANCE8`, `GLU_LUMINANCE12`, `GLU_LUMINANCE16`, `GLU_LUMINANCE_ALPHA`, `GLU_LUMINANCE4_ALPHA4`, `GLU_LUMINANCE6_ALPHA2`, `GLU_LUMINANCE8_ALPHA8`, `GLU_LUMINANCE12_ALPHA4`, `GLU_LUMINANCE12_ALPHA12`, `GLU_LUMINANCE16_ALPHA16`, `GLU_INTENSITY`, `GLU_INTENSITY4`, `GLU_INTENSITY8`, `GLU_INTENSITY12`, `GLU_INTENSITY16`, `GLU_RGB`, `GLU_R3_G3_B2`, `GLU_RGB4`, `GLU_RGB5`, `GLU_RGB8`, `GLU_RGB10`, `GLU_RGB12`, `GLU_RGB16`, `GLU_RGBA`, `GLU_RGBA2`, `GLU_RGBA4`, `GLU_RGB5_A1`, `GLU_RGBA8`, `GLU_RGB10_A2`, `GLU_RGBA12`, or `GLU_RGBA16`. </para> </listitem>",
            "width": "<listitem> <para> Specifies in pixels the width, height and depth respectively, of the texture image. These should be a power of 2. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. Must be one of `GLU_COLOR_INDEX`, `GLU_DEPTH_COMPONENT`, `GLU_RED`, `GLU_GREEN`, `GLU_BLUE`, `GLU_ALPHA`, `GLU_RGB`, `GLU_RGBA`, `GLU_BGR`, `GLU_BGRA`, `GLU_LUMINANCE`, or `GLU_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type for <parameter>data</parameter>. Must be one of `GLU_UNSIGNED_BYTE`, `GLU_BYTE`, `GLU_BITMAP`, `GLU_UNSIGNED_SHORT`, `GLU_SHORT`, `GLU_UNSIGNED_INT`, `GLU_INT`, `GLU_FLOAT`, `GLU_UNSIGNED_BYTE_3_3_2`, `GLU_UNSIGNED_BYTE_2_3_3_REV`, `GLU_UNSIGNED_SHORT_5_6_5`, `GLU_UNSIGNED_SHORT_5_6_5_REV`, `GLU_UNSIGNED_SHORT_4_4_4_4`, `GLU_UNSIGNED_SHORT_4_4_4_4_REV`, `GLU_UNSIGNED_SHORT_5_5_5_1`, `GLU_UNSIGNED_SHORT_1_5_5_5_REV`, `GLU_UNSIGNED_INT_8_8_8_8`, `GLU_UNSIGNED_INT_8_8_8_8_REV`, `GLU_UNSIGNED_INT_10_10_10_2`, or `GLU_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "level": "<listitem> <para> Specifies the mipmap level of the image data. </para> </listitem>",
            "base": "<listitem> <para> Specifies the minimum mipmap level to pass to <citerefentry><refentrytitle>glTexImage3D</refentrytitle></citerefentry>. </para> </listitem>",
            "max": "<listitem> <para> Specifies the maximum mipmap level to pass to <citerefentry><refentrytitle>glTexImage3D</refentrytitle></citerefentry>. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "gluBuild3DMipmaps": {
        "signature": "GLint gluBuild3DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data)",
        "purpose": "builds a three-dimensional mipmap",
        "parameters": {
            "target": "<listitem> <para> Specifies the target texture. Must be `GLU_TEXTURE_3D`. </para> </listitem>",
            "internalFormat": "<listitem> <para> Requests the internal storage format of the texture image. The most current version of the SGI implementation of GLU does not check this value for validity before passing it on to the underlying OpenGL implementation. A value that is not accepted by the OpenGL implementation will lead to an OpenGL error. The benefit of not checking this value at the GLU level is that OpenGL extensions can add new internal texture formats without requiring a revision of the GLU implementation. Older implementations of GLU check this value and raise a GLU error if it is not 1, 2, 3, or 4 or one of the following symbolic constants: `GLU_ALPHA`, `GLU_ALPHA4`, `GLU_ALPHA8`, `GLU_ALPHA12`, `GLU_ALPHA16`, `GLU_LUMINANCE`, `GLU_LUMINANCE4`, `GLU_LUMINANCE8`, `GLU_LUMINANCE12`, `GLU_LUMINANCE16`, `GLU_LUMINANCE_ALPHA`, `GLU_LUMINANCE4_ALPHA4`, `GLU_LUMINANCE6_ALPHA2`, `GLU_LUMINANCE8_ALPHA8`, `GLU_LUMINANCE12_ALPHA4`, `GLU_LUMINANCE12_ALPHA12`, `GLU_LUMINANCE16_ALPHA16`, `GLU_INTENSITY`, `GLU_INTENSITY4`, `GLU_INTENSITY8`, `GLU_INTENSITY12`, `GLU_INTENSITY16`, `GLU_RGB`, `GLU_R3_G3_B2`, `GLU_RGB4`, `GLU_RGB5`, `GLU_RGB8`, `GLU_RGB10`, `GLU_RGB12`, `GLU_RGB16`, `GLU_RGBA`, `GLU_RGBA2`, `GLU_RGBA4`, `GLU_RGB5_A1`, `GLU_RGBA8`, `GLU_RGB10_A2`, `GLU_RGBA12`, or `GLU_RGBA16`. </para> </listitem>",
            "width": "<listitem> <para> Specifies in pixels the width, height and depth respectively, in pixels of the texture image. </para> </listitem>",
            "format": "<listitem> <para> Specifies the format of the pixel data. Must be one of `GLU_COLOR_INDEX`, `GLU_DEPTH_COMPONENT`, `GLU_RED`, `GLU_GREEN`, `GLU_BLUE`, `GLU_ALPHA`, `GLU_RGB`, `GLU_RGBA`, `GLU_BGR`, `GLU_BGRA`, `GLU_LUMINANCE`, or `GLU_LUMINANCE_ALPHA`. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type for <parameter>data</parameter>. Must be one of: `GLU_UNSIGNED_BYTE`, `GLU_BYTE`, `GLU_BITMAP`, `GLU_UNSIGNED_SHORT`, `GLU_SHORT`, `GLU_UNSIGNED_INT`, `GLU_INT`, `GLU_FLOAT`, `GLU_UNSIGNED_BYTE_3_3_2`, `GLU_UNSIGNED_BYTE_2_3_3_REV`, `GLU_UNSIGNED_SHORT_5_6_5`, `GLU_UNSIGNED_SHORT_5_6_5_REV`, `GLU_UNSIGNED_SHORT_4_4_4_4`, `GLU_UNSIGNED_SHORT_4_4_4_4_REV`, `GLU_UNSIGNED_SHORT_5_5_5_1`, `GLU_UNSIGNED_SHORT_1_5_5_5_REV`, `GLU_UNSIGNED_INT_8_8_8_8`, `GLU_UNSIGNED_INT_8_8_8_8_REV`, `GLU_UNSIGNED_INT_10_10_10_2`, or `GLU_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the image data in memory. </para> </listitem>"
        }
    },
    "gluCheckExtension": {
        "signature": "GLboolean gluCheckExtension(const GLubyte * extName, const GLubyte * extString)",
        "purpose": "determines if an extension name is supported",
        "parameters": {
            "extName": "<listitem> <para> Specifies an extension name. </para> </listitem>",
            "extString": "<listitem> <para> Specifies a space-separated list of extension names supported. </para> </listitem>"
        }
    },
    "gluCylinder": {
        "signature": "void gluCylinder(GLUquadric* quad, GLdouble base, GLdouble top, GLdouble height, GLint slices, GLint stacks)",
        "purpose": "draw a cylinder",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "base": "<listitem> <para> Specifies the radius of the cylinder at <emphasis>z</emphasis> = 0. </para> </listitem>",
            "top": "<listitem> <para> Specifies the radius of the cylinder at <emphasis>z</emphasis> = <parameter>height</parameter>. </para> </listitem>",
            "height": "<listitem> <para> Specifies the height of the cylinder. </para> </listitem>",
            "slices": "<listitem> <para> Specifies the number of subdivisions around the <emphasis>z</emphasis> axis. </para> </listitem>",
            "stacks": "<listitem> <para> Specifies the number of subdivisions along the <emphasis>z</emphasis> axis. </para> </listitem>"
        }
    },
    "gluDeleteNurbsRenderer": {
        "signature": "void gluDeleteNurbsRenderer(GLUnurbs* nurb)",
        "purpose": "destroy a NURBS object",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object to be destroyed. </para> </listitem>"
        }
    },
    "gluDeleteQuadric": {
        "signature": "void gluDeleteQuadric(GLUquadric* quad)",
        "purpose": "destroy a quadrics object",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object to be destroyed. </para> </listitem>"
        }
    },
    "gluDeleteTess": {
        "signature": "void gluDeleteTess(GLUtesselator* tess)",
        "purpose": "destroy a tessellation object",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object to destroy. </para> </listitem>"
        }
    },
    "gluDisk": {
        "signature": "void gluDisk(GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops)",
        "purpose": "draw a disk",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "inner": "<listitem> <para> Specifies the inner radius of the disk (may be 0). </para> </listitem>",
            "outer": "<listitem> <para> Specifies the outer radius of the disk. </para> </listitem>",
            "slices": "<listitem> <para> Specifies the number of subdivisions around the <emphasis>z</emphasis> axis. </para> </listitem>",
            "loops": "<listitem> <para> Specifies the number of concentric rings about the origin into which the disk is subdivided. </para> </listitem>"
        }
    },
    "gluErrorString": {
        "signature": "const GLubyte * gluErrorString(GLenum error)",
        "purpose": "produce an error string from a GL or GLU error code",
        "parameters": {
            "error": "<listitem> <para> Specifies a GL or GLU error code. </para> </listitem>"
        }
    },
    "gluGetNurbsProperty": {
        "signature": "void gluGetNurbsProperty(GLUnurbs* nurb, GLenum property, GLfloat* data)",
        "purpose": "get a NURBS property",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "property": "<listitem> <para> Specifies the property whose value is to be fetched. Valid values are `GLU_CULLING`, `GLU_SAMPLING_TOLERANCE`, `GLU_DISPLAY_MODE`, `GLU_AUTO_LOAD_MATRIX`, `GLU_PARAMETRIC_TOLERANCE`, `GLU_SAMPLING_METHOD`, `GLU_U_STEP`, `GLU_V_STEP`, and `GLU_NURBS_MODE`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the location into which the value of the named property is written. </para> </listitem>"
        }
    },
    "gluGetString": {
        "signature": "const GLubyte * gluGetString(GLenum name)",
        "purpose": "return a string describing the GLU version or GLU extensions ",
        "parameters": {
            "name": "<listitem> <para> Specifies a symbolic constant, one of `GLU_VERSION`, or `GLU_EXTENSIONS`. </para> </listitem>"
        }
    },
    "gluGetTessProperty": {
        "signature": "void gluGetTessProperty(GLUtesselator* tess, GLenum which, GLdouble* data)",
        "purpose": "get a tessellation object property",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "which": "<listitem> <para> Specifies the property whose value is to be fetched. Valid values are `GLU_TESS_WINDING_RULE`, `GLU_TESS_BOUNDARY_ONLY`, and `GLU_TESS_TOLERANCE`. </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to the location into which the value of the named property is written. </para> </listitem>"
        }
    },
    "gluLoadSamplingMatrices": {
        "signature": "void gluLoadSamplingMatrices(GLUnurbs* nurb, const GLfloat * model, const GLfloat * perspective, const GLint * view)",
        "purpose": "load NURBS sampling and culling matrices",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "model": "<listitem> <para> Specifies a modelview matrix (as from a <citerefentry><refentrytitle>glGetFloatv</refentrytitle></citerefentry> call). </para> </listitem>",
            "perspective": "<listitem> <para> Specifies a projection matrix (as from a <citerefentry><refentrytitle>glGetFloatv</refentrytitle></citerefentry> call). </para> </listitem>",
            "view": "<listitem> <para> Specifies a viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call). </para> </listitem>"
        }
    },
    "gluLookAt": {
        "signature": "void gluLookAt(GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ)",
        "purpose": "define a viewing transformation",
        "parameters": {
            "eyeX": "<listitem> <para> Specifies the position of the eye point. </para> </listitem>",
            "centerX": "<listitem> <para> Specifies the position of the reference point. </para> </listitem>",
            "upX": "<listitem> <para> Specifies the direction of the <emphasis>up</emphasis> vector. </para> </listitem>"
        }
    },
    "gluNewNurbsRenderer": {
        "signature": "GLUnurbs* gluNewNurbsRenderer()",
        "purpose": "create a NURBS object",
        "parameters": {}
    },
    "gluNewQuadric": {
        "signature": "GLUquadric* gluNewQuadric()",
        "purpose": "create a quadrics object",
        "parameters": {}
    },
    "gluNewTess": {
        "signature": "GLUtesselator* gluNewTess()",
        "purpose": "create a tessellation object",
        "parameters": {}
    },
    "gluNextContour": {
        "signature": "void gluNextContour(GLUtesselator* tess, GLenum type)",
        "purpose": "mark the beginning of another contour",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of the contour being defined. Valid values are `GLU_EXTERIOR`, `GLU_INTERIOR`, `GLU_UNKNOWN`, `GLU_CCW`, and `GLU_CW`. </para> </listitem>"
        }
    },
    "glUniform1f": {
        "signature": "void glUniform1f(GLint location, GLfloat v0)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2f": {
        "signature": "void glUniform2f(GLint location, GLfloat v0, GLfloat v1)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3f": {
        "signature": "void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4f": {
        "signature": "void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1i": {
        "signature": "void glUniform1i(GLint location, GLint v0)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2i": {
        "signature": "void glUniform2i(GLint location, GLint v0, GLint v1)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3i": {
        "signature": "void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4i": {
        "signature": "void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1fv": {
        "signature": "void glUniform1fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2fv": {
        "signature": "void glUniform2fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3fv": {
        "signature": "void glUniform3fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4fv": {
        "signature": "void glUniform4fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1iv": {
        "signature": "void glUniform1iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2iv": {
        "signature": "void glUniform2iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3iv": {
        "signature": "void glUniform3iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4iv": {
        "signature": "void glUniform4iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix2fv": {
        "signature": "void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix3fv": {
        "signature": "void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix4fv": {
        "signature": "void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix2x3fv": {
        "signature": "void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix3x2fv": {
        "signature": "void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix2x4fv": {
        "signature": "void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix4x2fv": {
        "signature": "void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix3x4fv": {
        "signature": "void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix4x3fv": {
        "signature": "void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "gluNurbsCallback": {
        "signature": "void gluNurbsCallback(GLUnurbs* nurb, GLenum which, _GLUfuncptr CallBackFunc)",
        "purpose": "define a callback for a NURBS object",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "which": "<listitem> <para> Specifies the callback being defined. Valid values are `GLU_NURBS_BEGIN`, `GLU_NURBS_VERTEX`, `GLU_NURBS_NORMAL`, `GLU_NURBS_COLOR`, `GLU_NURBS_TEXTURE_COORD`, `GLU_NURBS_END`, `GLU_NURBS_BEGIN_DATA`, `GLU_NURBS_VERTEX_DATA`, `GLU_NURBS_NORMAL_DATA`, `GLU_NURBS_COLOR_DATA`, `GLU_NURBS_TEXTURE_COORD_DATA`, `GLU_NURBS_END_DATA`, and `GLU_NURBS_ERROR`. </para> </listitem>",
            "CallBackFunc": "<listitem> <para> Specifies the function that the callback calls. </para> </listitem>"
        }
    },
    "gluNurbsCallbackData": {
        "signature": "void gluNurbsCallbackData(GLUnurbs* nurb, void* userData)",
        "purpose": "set a user data pointer",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "userData": "<listitem> <para> Specifies a pointer to the user's data. </para> </listitem>"
        }
    },
    "gluNurbsCallbackDataEXT": {
        "signature": "void gluNurbsCallbackDataEXT(GLUnurbs* nurb, void* userData)",
        "purpose": "set a user data pointer",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "userData": "<listitem> <para> Specifies a pointer to the user's data. </para> </listitem>"
        }
    },
    "gluNurbsCurve": {
        "signature": "void gluNurbsCurve(GLUnurbs* nurb, GLint knotCount, GLfloat * knots, GLint stride, GLfloat * control, GLint order, GLenum type)",
        "purpose": "define the shape of a NURBS curve",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "knotCount": "<listitem> <para> Specifies the number of knots in <parameter>knots</parameter>. <parameter>knotCount</parameter> equals the number of control points plus the order. </para> </listitem>",
            "knots": "<listitem> <para> Specifies an array of <parameter>knotCount</parameter> nondecreasing knot values. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the offset (as a number of single-precision floating-point values) between successive curve control points. </para> </listitem>",
            "control": "<listitem> <para> Specifies a pointer to an array of control points. The coordinates must agree with <parameter>type</parameter>, specified below. </para> </listitem>",
            "order": "<listitem> <para> Specifies the order of the NURBS curve. <parameter>order</parameter> equals degree + 1, hence a cubic curve has an order of 4. </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of the curve. If this curve is defined within a <citerefentry><refentrytitle>gluBeginCurve</refentrytitle></citerefentry>/<citerefentry><refentrytitle>gluEndCurve</refentrytitle></citerefentry> pair, then the type can be any of the valid one-dimensional evaluator types (such as `GLU_MAP1_VERTEX_3` or `GLU_MAP1_COLOR_4`). Between a <citerefentry><refentrytitle>gluBeginTrim</refentrytitle></citerefentry>/<citerefentry><refentrytitle>gluEndTrim</refentrytitle></citerefentry> pair, the only valid types are `GLU_MAP1_TRIM_2` and `GLU_MAP1_TRIM_3`. </para> </listitem>"
        }
    },
    "gluNurbsProperty": {
        "signature": "void gluNurbsProperty(GLUnurbs* nurb, GLenum property, GLfloat value)",
        "purpose": "set a NURBS property",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "property": "<listitem> <para> Specifies the property to be set. Valid values are `GLU_SAMPLING_TOLERANCE`, `GLU_DISPLAY_MODE`, `GLU_CULLING`, `GLU_AUTO_LOAD_MATRIX`, `GLU_PARAMETRIC_TOLERANCE`, `GLU_SAMPLING_METHOD`, `GLU_U_STEP`, `GLU_V_STEP`, or `GLU_NURBS_MODE`. </para> </listitem>",
            "value": "<listitem> <para> Specifies the value of the indicated property. It may be a numeric value or one of `GLU_OUTLINE_POLYGON`, `GLU_FILL`, `GLU_OUTLINE_PATCH`, `GLU_TRUE`, `GLU_FALSE`, `GLU_PATH_LENGTH`, `GLU_PARAMETRIC_ERROR`, `GLU_DOMAIN_DISTANCE`, `GLU_NURBS_RENDERER`, or `GLU_NURBS_TESSELLATOR`. </para> </listitem>"
        }
    },
    "gluNurbsSurface": {
        "signature": "void gluNurbsSurface(GLUnurbs* nurb, GLint sKnotCount, GLfloat* sKnots, GLint tKnotCount, GLfloat* tKnots, GLint sStride, GLint tStride, GLfloat* control, GLint sOrder, GLint tOrder, GLenum type)",
        "purpose": "define the shape of a NURBS surface",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "sKnotCount": "<listitem> <para> Specifies the number of knots in the parametric <emphasis>u</emphasis> direction. </para> </listitem>",
            "sKnots": "<listitem> <para> Specifies an array of <parameter>sKnotCount</parameter> nondecreasing knot values in the parametric <emphasis>u</emphasis> direction. </para> </listitem>",
            "tKnotCount": "<listitem> <para> Specifies the number of knots in the parametric <emphasis>v</emphasis> direction. </para> </listitem>",
            "tKnots": "<listitem> <para> Specifies an array of <parameter>tKnotCount</parameter> nondecreasing knot values in the parametric <emphasis>v</emphasis> direction. </para> </listitem>",
            "sStride": "<listitem> <para> Specifies the offset (as a number of single-precision floating-point values) between successive control points in the parametric <emphasis>u</emphasis> direction in <parameter>control</parameter>. </para> </listitem>",
            "tStride": "<listitem> <para> Specifies the offset (in single-precision floating-point values) between successive control points in the parametric <emphasis>v</emphasis> direction in <parameter>control</parameter>. </para> </listitem>",
            "control": "<listitem> <para> Specifies an array containing control points for the NURBS surface. The offsets between successive control points in the parametric <emphasis>u</emphasis> and <emphasis>v</emphasis> directions are given by <parameter>sStride</parameter> and <parameter>tStride</parameter>. </para> </listitem>",
            "sOrder": "<listitem> <para> Specifies the order of the NURBS surface in the parametric <emphasis>u</emphasis> direction. The order is one more than the degree, hence a surface that is cubic in <emphasis>u</emphasis> has a <emphasis>u</emphasis> order of 4. </para> </listitem>",
            "tOrder": "<listitem> <para> Specifies the order of the NURBS surface in the parametric <emphasis>v</emphasis> direction. The order is one more than the degree, hence a surface that is cubic in <emphasis>v</emphasis> has a <emphasis>v</emphasis> order of 4. </para> </listitem>",
            "type": "<listitem> <para> Specifies type of the surface. <parameter>type</parameter> can be any of the valid two-dimensional evaluator types (such as `GLU_MAP2_VERTEX_3` or `GLU_MAP2_COLOR_4`). </para> </listitem>"
        }
    },
    "gluOrtho2D": {
        "signature": "void gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)",
        "purpose": "define a 2D orthographic projection matrix",
        "parameters": {
            "left": "<listitem> <para> Specify the coordinates for the left and right vertical clipping planes. </para> </listitem>",
            "bottom": "<listitem> <para> Specify the coordinates for the bottom and top horizontal clipping planes. </para> </listitem>"
        }
    },
    "gluPartialDisk": {
        "signature": "void gluPartialDisk(GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, GLdouble start, GLdouble sweep)",
        "purpose": "draw an arc of a disk",
        "parameters": {
            "quad": "<listitem> <para> Specifies a quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "inner": "<listitem> <para> Specifies the inner radius of the partial disk (can be 0). </para> </listitem>",
            "outer": "<listitem> <para> Specifies the outer radius of the partial disk. </para> </listitem>",
            "slices": "<listitem> <para> Specifies the number of subdivisions around the <emphasis>z</emphasis> axis. </para> </listitem>",
            "loops": "<listitem> <para> Specifies the number of concentric rings about the origin into which the partial disk is subdivided. </para> </listitem>",
            "start": "<listitem> <para> Specifies the starting angle, in degrees, of the disk portion. </para> </listitem>",
            "sweep": "<listitem> <para> Specifies the sweep angle, in degrees, of the disk portion. </para> </listitem>"
        }
    },
    "gluPerspective": {
        "signature": "void gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar)",
        "purpose": "set up a perspective projection matrix",
        "parameters": {
            "fovy": "<listitem> <para> Specifies the field of view angle, in degrees, in the <emphasis>y</emphasis> direction. </para> </listitem>",
            "aspect": "<listitem> <para> Specifies the aspect ratio that determines the field of view in the <emphasis>x</emphasis> direction. The aspect ratio is the ratio of <emphasis>x</emphasis> (width) to <emphasis>y</emphasis> (height). </para> </listitem>",
            "zNear": "<listitem> <para> Specifies the distance from the viewer to the near clipping plane (always positive). </para> </listitem>",
            "zFar": "<listitem> <para> Specifies the distance from the viewer to the far clipping plane (always positive). </para> </listitem>"
        }
    },
    "gluPickMatrix": {
        "signature": "void gluPickMatrix(GLdouble x, GLdouble y, GLdouble delX, GLdouble delY, GLint * viewport)",
        "purpose": "define a picking region",
        "parameters": {
            "x": "<listitem> <para> Specify the center of a picking region in window coordinates. </para> </listitem>",
            "delX": "<listitem> <para> Specify the width and height, respectively, of the picking region in window coordinates. </para> </listitem>",
            "viewport": "<listitem> <para> Specifies the current viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call). </para> </listitem>"
        }
    },
    "gluProject": {
        "signature": "GLint gluProject(GLdouble objX, GLdouble objY, GLdouble objZ, const GLdouble * model, const GLdouble * proj, const GLint * view, GLdouble* winX, GLdouble* winY, GLdouble* winZ)",
        "purpose": "map object coordinates to window coordinates",
        "parameters": {
            "objX": "<listitem> <para> Specify the object coordinates. </para> </listitem>",
            "model": "<listitem> <para> Specifies the current modelview matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "proj": "<listitem> <para> Specifies the current projection matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "view": "<listitem> <para> Specifies the current viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call). </para> </listitem>",
            "winX": "<listitem> <para> Return the computed window coordinates. </para> </listitem>"
        }
    },
    "gluPwlCurve": {
        "signature": "void gluPwlCurve(GLUnurbs* nurb, GLint count, GLfloat* data, GLint stride, GLenum type)",
        "purpose": "describe a piecewise linear NURBS trimming curve",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "count": "<listitem> <para> Specifies the number of points on the curve. </para> </listitem>",
            "data": "<listitem> <para> Specifies an array containing the curve points. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the offset (a number of single-precision floating-point values) between points on the curve. </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of curve. Must be either `GLU_MAP1_TRIM_2` or `GLU_MAP1_TRIM_3`. </para> </listitem>"
        }
    },
    "gluQuadricCallback": {
        "signature": "void gluQuadricCallback(GLUquadric* quad, GLenum which, _GLUfuncptr CallBackFunc)",
        "purpose": "define a callback for a quadrics object",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "which": "<listitem> <para> Specifies the callback being defined. The only valid value is `GLU_ERROR`. </para> </listitem>",
            "CallBackFunc": "<listitem> <para> Specifies the function to be called. </para> </listitem>"
        }
    },
    "gluQuadricDrawStyle": {
        "signature": "void gluQuadricDrawStyle(GLUquadric* quad, GLenum draw)",
        "purpose": "specify the draw style desired for quadrics",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "draw": "<listitem> <para> Specifies the desired draw style. Valid values are `GLU_FILL`, `GLU_LINE`, `GLU_SILHOUETTE`, and `GLU_POINT`. </para> </listitem>"
        }
    },
    "gluQuadricNormals": {
        "signature": "void gluQuadricNormals(GLUquadric* quad, GLenum normal)",
        "purpose": "specify what kind of normals are desired for quadrics",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "normal": "<listitem> <para> Specifies the desired type of normals. Valid values are `GLU_NONE`, `GLU_FLAT`, and `GLU_SMOOTH`. </para> </listitem>"
        }
    },
    "gluQuadricOrientation": {
        "signature": "void gluQuadricOrientation(GLUquadric* quad, GLenum orientation)",
        "purpose": "specify inside/outside orientation for quadrics",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "orientation": "<listitem> <para> Specifies the desired orientation. Valid values are `GLU_OUTSIDE` and `GLU_INSIDE`. </para> </listitem>"
        }
    },
    "gluQuadricTexture": {
        "signature": "void gluQuadricTexture(GLUquadric* quad, GLboolean texture)",
        "purpose": "specify if texturing is desired for quadrics",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "texture": "<listitem> <para> Specifies a flag indicating if texture coordinates should be generated. </para> </listitem>"
        }
    },
    "gluScaleImage": {
        "signature": "GLint gluScaleImage(GLenum format, GLsizei wIn, GLsizei hIn, GLenum typeIn, const void * dataIn, GLsizei wOut, GLsizei hOut, GLenum typeOut, void* dataOut)",
        "purpose": "scale an image to an arbitrary size",
        "parameters": {
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are valid: `GLU_COLOR_INDEX`, `GLU_STENCIL_INDEX`, `GLU_DEPTH_COMPONENT`, `GLU_RED`, `GLU_GREEN`, `GLU_BLUE`, `GLU_ALPHA`, `GLU_RGB`, `GLU_RGBA`, `GLU_BGR`, `GLU_BGRA`, `GLU_LUMINANCE`, and `GLU_LUMINANCE_ALPHA`. </para> </listitem>",
            "wIn": "<listitem> <para> Specify in pixels the width and height, respectively, of the source image. </para> </listitem>",
            "typeIn": "<listitem> <para> Specifies the data type for <parameter>dataIn</parameter>. Must be one of `GLU_UNSIGNED_BYTE`, `GLU_BYTE`, `GLU_BITMAP`, `GLU_UNSIGNED_SHORT`, `GLU_SHORT`, `GLU_UNSIGNED_INT`, `GLU_INT`, `GLU_FLOAT`, `GLU_UNSIGNED_BYTE_3_3_2`, `GLU_UNSIGNED_BYTE_2_3_3_REV`, `GLU_UNSIGNED_SHORT_5_6_5`, `GLU_UNSIGNED_SHORT_5_6_5_REV`, `GLU_UNSIGNED_SHORT_4_4_4_4`, `GLU_UNSIGNED_SHORT_4_4_4_4_REV`, `GLU_UNSIGNED_SHORT_5_5_5_1`, `GLU_UNSIGNED_SHORT_1_5_5_5_REV`, `GLU_UNSIGNED_INT_8_8_8_8`, `GLU_UNSIGNED_INT_8_8_8_8_REV`, `GLU_UNSIGNED_INT_10_10_10_2`, or `GLU_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "dataIn": "<listitem> <para> Specifies a pointer to the source image. </para> </listitem>",
            "wOut": "<listitem> <para> Specify the width and height, respectively, in pixels of the destination image. </para> </listitem>",
            "typeOut": "<listitem> <para> Specifies the data type for <parameter>dataOut</parameter>. Must be one of `GLU_UNSIGNED_BYTE`, `GLU_BYTE`, `GLU_BITMAP`, `GLU_UNSIGNED_SHORT`, `GLU_SHORT`, `GLU_UNSIGNED_INT`, `GLU_INT`, `GLU_FLOAT`, `GLU_UNSIGNED_BYTE_3_3_2`, `GLU_UNSIGNED_BYTE_2_3_3_REV`, `GLU_UNSIGNED_SHORT_5_6_5`, `GLU_UNSIGNED_SHORT_5_6_5_REV`, `GLU_UNSIGNED_SHORT_4_4_4_4`, `GLU_UNSIGNED_SHORT_4_4_4_4_REV`, `GLU_UNSIGNED_SHORT_5_5_5_1`, `GLU_UNSIGNED_SHORT_1_5_5_5_REV`, `GLU_UNSIGNED_INT_8_8_8_8`, `GLU_UNSIGNED_INT_8_8_8_8_REV`, `GLU_UNSIGNED_INT_10_10_10_2`, or `GLU_UNSIGNED_INT_2_10_10_10_REV`. </para> </listitem>",
            "dataOut": "<listitem> <para> Specifies a pointer to the destination image. </para> </listitem>"
        }
    },
    "glUseProgram": {
        "signature": "void glUseProgram(GLuint program)",
        "purpose": "Installs a program object as part of current rendering state",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object whose executables are to be used as part of current rendering state.</para> </listitem>"
        }
    },
    "gluSphere": {
        "signature": "void gluSphere(GLUquadric* quad, GLdouble radius, GLint slices, GLint stacks)",
        "purpose": "draw a sphere",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "radius": "<listitem> <para> Specifies the radius of the sphere. </para> </listitem>",
            "slices": "<listitem> <para> Specifies the number of subdivisions around the <emphasis>z</emphasis> axis (similar to lines of longitude). </para> </listitem>",
            "stacks": "<listitem> <para> Specifies the number of subdivisions along the <emphasis>z</emphasis> axis (similar to lines of latitude). </para> </listitem>"
        }
    },
    "gluTessBeginContour": {
        "signature": "void gluTessBeginContour(GLUtesselator* tess)",
        "purpose": "delimit a contour description",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluTessEndContour": {
        "signature": "void gluTessEndContour(GLUtesselator* tess)",
        "purpose": "delimit a contour description",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluTessBeginPolygon": {
        "signature": "void gluTessBeginPolygon(GLUtesselator* tess, void* data)",
        "purpose": "delimit a polygon description",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to user polygon data. </para> </listitem>"
        }
    },
    "gluTessCallback": {
        "signature": "void gluTessCallback(GLUtesselator* tess, GLenum which, _GLUfuncptr CallBackFunc)",
        "purpose": "define a callback for a tessellation object",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "which": "<listitem> <para> Specifies the callback being defined. The following values are valid: `GLU_TESS_BEGIN`, `GLU_TESS_BEGIN_DATA`, `GLU_TESS_EDGE_FLAG`, `GLU_TESS_EDGE_FLAG_DATA`, `GLU_TESS_VERTEX`, `GLU_TESS_VERTEX_DATA`, `GLU_TESS_END`, `GLU_TESS_END_DATA`, `GLU_TESS_COMBINE`, `GLU_TESS_COMBINE_DATA`, `GLU_TESS_ERROR`, and `GLU_TESS_ERROR_DATA`. </para> </listitem>",
            "CallBackFunc": "<listitem> <para> Specifies the function to be called. </para> </listitem>"
        }
    },
    "gluTessEndPolygon": {
        "signature": "void gluTessEndPolygon(GLUtesselator* tess)",
        "purpose": "delimit a polygon description",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluTessNormal": {
        "signature": "void gluTessNormal(GLUtesselator* tess, GLdouble valueX, GLdouble valueY, GLdouble valueZ)",
        "purpose": "specify a normal for a polygon",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "valueX": "<listitem> <para> Specifies the first component of the normal. </para> </listitem>",
            "valueY": "<listitem> <para> Specifies the second component of the normal. </para> </listitem>",
            "valueZ": "<listitem> <para> Specifies the third component of the normal. </para> </listitem>"
        }
    },
    "gluTessProperty": {
        "signature": "void gluTessProperty(GLUtesselator* tess, GLenum which, GLdouble data)",
        "purpose": "set a tessellation object property",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "which": "<listitem> <para> Specifies the property to be set. Valid values are `GLU_TESS_WINDING_RULE`, `GLU_TESS_BOUNDARY_ONLY`, and `GLU_TESS_TOLERANCE`. </para> </listitem>",
            "data": "<listitem> <para> Specifies the value of the indicated property. </para> </listitem>"
        }
    },
    "gluTessVertex": {
        "signature": "void gluTessVertex(GLUtesselator* tess, GLdouble * location, void* data)",
        "purpose": "specify a vertex on a polygon",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "location": "<listitem> <para> Specifies the location of the vertex. </para> </listitem>",
            "data": "<listitem> <para> Specifies an opaque pointer passed back to the program with the vertex callback (as specified by <citerefentry><refentrytitle>gluTessCallback</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluUnProject": {
        "signature": "GLint gluUnProject(GLdouble winX, GLdouble winY, GLdouble winZ, const GLdouble * model, const GLdouble * proj, const GLint * view, GLdouble* objX, GLdouble* objY, GLdouble* objZ)",
        "purpose": "map window coordinates to object coordinates",
        "parameters": {
            "winX": "<listitem> <para> Specify the window coordinates to be mapped. </para> </listitem>",
            "model": "<listitem> <para> Specifies the modelview matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "proj": "<listitem> <para> Specifies the projection matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "view": "<listitem> <para> Specifies the viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call). </para> </listitem>",
            "objX": "<listitem> <para> Returns the computed object coordinates. </para> </listitem>"
        }
    },
    "gluUnProject4": {
        "signature": "GLint gluUnProject4(GLdouble winX, GLdouble winY, GLdouble winZ, GLdouble clipW, const GLdouble * model, const GLdouble * proj, const GLint * view, GLdouble nearVal, GLdouble farVal, GLdouble* objX, GLdouble* objY, GLdouble* objZ, GLdouble* objW)",
        "purpose": "map window and clip coordinates to object coordinates",
        "parameters": {
            "winX": "<listitem> <para> Specify the window coordinates to be mapped. </para> </listitem>",
            "clipW": "<listitem> <para> Specify the clip w coordinate to be mapped. </para> </listitem>",
            "model": "<listitem> <para> Specifies the modelview matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "proj": "<listitem> <para> Specifies the projection matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "view": "<listitem> <para> Specifies the viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call). </para> </listitem>",
            "nearVal": "<listitem> <para> Specifies the near and far planes (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "objX": "<listitem> <para> Returns the computed object coordinates. </para> </listitem>"
        }
    },
    "glValidateProgram": {
        "signature": "void glValidateProgram(GLuint program)",
        "purpose": "Validates a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object to be validated.</para> </listitem>"
        }
    },
    "glVertex2s": {
        "signature": "void glVertex2s(GLshort x, GLshort y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2i": {
        "signature": "void glVertex2i(GLint x, GLint y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2f": {
        "signature": "void glVertex2f(GLfloat x, GLfloat y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2d": {
        "signature": "void glVertex2d(GLdouble x, GLdouble y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3s": {
        "signature": "void glVertex3s(GLshort x, GLshort y, GLshort z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3i": {
        "signature": "void glVertex3i(GLint x, GLint y, GLint z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3f": {
        "signature": "void glVertex3f(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3d": {
        "signature": "void glVertex3d(GLdouble x, GLdouble y, GLdouble z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4s": {
        "signature": "void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4i": {
        "signature": "void glVertex4i(GLint x, GLint y, GLint z, GLint w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4f": {
        "signature": "void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4d": {
        "signature": "void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2sv": {
        "signature": "void glVertex2sv(const GLshort * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2iv": {
        "signature": "void glVertex2iv(const GLint * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2fv": {
        "signature": "void glVertex2fv(const GLfloat * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2dv": {
        "signature": "void glVertex2dv(const GLdouble * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3sv": {
        "signature": "void glVertex3sv(const GLshort * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3iv": {
        "signature": "void glVertex3iv(const GLint * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3fv": {
        "signature": "void glVertex3fv(const GLfloat * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3dv": {
        "signature": "void glVertex3dv(const GLdouble * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4sv": {
        "signature": "void glVertex4sv(const GLshort * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4iv": {
        "signature": "void glVertex4iv(const GLint * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4fv": {
        "signature": "void glVertex4fv(const GLfloat * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4dv": {
        "signature": "void glVertex4dv(const GLdouble * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertexAttrib1f": {
        "signature": "void glVertexAttrib1f(GLuint index, GLfloat v0)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1s": {
        "signature": "void glVertexAttrib1s(GLuint index, GLshort v0)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1d": {
        "signature": "void glVertexAttrib1d(GLuint index, GLdouble v0)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2f": {
        "signature": "void glVertexAttrib2f(GLuint index, GLfloat v0, GLfloat v1)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2s": {
        "signature": "void glVertexAttrib2s(GLuint index, GLshort v0, GLshort v1)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2d": {
        "signature": "void glVertexAttrib2d(GLuint index, GLdouble v0, GLdouble v1)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3f": {
        "signature": "void glVertexAttrib3f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3s": {
        "signature": "void glVertexAttrib3s(GLuint index, GLshort v0, GLshort v1, GLshort v2)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3d": {
        "signature": "void glVertexAttrib3d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4f": {
        "signature": "void glVertexAttrib4f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4s": {
        "signature": "void glVertexAttrib4s(GLuint index, GLshort v0, GLshort v1, GLshort v2, GLshort v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4d": {
        "signature": "void glVertexAttrib4d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nub": {
        "signature": "void glVertexAttrib4Nub(GLuint index, GLubyte v0, GLubyte v1, GLubyte v2, GLubyte v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1fv": {
        "signature": "void glVertexAttrib1fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1sv": {
        "signature": "void glVertexAttrib1sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1dv": {
        "signature": "void glVertexAttrib1dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2fv": {
        "signature": "void glVertexAttrib2fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2sv": {
        "signature": "void glVertexAttrib2sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2dv": {
        "signature": "void glVertexAttrib2dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3fv": {
        "signature": "void glVertexAttrib3fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3sv": {
        "signature": "void glVertexAttrib3sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3dv": {
        "signature": "void glVertexAttrib3dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4fv": {
        "signature": "void glVertexAttrib4fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4sv": {
        "signature": "void glVertexAttrib4sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4dv": {
        "signature": "void glVertexAttrib4dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4iv": {
        "signature": "void glVertexAttrib4iv(GLuint index, const GLint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4bv": {
        "signature": "void glVertexAttrib4bv(GLuint index, const GLbyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4ubv": {
        "signature": "void glVertexAttrib4ubv(GLuint index, const GLubyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4usv": {
        "signature": "void glVertexAttrib4usv(GLuint index, const GLushort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4uiv": {
        "signature": "void glVertexAttrib4uiv(GLuint index, const GLuint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nbv": {
        "signature": "void glVertexAttrib4Nbv(GLuint index, const GLbyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nsv": {
        "signature": "void glVertexAttrib4Nsv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Niv": {
        "signature": "void glVertexAttrib4Niv(GLuint index, const GLint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nubv": {
        "signature": "void glVertexAttrib4Nubv(GLuint index, const GLubyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nusv": {
        "signature": "void glVertexAttrib4Nusv(GLuint index, const GLushort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nuiv": {
        "signature": "void glVertexAttrib4Nuiv(GLuint index, const GLuint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttribPointer": {
        "signature": "void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)",
        "purpose": "define an array of generic vertex attribute data",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "size": "<listitem> <para>Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.</para> </listitem>",
            "type": "<listitem> <para>Specifies the data type of each component in the array. Symbolic constants `GL_BYTE`, `GL_UNSIGNED_BYTE`, `GL_SHORT`, `GL_UNSIGNED_SHORT`, `GL_INT`, `GL_UNSIGNED_INT`, `GL_FLOAT`, or `GL_DOUBLE` are accepted. The initial value is `GL_FLOAT`.</para> </listitem>",
            "normalized": "<listitem> <para>Specifies whether fixed-point data values should be normalized (`GL_TRUE`) or converted directly as fixed-point values (`GL_FALSE`) when they are accessed.</para> </listitem>",
            "stride": "<listitem> <para>Specifies the byte offset between consecutive generic vertex attributes. If <parameter>stride</parameter> is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.</para> </listitem>",
            "pointer": "<listitem> <para>Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.</para> </listitem>"
        }
    },
    "glVertexPointer": {
        "signature": "void glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of vertex data",
        "parameters": {
            "size": "<listitem> <para> Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of each coordinate in the array. Symbolic constants `GL_SHORT`, `GL_INT`, `GL_FLOAT`, or `GL_DOUBLE` are accepted. The initial value is `GL_FLOAT`. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive vertices. If <parameter>stride</parameter> is 0, the vertices are understood to be tightly packed in the array. The initial value is 0. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0. </para> </listitem>"
        }
    },
    "glViewport": {
        "signature": "void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "set the viewport",
        "parameters": {
            "x": "<listitem> <para> Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0). </para> </listitem>",
            "width": "<listitem> <para> Specify the width and height of the viewport. When a GL context is first attached to a window, <parameter>width</parameter> and <parameter>height</parameter> are set to the dimensions of that window. </para> </listitem>"
        }
    },
    "glWindowPos2s": {
        "signature": "void glWindowPos2s(GLshort x, GLshort y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2i": {
        "signature": "void glWindowPos2i(GLint x, GLint y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2f": {
        "signature": "void glWindowPos2f(GLfloat x, GLfloat y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2d": {
        "signature": "void glWindowPos2d(GLdouble x, GLdouble y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3s": {
        "signature": "void glWindowPos3s(GLshort x, GLshort y, GLshort z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3i": {
        "signature": "void glWindowPos3i(GLint x, GLint y, GLint z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3f": {
        "signature": "void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3d": {
        "signature": "void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2sv": {
        "signature": "void glWindowPos2sv(const GLshort * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2iv": {
        "signature": "void glWindowPos2iv(const GLint * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2fv": {
        "signature": "void glWindowPos2fv(const GLfloat * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2dv": {
        "signature": "void glWindowPos2dv(const GLdouble * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3sv": {
        "signature": "void glWindowPos3sv(const GLshort * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3iv": {
        "signature": "void glWindowPos3iv(const GLint * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3fv": {
        "signature": "void glWindowPos3fv(const GLfloat * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3dv": {
        "signature": "void glWindowPos3dv(const GLdouble * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glXChooseFBConfig": {
        "signature": "GLXFBConfig * glXChooseFBConfig(Display * dpy, int screen, const int * attrib_list, int * nelements)",
        "purpose": "return a list of GLX frame buffer configurations that match the specified attributes",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "screen": "<listitem> <para> Specifies the screen number. </para> </listitem>",
            "attrib_list": "<listitem> <para> Specifies a list of attribute/value pairs. The last attribute must be `None`. </para> </listitem>",
            "nelements": "<listitem> <para> Returns the number of elements in the list returned by <function>glXChooseFBConfig</function>. </para> </listitem>"
        }
    },
    "glXChooseVisual": {
        "signature": "XVisualInfo* glXChooseVisual(Display * dpy, int screen, int * attribList)",
        "purpose": "return a visual that matches specified attributes",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "screen": "<listitem> <para> Specifies the screen number. </para> </listitem>",
            "attribList": "<listitem> <para> Specifies a list of boolean attributes and integer attribute/value pairs. The last attribute must be `None`. </para> </listitem>"
        }
    },
    "glXCopyContext": {
        "signature": "void glXCopyContext(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask)",
        "purpose": "copy state from one rendering context to another",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "src": "<listitem> <para> Specifies the source context. </para> </listitem>",
            "dst": "<listitem> <para> Specifies the destination context. </para> </listitem>",
            "mask": "<listitem> <para> Specifies which portions of <parameter>src</parameter> state are to be copied to <parameter>dst</parameter>. </para> </listitem>"
        }
    },
    "glXCreateContext": {
        "signature": "GLXContext glXCreateContext(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct)",
        "purpose": "create a new GLX rendering context",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "vis": "<listitem> <para> Specifies the visual that defines the frame buffer resources available to the rendering context. It is a pointer to an `XVisualInfo` structure, not a visual ID or a pointer to a `Visual`. </para> </listitem>",
            "shareList": "<listitem> <para> Specifies the context with which to share display lists. `NULL` indicates that no sharing is to take place. </para> </listitem>",
            "direct": "<listitem> <para> Specifies whether rendering is to be done with a direct connection to the graphics system if possible (`True`) or through the X server (`False`). </para> </listitem>"
        }
    },
    "glXCreateGLXPixmap": {
        "signature": "GLXPixmap glXCreateGLXPixmap(Display * dpy, XVisualInfo * vis, Pixmap pixmap)",
        "purpose": "create an off-screen GLX rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "vis": "<listitem> <para> Specifies the visual that defines the structure of the rendering area. It is a pointer to an `XVisualInfo` structure, not a visual ID or a pointer to a `Visual`. </para> </listitem>",
            "pixmap": "<listitem> <para> Specifies the X pixmap that will be used as the front left color buffer of the off-screen rendering area. </para> </listitem>"
        }
    },
    "glXCreateNewContext": {
        "signature": "GLXContext glXCreateNewContext(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)",
        "purpose": "create a new GLX rendering context",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies the GLXFBConfig structure with the desired attributes for the context. </para> </listitem>",
            "render_type": "<listitem> <para> Specifies the type of the context to be created. Must be one of `GLX_RGBA_TYPE` or `GLX_COLOR_INDEX_TYPE`. </para> </listitem>",
            "share_list": "<listitem> <para> Specifies whether rendering is to be done with a direct connection to the graphics system if possible (`True`) or through the X server (`False`). </para> </listitem>"
        }
    },
    "glXCreatePbuffer": {
        "signature": "GLXPbuffer glXCreatePbuffer(Display * dpy, GLXFBConfig config, const int * attrib_list)",
        "purpose": "create an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies a GLXFBConfig structure with the desired attributes for the window. </para> </listitem>",
            "attrib_list": "<listitem> <para> Specifies a list of attribute value pairs, which must be terminated with `None` or `NULL`. Accepted attributes are `GLX_PBUFFER_WIDTH`, `GLX_PBUFFER_HEIGHT`, `GLX_PRESERVED_CONTENTS`, and `GLX_LARGEST_PBUFFER`. </para> </listitem>"
        }
    },
    "glXCreatePixmap": {
        "signature": "GLXPixmap glXCreatePixmap(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list)",
        "purpose": "create an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies a GLXFBConfig structure with the desired attributes for the window. </para> </listitem>",
            "pixmap": "<listitem> <para> Specifies the X pixmap to be used as the rendering area. </para> </listitem>",
            "attrib_list": "<listitem> <para> Currently unused. This must be set to `NULL` or be an empty list (i.e., one in which the first element is `None`). </para> </listitem>"
        }
    },
    "glXCreateWindow": {
        "signature": "GLXWindow glXCreateWindow(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list)",
        "purpose": "create an on-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies a GLXFBConfig structure with the desired attributes for the window. </para> </listitem>",
            "win": "<listitem> <para> Specifies the X window to be used as the rendering area. </para> </listitem>",
            "attrib_list": "<listitem> <para> Currently unused. This must be set to `NULL` or be an empty list (i.e., one in which the first element is `None`). </para> </listitem>"
        }
    },
    "glXDestroyContext": {
        "signature": "void glXDestroyContext(Display * dpy, GLXContext ctx)",
        "purpose": "destroy a GLX context",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies the GLX context to be destroyed. </para> </listitem>"
        }
    },
    "glXDestroyGLXPixmap": {
        "signature": "void glXDestroyGLXPixmap(Display * dpy, GLXPixmap pix)",
        "purpose": "destroy a GLX pixmap",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "pix": "<listitem> <para> Specifies the GLX pixmap to be destroyed. </para> </listitem>"
        }
    },
    "glXDestroyPbuffer": {
        "signature": "void glXDestroyPbuffer(Display * dpy, GLXPbuffer pbuf)",
        "purpose": "destroy an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "pbuf": "<listitem> <para> Specifies the GLXPbuffer to be destroyed. </para> </listitem>"
        }
    },
    "glXDestroyPixmap": {
        "signature": "void glXDestroyPixmap(Display * dpy, GLXPixmap pixmap)",
        "purpose": "destroy an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "pixmap": "<listitem> <para> Specifies the GLXPixmap to be destroyed. </para> </listitem>"
        }
    },
    "glXDestroyWindow": {
        "signature": "void glXDestroyWindow(Display * dpy, GLXWindow win)",
        "purpose": "destroy an on-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "win": "<listitem> <para> Specifies the GLXWindow to be destroyed. </para> </listitem>"
        }
    },
    "glXFreeContextEXT": {
        "signature": "void glXFreeContextEXT(Display * dpy, GLXContext ctx)",
        "purpose": "free client-side memory for imported context",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies a GLX rendering context. </para> </listitem>"
        }
    },
    "glXGetClientString": {
        "signature": "const char * glXGetClientString(Display * dpy, int name)",
        "purpose": "return a string describing the client",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "name": "<listitem> <para> Specifies which string is returned. The symbolic constants `GLX_VENDOR`, `GLX_VERSION`, and `GLX_EXTENSIONS` are accepted. </para> </listitem>"
        }
    },
    "glXGetConfig": {
        "signature": "int glXGetConfig(Display * dpy, XVisualInfo * vis, int attrib, int * value)",
        "purpose": "return information about GLX visuals",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "vis": "<listitem> <para> Specifies the visual to be queried. It is a pointer to an `XVisualInfo` structure, not a visual ID or a pointer to a `Visual`. </para> </listitem>",
            "attrib": "<listitem> <para> Specifies the visual attribute to be returned. </para> </listitem>",
            "value": "<listitem> <para> Returns the requested value. </para> </listitem>"
        }
    },
    "glXGetContextIDEXT": {
        "signature": "GLXContextID glXGetContextIDEXT(const GLXContext ctx)",
        "purpose": "get the XID for a context.",
        "parameters": {
            "ctx": "<listitem> <para> Specifies a GLX rendering context. </para> </listitem>"
        }
    },
    "glXGetCurrentContext": {
        "signature": "GLXContext glXGetCurrentContext()",
        "purpose": "return the current context",
        "parameters": {}
    },
    "glXGetCurrentDisplay": {
        "signature": "Display * glXGetCurrentDisplay()",
        "purpose": "get display for current context",
        "parameters": {}
    },
    "glXGetCurrentDrawable": {
        "signature": "GLXDrawable glXGetCurrentDrawable()",
        "purpose": "return the current drawable",
        "parameters": {}
    },
    "glXGetCurrentReadDrawable": {
        "signature": "GLXDrawable glXGetCurrentReadDrawable()",
        "purpose": "return the current drawable",
        "parameters": {}
    },
    "glXGetFBConfigAttrib": {
        "signature": "int glXGetFBConfigAttrib(Display * dpy, GLXFBConfig config, int attribute, int * value)",
        "purpose": "return information about a GLX frame buffer configuration",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies the GLX frame buffer configuration to be queried. </para> </listitem>",
            "attribute": "<listitem> <para> Specifies the attribute to be returned. </para> </listitem>",
            "value": "<listitem> <para> Returns the requested value. </para> </listitem>"
        }
    },
    "glXGetFBConfigs": {
        "signature": "GLXFBConfig * glXGetFBConfigs(Display * dpy, int screen, int * nelements)",
        "purpose": "list all GLX frame buffer configurations for a given screen",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "screen": "<listitem> <para> Specifies the screen number. </para> </listitem>",
            "nelements": "<listitem> <para> Returns the number of GLXFBConfigs returned. </para> </listitem>"
        }
    },
    "glXGetProcAddress": {
        "signature": "void(*)() glXGetProcAddress(const GLubyte * procName)",
        "purpose": "obtain a pointer to an OpenGL or GLX function",
        "parameters": {
            "procName": "<listitem> <para> Specifies the name of the OpenGL or GLX function whose address is to be returned. </para> </listitem>"
        }
    },
    "glXGetSelectedEvent": {
        "signature": "void glXGetSelectedEvent(Display * dpy, GLXDrawable draw, unsigned long * event_mask)",
        "purpose": "returns GLX events that are selected for a window or a GLX pixel buffer",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "draw": "<listitem> <para> Specifies a GLX drawable. Must be a GLX pixel buffer or a window. </para> </listitem>",
            "event_mask": "<listitem> <para> Returns the events that are selected for <parameter>draw</parameter>. </para> </listitem>"
        }
    },
    "glXGetVisualFromFBConfig": {
        "signature": "XVisualInfo * glXGetVisualFromFBConfig(Display * dpy, GLXFBConfig config)",
        "purpose": "return visual that is associated with the frame buffer configuration",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies the GLX frame buffer configuration. </para> </listitem>"
        }
    },
    "glXImportContextEXT": {
        "signature": "GLXContext glXImportContextEXT(Display * dpy, GLXContextID contextID)",
        "purpose": "import another process's indirect rendering context.",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "contextID": "<listitem> <para> Specifies a GLX rendering context. </para> </listitem>"
        }
    },
    "glXIsDirect": {
        "signature": "Bool glXIsDirect(Display * dpy, GLXContext ctx)",
        "purpose": "indicate whether direct rendering is enabled",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies the GLX context that is being queried. </para> </listitem>"
        }
    },
    "glXMakeContextCurrent": {
        "signature": "Bool glXMakeContextCurrent(Display * display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)",
        "purpose": "attach a GLX context to a GLX drawable",
        "parameters": {
            "display": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "draw": "<listitem> <para> Specifies a GLX drawable to render into. Must be an XID representing a GLXWindow, GLXPixmap, or GLXPbuffer. </para> </listitem>",
            "read": "<listitem> <para> Specifies a GLX drawable to read from. Must be an XID representing a GLXWindow, GLXPixmap, or GLXPbuffer. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies the GLX context to be bound to <parameter>read</parameter> and <parameter>ctx</parameter>. </para> </listitem>"
        }
    },
    "glXMakeCurrent": {
        "signature": "Bool glXMakeCurrent(Display * dpy, GLXDrawable drawable, GLXContext ctx)",
        "purpose": "attach a GLX context to a window or a GLX pixmap",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "drawable": "<listitem> <para> Specifies a GLX drawable. Must be either an X window ID or a GLX pixmap ID. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies a GLX rendering context that is to be attached to <parameter>drawable</parameter>. </para> </listitem>"
        }
    },
    "glXQueryContext": {
        "signature": "int glXQueryContext(Display * dpy, GLXContext ctx, int attribute, int * value)",
        "purpose": "query context information",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies a GLX rendering context. </para> </listitem>",
            "attribute": "<listitem> <para> Specifies that a context parameter should be retrieved. Must be one of `GLX_FBCONFIG_ID`, `GLX_RENDER_TYPE`, or `GLX_SCREEN`. </para> </listitem>",
            "value": "<listitem> <para> Contains the return value for <parameter>attribute</parameter>. </para> </listitem>"
        }
    },
    "glXQueryContextInfoEXT": {
        "signature": "int glXQueryContextInfoEXT(Display * dpy, GLXContext ctx, int attribute, int * value)",
        "purpose": "query context information",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies a GLX rendering context. </para> </listitem>",
            "attribute": "<listitem> <para> Specifies that a context parameter should be retrieved. Must be one of `GLX_SHARED_CONTEXT_EXT`, `GLX_VISUAL_ID_EXT`, or `GLX_SCREEN_EXT`. </para> </listitem>",
            "value": "<listitem> <para> Contains the return value for <parameter>attribute</parameter>. </para> </listitem>"
        }
    },
    "glXQueryDrawable": {
        "signature": "int glXQueryDrawable(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value)",
        "purpose": "returns an attribute associated with a GLX drawable",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "draw": "<listitem> <para> Specifies the GLX drawable to be queried. </para> </listitem>",
            "attribute": "<listitem> <para> Specifies the attribute to be returned. Must be one of `GLX_WIDTH`, `GLX_HEIGHT`, `GLX_PRESERVED_CONTENTS`, `GLX_LARGEST_PBUFFER`, or `GLX_FBCONFIG_ID`. </para> </listitem>",
            "value": "<listitem> <para> Contains the return value for <parameter>attribute</parameter>. </para> </listitem>"
        }
    },
    "glXQueryExtension": {
        "signature": "Bool glXQueryExtension(Display * dpy, int * errorBase, int * eventBase)",
        "purpose": "indicate whether the GLX extension is supported",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "errorBase": "<listitem> <para> Returns the base error code of the GLX server extension. </para> </listitem>",
            "eventBase": "<listitem> <para> Returns the base event code of the GLX server extension. </para> </listitem>"
        }
    },
    "glXQueryExtensionsString": {
        "signature": "const char * glXQueryExtensionsString(Display * dpy, int screen)",
        "purpose": "return list of supported extensions",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "screen": "<listitem> <para> Specifies the screen number. </para> </listitem>"
        }
    },
    "glXQueryServerString": {
        "signature": "const char * glXQueryServerString(Display * dpy, int screen, int name)",
        "purpose": "return string describing the server",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "screen": "<listitem> <para> Specifies the screen number. </para> </listitem>",
            "name": "<listitem> <para> Specifies which string is returned: one of `GLX_VENDOR`, `GLX_VERSION`, or `GLX_EXTENSIONS`. </para> </listitem>"
        }
    },
    "glXQueryVersion": {
        "signature": "Bool glXQueryVersion(Display * dpy, int * major, int * minor)",
        "purpose": "return the version numbers of the GLX extension",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "major": "<listitem> <para> Returns the major version number of the GLX server extension. </para> </listitem>",
            "minor": "<listitem> <para> Returns the minor version number of the GLX server extension. </para> </listitem>"
        }
    },
    "glXSelectEvent": {
        "signature": "void glXSelectEvent(Display * dpy, GLXDrawable draw, unsigned long event_mask)",
        "purpose": "select GLX events for a window or a GLX pixel buffer",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "draw": "<listitem> <para> Specifies a GLX drawable. Must be a GLX pixel buffer or a window. </para> </listitem>",
            "event_mask": "<listitem> <para> Specifies the events to be returned for <parameter>draw</parameter>. </para> </listitem>"
        }
    },
    "glXSwapBuffers": {
        "signature": "void glXSwapBuffers(Display * dpy, GLXDrawable drawable)",
        "purpose": "exchange front and back buffers",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "drawable": "<listitem> <para> Specifies the drawable whose buffers are to be swapped. </para> </listitem>"
        }
    },
    "glXUseXFont": {
        "signature": "void glXUseXFont(Font font, int first, int count, int listBase)",
        "purpose": "create bitmap display lists from an X font",
        "parameters": {
            "font": "<listitem> <para> Specifies the font from which character glyphs are to be taken. </para> </listitem>",
            "first": "<listitem> <para> Specifies the index of the first glyph to be taken. </para> </listitem>",
            "count": "<listitem> <para> Specifies the number of glyphs to be taken. </para> </listitem>",
            "listBase": "<listitem> <para> Specifies the index of the first display list to be generated. </para> </listitem>"
        }
    },
    "glXWaitGL": {
        "signature": "void glXWaitGL(void)",
        "purpose": "complete GL execution prior to subsequent X calls",
        "parameters": {}
    },
    "glXWaitX": {
        "signature": "void glXWaitX(void)",
        "purpose": "complete X execution prior to subsequent GL calls",
        "parameters": {}
    }
}ameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "model": "<listitem> <para> Specifies a modelview matrix (as from a <citerefentry><refentrytitle>glGetFloatv</refentrytitle></citerefentry> call). </para> </listitem>",
            "perspective": "<listitem> <para> Specifies a projection matrix (as from a <citerefentry><refentrytitle>glGetFloatv</refentrytitle></citerefentry> call). </para> </listitem>",
            "view": "<listitem> <para> Specifies a viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call). </para> </listitem>"
        }
    },
    "gluLookAt": {
        "signature": "void gluLookAt(GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ)",
        "purpose": "define a viewing transformation",
        "parameters": {
            "eyeX": "<listitem> <para> Specifies the position of the eye point. </para> </listitem>",
            "centerX": "<listitem> <para> Specifies the position of the reference point. </para> </listitem>",
            "upX": "<listitem> <para> Specifies the direction of the <emphasis>up</emphasis> vector. </para> </listitem>"
        }
    },
    "gluNewNurbsRenderer": {
        "signature": "GLUnurbs* gluNewNurbsRenderer()",
        "purpose": "create a NURBS object",
        "parameters": {}
    },
    "gluNewQuadric": {
        "signature": "GLUquadric* gluNewQuadric()",
        "purpose": "create a quadrics object",
        "parameters": {}
    },
    "gluNewTess": {
        "signature": "GLUtesselator* gluNewTess()",
        "purpose": "create a tessellation object",
        "parameters": {}
    },
    "gluNextContour": {
        "signature": "void gluNextContour(GLUtesselator* tess, GLenum type)",
        "purpose": "mark the beginning of another contour",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of the contour being defined. Valid values are <span style=\"color:blue\">GLU_EXTERIOR</span>, <span style=\"color:blue\">GLU_INTERIOR</span>, <span style=\"color:blue\">GLU_UNKNOWN</span>, <span style=\"color:blue\">GLU_CCW</span>, and <span style=\"color:blue\">GLU_CW</span>. </para> </listitem>"
        }
    },
    "glUniform1f": {
        "signature": "void glUniform1f(GLint location, GLfloat v0)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2f": {
        "signature": "void glUniform2f(GLint location, GLfloat v0, GLfloat v1)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3f": {
        "signature": "void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4f": {
        "signature": "void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1i": {
        "signature": "void glUniform1i(GLint location, GLint v0)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2i": {
        "signature": "void glUniform2i(GLint location, GLint v0, GLint v1)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3i": {
        "signature": "void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4i": {
        "signature": "void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1fv": {
        "signature": "void glUniform1fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2fv": {
        "signature": "void glUniform2fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3fv": {
        "signature": "void glUniform3fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4fv": {
        "signature": "void glUniform4fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform1iv": {
        "signature": "void glUniform1iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform2iv": {
        "signature": "void glUniform2iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform3iv": {
        "signature": "void glUniform3iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniform4iv": {
        "signature": "void glUniform4iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix2fv": {
        "signature": "void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix3fv": {
        "signature": "void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix4fv": {
        "signature": "void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix2x3fv": {
        "signature": "void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix3x2fv": {
        "signature": "void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix2x4fv": {
        "signature": "void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix4x2fv": {
        "signature": "void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix3x4fv": {
        "signature": "void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "glUniformMatrix4x3fv": {
        "signature": "void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem> <para>Specifies the location of the uniform variable to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified uniform variable.</para> </listitem>"
        }
    },
    "gluNurbsCallback": {
        "signature": "void gluNurbsCallback(GLUnurbs* nurb, GLenum which, _GLUfuncptr CallBackFunc)",
        "purpose": "define a callback for a NURBS object",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "which": "<listitem> <para> Specifies the callback being defined. Valid values are <span style=\"color:blue\">GLU_NURBS_BEGIN</span>, <span style=\"color:blue\">GLU_NURBS_VERTEX</span>, <span style=\"color:blue\">GLU_NURBS_NORMAL</span>, <span style=\"color:blue\">GLU_NURBS_COLOR</span>, <span style=\"color:blue\">GLU_NURBS_TEXTURE_COORD</span>, <span style=\"color:blue\">GLU_NURBS_END</span>, <span style=\"color:blue\">GLU_NURBS_BEGIN_DATA</span>, <span style=\"color:blue\">GLU_NURBS_VERTEX_DATA</span>, <span style=\"color:blue\">GLU_NURBS_NORMAL_DATA</span>, <span style=\"color:blue\">GLU_NURBS_COLOR_DATA</span>, <span style=\"color:blue\">GLU_NURBS_TEXTURE_COORD_DATA</span>, <span style=\"color:blue\">GLU_NURBS_END_DATA</span>, and <span style=\"color:blue\">GLU_NURBS_ERROR</span>. </para> </listitem>",
            "CallBackFunc": "<listitem> <para> Specifies the function that the callback calls. </para> </listitem>"
        }
    },
    "gluNurbsCallbackData": {
        "signature": "void gluNurbsCallbackData(GLUnurbs* nurb, void* userData)",
        "purpose": "set a user data pointer",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "userData": "<listitem> <para> Specifies a pointer to the user's data. </para> </listitem>"
        }
    },
    "gluNurbsCallbackDataEXT": {
        "signature": "void gluNurbsCallbackDataEXT(GLUnurbs* nurb, void* userData)",
        "purpose": "set a user data pointer",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "userData": "<listitem> <para> Specifies a pointer to the user's data. </para> </listitem>"
        }
    },
    "gluNurbsCurve": {
        "signature": "void gluNurbsCurve(GLUnurbs* nurb, GLint knotCount, GLfloat * knots, GLint stride, GLfloat * control, GLint order, GLenum type)",
        "purpose": "define the shape of a NURBS curve",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "knotCount": "<listitem> <para> Specifies the number of knots in <parameter>knots</parameter>. <parameter>knotCount</parameter> equals the number of control points plus the order. </para> </listitem>",
            "knots": "<listitem> <para> Specifies an array of <parameter>knotCount</parameter> nondecreasing knot values. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the offset (as a number of single-precision floating-point values) between successive curve control points. </para> </listitem>",
            "control": "<listitem> <para> Specifies a pointer to an array of control points. The coordinates must agree with <parameter>type</parameter>, specified below. </para> </listitem>",
            "order": "<listitem> <para> Specifies the order of the NURBS curve. <parameter>order</parameter> equals degree + 1, hence a cubic curve has an order of 4. </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of the curve. If this curve is defined within a <citerefentry><refentrytitle>gluBeginCurve</refentrytitle></citerefentry>/<citerefentry><refentrytitle>gluEndCurve</refentrytitle></citerefentry> pair, then the type can be any of the valid one-dimensional evaluator types (such as <span style=\"color:blue\">GLU_MAP1_VERTEX_3</span> or <span style=\"color:blue\">GLU_MAP1_COLOR_4</span>). Between a <citerefentry><refentrytitle>gluBeginTrim</refentrytitle></citerefentry>/<citerefentry><refentrytitle>gluEndTrim</refentrytitle></citerefentry> pair, the only valid types are <span style=\"color:blue\">GLU_MAP1_TRIM_2</span> and <span style=\"color:blue\">GLU_MAP1_TRIM_3</span>. </para> </listitem>"
        }
    },
    "gluNurbsProperty": {
        "signature": "void gluNurbsProperty(GLUnurbs* nurb, GLenum property, GLfloat value)",
        "purpose": "set a NURBS property",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "property": "<listitem> <para> Specifies the property to be set. Valid values are <span style=\"color:blue\">GLU_SAMPLING_TOLERANCE</span>, <span style=\"color:blue\">GLU_DISPLAY_MODE</span>, <span style=\"color:blue\">GLU_CULLING</span>, <span style=\"color:blue\">GLU_AUTO_LOAD_MATRIX</span>, <span style=\"color:blue\">GLU_PARAMETRIC_TOLERANCE</span>, <span style=\"color:blue\">GLU_SAMPLING_METHOD</span>, <span style=\"color:blue\">GLU_U_STEP</span>, <span style=\"color:blue\">GLU_V_STEP</span>, or <span style=\"color:blue\">GLU_NURBS_MODE</span>. </para> </listitem>",
            "value": "<listitem> <para> Specifies the value of the indicated property. It may be a numeric value or one of <span style=\"color:blue\">GLU_OUTLINE_POLYGON</span>, <span style=\"color:blue\">GLU_FILL</span>, <span style=\"color:blue\">GLU_OUTLINE_PATCH</span>, <span style=\"color:blue\">GLU_TRUE</span>, <span style=\"color:blue\">GLU_FALSE</span>, <span style=\"color:blue\">GLU_PATH_LENGTH</span>, <span style=\"color:blue\">GLU_PARAMETRIC_ERROR</span>, <span style=\"color:blue\">GLU_DOMAIN_DISTANCE</span>, <span style=\"color:blue\">GLU_NURBS_RENDERER</span>, or <span style=\"color:blue\">GLU_NURBS_TESSELLATOR</span>. </para> </listitem>"
        }
    },
    "gluNurbsSurface": {
        "signature": "void gluNurbsSurface(GLUnurbs* nurb, GLint sKnotCount, GLfloat* sKnots, GLint tKnotCount, GLfloat* tKnots, GLint sStride, GLint tStride, GLfloat* control, GLint sOrder, GLint tOrder, GLenum type)",
        "purpose": "define the shape of a NURBS surface",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "sKnotCount": "<listitem> <para> Specifies the number of knots in the parametric <emphasis>u</emphasis> direction. </para> </listitem>",
            "sKnots": "<listitem> <para> Specifies an array of <parameter>sKnotCount</parameter> nondecreasing knot values in the parametric <emphasis>u</emphasis> direction. </para> </listitem>",
            "tKnotCount": "<listitem> <para> Specifies the number of knots in the parametric <emphasis>v</emphasis> direction. </para> </listitem>",
            "tKnots": "<listitem> <para> Specifies an array of <parameter>tKnotCount</parameter> nondecreasing knot values in the parametric <emphasis>v</emphasis> direction. </para> </listitem>",
            "sStride": "<listitem> <para> Specifies the offset (as a number of single-precision floating-point values) between successive control points in the parametric <emphasis>u</emphasis> direction in <parameter>control</parameter>. </para> </listitem>",
            "tStride": "<listitem> <para> Specifies the offset (in single-precision floating-point values) between successive control points in the parametric <emphasis>v</emphasis> direction in <parameter>control</parameter>. </para> </listitem>",
            "control": "<listitem> <para> Specifies an array containing control points for the NURBS surface. The offsets between successive control points in the parametric <emphasis>u</emphasis> and <emphasis>v</emphasis> directions are given by <parameter>sStride</parameter> and <parameter>tStride</parameter>. </para> </listitem>",
            "sOrder": "<listitem> <para> Specifies the order of the NURBS surface in the parametric <emphasis>u</emphasis> direction. The order is one more than the degree, hence a surface that is cubic in <emphasis>u</emphasis> has a <emphasis>u</emphasis> order of 4. </para> </listitem>",
            "tOrder": "<listitem> <para> Specifies the order of the NURBS surface in the parametric <emphasis>v</emphasis> direction. The order is one more than the degree, hence a surface that is cubic in <emphasis>v</emphasis> has a <emphasis>v</emphasis> order of 4. </para> </listitem>",
            "type": "<listitem> <para> Specifies type of the surface. <parameter>type</parameter> can be any of the valid two-dimensional evaluator types (such as <span style=\"color:blue\">GLU_MAP2_VERTEX_3</span> or <span style=\"color:blue\">GLU_MAP2_COLOR_4</span>). </para> </listitem>"
        }
    },
    "gluOrtho2D": {
        "signature": "void gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)",
        "purpose": "define a 2D orthographic projection matrix",
        "parameters": {
            "left": "<listitem> <para> Specify the coordinates for the left and right vertical clipping planes. </para> </listitem>",
            "bottom": "<listitem> <para> Specify the coordinates for the bottom and top horizontal clipping planes. </para> </listitem>"
        }
    },
    "gluPartialDisk": {
        "signature": "void gluPartialDisk(GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, GLdouble start, GLdouble sweep)",
        "purpose": "draw an arc of a disk",
        "parameters": {
            "quad": "<listitem> <para> Specifies a quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "inner": "<listitem> <para> Specifies the inner radius of the partial disk (can be 0). </para> </listitem>",
            "outer": "<listitem> <para> Specifies the outer radius of the partial disk. </para> </listitem>",
            "slices": "<listitem> <para> Specifies the number of subdivisions around the <emphasis>z</emphasis> axis. </para> </listitem>",
            "loops": "<listitem> <para> Specifies the number of concentric rings about the origin into which the partial disk is subdivided. </para> </listitem>",
            "start": "<listitem> <para> Specifies the starting angle, in degrees, of the disk portion. </para> </listitem>",
            "sweep": "<listitem> <para> Specifies the sweep angle, in degrees, of the disk portion. </para> </listitem>"
        }
    },
    "gluPerspective": {
        "signature": "void gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar)",
        "purpose": "set up a perspective projection matrix",
        "parameters": {
            "fovy": "<listitem> <para> Specifies the field of view angle, in degrees, in the <emphasis>y</emphasis> direction. </para> </listitem>",
            "aspect": "<listitem> <para> Specifies the aspect ratio that determines the field of view in the <emphasis>x</emphasis> direction. The aspect ratio is the ratio of <emphasis>x</emphasis> (width) to <emphasis>y</emphasis> (height). </para> </listitem>",
            "zNear": "<listitem> <para> Specifies the distance from the viewer to the near clipping plane (always positive). </para> </listitem>",
            "zFar": "<listitem> <para> Specifies the distance from the viewer to the far clipping plane (always positive). </para> </listitem>"
        }
    },
    "gluPickMatrix": {
        "signature": "void gluPickMatrix(GLdouble x, GLdouble y, GLdouble delX, GLdouble delY, GLint * viewport)",
        "purpose": "define a picking region",
        "parameters": {
            "x": "<listitem> <para> Specify the center of a picking region in window coordinates. </para> </listitem>",
            "delX": "<listitem> <para> Specify the width and height, respectively, of the picking region in window coordinates. </para> </listitem>",
            "viewport": "<listitem> <para> Specifies the current viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call). </para> </listitem>"
        }
    },
    "gluProject": {
        "signature": "GLint gluProject(GLdouble objX, GLdouble objY, GLdouble objZ, const GLdouble * model, const GLdouble * proj, const GLint * view, GLdouble* winX, GLdouble* winY, GLdouble* winZ)",
        "purpose": "map object coordinates to window coordinates",
        "parameters": {
            "objX": "<listitem> <para> Specify the object coordinates. </para> </listitem>",
            "model": "<listitem> <para> Specifies the current modelview matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "proj": "<listitem> <para> Specifies the current projection matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "view": "<listitem> <para> Specifies the current viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call). </para> </listitem>",
            "winX": "<listitem> <para> Return the computed window coordinates. </para> </listitem>"
        }
    },
    "gluPwlCurve": {
        "signature": "void gluPwlCurve(GLUnurbs* nurb, GLint count, GLfloat* data, GLint stride, GLenum type)",
        "purpose": "describe a piecewise linear NURBS trimming curve",
        "parameters": {
            "nurb": "<listitem> <para> Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>). </para> </listitem>",
            "count": "<listitem> <para> Specifies the number of points on the curve. </para> </listitem>",
            "data": "<listitem> <para> Specifies an array containing the curve points. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the offset (a number of single-precision floating-point values) between points on the curve. </para> </listitem>",
            "type": "<listitem> <para> Specifies the type of curve. Must be either <span style=\"color:blue\">GLU_MAP1_TRIM_2</span> or <span style=\"color:blue\">GLU_MAP1_TRIM_3</span>. </para> </listitem>"
        }
    },
    "gluQuadricCallback": {
        "signature": "void gluQuadricCallback(GLUquadric* quad, GLenum which, _GLUfuncptr CallBackFunc)",
        "purpose": "define a callback for a quadrics object",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "which": "<listitem> <para> Specifies the callback being defined. The only valid value is <span style=\"color:blue\">GLU_ERROR</span>. </para> </listitem>",
            "CallBackFunc": "<listitem> <para> Specifies the function to be called. </para> </listitem>"
        }
    },
    "gluQuadricDrawStyle": {
        "signature": "void gluQuadricDrawStyle(GLUquadric* quad, GLenum draw)",
        "purpose": "specify the draw style desired for quadrics",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "draw": "<listitem> <para> Specifies the desired draw style. Valid values are <span style=\"color:blue\">GLU_FILL</span>, <span style=\"color:blue\">GLU_LINE</span>, <span style=\"color:blue\">GLU_SILHOUETTE</span>, and <span style=\"color:blue\">GLU_POINT</span>. </para> </listitem>"
        }
    },
    "gluQuadricNormals": {
        "signature": "void gluQuadricNormals(GLUquadric* quad, GLenum normal)",
        "purpose": "specify what kind of normals are desired for quadrics",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "normal": "<listitem> <para> Specifies the desired type of normals. Valid values are <span style=\"color:blue\">GLU_NONE</span>, <span style=\"color:blue\">GLU_FLAT</span>, and <span style=\"color:blue\">GLU_SMOOTH</span>. </para> </listitem>"
        }
    },
    "gluQuadricOrientation": {
        "signature": "void gluQuadricOrientation(GLUquadric* quad, GLenum orientation)",
        "purpose": "specify inside/outside orientation for quadrics",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "orientation": "<listitem> <para> Specifies the desired orientation. Valid values are <span style=\"color:blue\">GLU_OUTSIDE</span> and <span style=\"color:blue\">GLU_INSIDE</span>. </para> </listitem>"
        }
    },
    "gluQuadricTexture": {
        "signature": "void gluQuadricTexture(GLUquadric* quad, GLboolean texture)",
        "purpose": "specify if texturing is desired for quadrics",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "texture": "<listitem> <para> Specifies a flag indicating if texture coordinates should be generated. </para> </listitem>"
        }
    },
    "gluScaleImage": {
        "signature": "GLint gluScaleImage(GLenum format, GLsizei wIn, GLsizei hIn, GLenum typeIn, const void * dataIn, GLsizei wOut, GLsizei hOut, GLenum typeOut, void* dataOut)",
        "purpose": "scale an image to an arbitrary size",
        "parameters": {
            "format": "<listitem> <para> Specifies the format of the pixel data. The following symbolic values are valid: <span style=\"color:blue\">GLU_COLOR_INDEX</span>, <span style=\"color:blue\">GLU_STENCIL_INDEX</span>, <span style=\"color:blue\">GLU_DEPTH_COMPONENT</span>, <span style=\"color:blue\">GLU_RED</span>, <span style=\"color:blue\">GLU_GREEN</span>, <span style=\"color:blue\">GLU_BLUE</span>, <span style=\"color:blue\">GLU_ALPHA</span>, <span style=\"color:blue\">GLU_RGB</span>, <span style=\"color:blue\">GLU_RGBA</span>, <span style=\"color:blue\">GLU_BGR</span>, <span style=\"color:blue\">GLU_BGRA</span>, <span style=\"color:blue\">GLU_LUMINANCE</span>, and <span style=\"color:blue\">GLU_LUMINANCE_ALPHA</span>. </para> </listitem>",
            "wIn": "<listitem> <para> Specify in pixels the width and height, respectively, of the source image. </para> </listitem>",
            "typeIn": "<listitem> <para> Specifies the data type for <parameter>dataIn</parameter>. Must be one of <span style=\"color:blue\">GLU_UNSIGNED_BYTE</span>, <span style=\"color:blue\">GLU_BYTE</span>, <span style=\"color:blue\">GLU_BITMAP</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT</span>, <span style=\"color:blue\">GLU_SHORT</span>, <span style=\"color:blue\">GLU_UNSIGNED_INT</span>, <span style=\"color:blue\">GLU_INT</span>, <span style=\"color:blue\">GLU_FLOAT</span>, <span style=\"color:blue\">GLU_UNSIGNED_BYTE_3_3_2</span>, <span style=\"color:blue\">GLU_UNSIGNED_BYTE_2_3_3_REV</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_5_6_5</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_5_6_5_REV</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_4_4_4_4</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_4_4_4_4_REV</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_5_5_5_1</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_1_5_5_5_REV</span>, <span style=\"color:blue\">GLU_UNSIGNED_INT_8_8_8_8</span>, <span style=\"color:blue\">GLU_UNSIGNED_INT_8_8_8_8_REV</span>, <span style=\"color:blue\">GLU_UNSIGNED_INT_10_10_10_2</span>, or <span style=\"color:blue\">GLU_UNSIGNED_INT_2_10_10_10_REV</span>. </para> </listitem>",
            "dataIn": "<listitem> <para> Specifies a pointer to the source image. </para> </listitem>",
            "wOut": "<listitem> <para> Specify the width and height, respectively, in pixels of the destination image. </para> </listitem>",
            "typeOut": "<listitem> <para> Specifies the data type for <parameter>dataOut</parameter>. Must be one of <span style=\"color:blue\">GLU_UNSIGNED_BYTE</span>, <span style=\"color:blue\">GLU_BYTE</span>, <span style=\"color:blue\">GLU_BITMAP</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT</span>, <span style=\"color:blue\">GLU_SHORT</span>, <span style=\"color:blue\">GLU_UNSIGNED_INT</span>, <span style=\"color:blue\">GLU_INT</span>, <span style=\"color:blue\">GLU_FLOAT</span>, <span style=\"color:blue\">GLU_UNSIGNED_BYTE_3_3_2</span>, <span style=\"color:blue\">GLU_UNSIGNED_BYTE_2_3_3_REV</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_5_6_5</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_5_6_5_REV</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_4_4_4_4</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_4_4_4_4_REV</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_5_5_5_1</span>, <span style=\"color:blue\">GLU_UNSIGNED_SHORT_1_5_5_5_REV</span>, <span style=\"color:blue\">GLU_UNSIGNED_INT_8_8_8_8</span>, <span style=\"color:blue\">GLU_UNSIGNED_INT_8_8_8_8_REV</span>, <span style=\"color:blue\">GLU_UNSIGNED_INT_10_10_10_2</span>, or <span style=\"color:blue\">GLU_UNSIGNED_INT_2_10_10_10_REV</span>. </para> </listitem>",
            "dataOut": "<listitem> <para> Specifies a pointer to the destination image. </para> </listitem>"
        }
    },
    "glUseProgram": {
        "signature": "void glUseProgram(GLuint program)",
        "purpose": "Installs a program object as part of current rendering state",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object whose executables are to be used as part of current rendering state.</para> </listitem>"
        }
    },
    "gluSphere": {
        "signature": "void gluSphere(GLUquadric* quad, GLdouble radius, GLint slices, GLint stacks)",
        "purpose": "draw a sphere",
        "parameters": {
            "quad": "<listitem> <para> Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>). </para> </listitem>",
            "radius": "<listitem> <para> Specifies the radius of the sphere. </para> </listitem>",
            "slices": "<listitem> <para> Specifies the number of subdivisions around the <emphasis>z</emphasis> axis (similar to lines of longitude). </para> </listitem>",
            "stacks": "<listitem> <para> Specifies the number of subdivisions along the <emphasis>z</emphasis> axis (similar to lines of latitude). </para> </listitem>"
        }
    },
    "gluTessBeginContour": {
        "signature": "void gluTessBeginContour(GLUtesselator* tess)",
        "purpose": "delimit a contour description",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluTessEndContour": {
        "signature": "void gluTessEndContour(GLUtesselator* tess)",
        "purpose": "delimit a contour description",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluTessBeginPolygon": {
        "signature": "void gluTessBeginPolygon(GLUtesselator* tess, void* data)",
        "purpose": "delimit a polygon description",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "data": "<listitem> <para> Specifies a pointer to user polygon data. </para> </listitem>"
        }
    },
    "gluTessCallback": {
        "signature": "void gluTessCallback(GLUtesselator* tess, GLenum which, _GLUfuncptr CallBackFunc)",
        "purpose": "define a callback for a tessellation object",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "which": "<listitem> <para> Specifies the callback being defined. The following values are valid: <span style=\"color:blue\">GLU_TESS_BEGIN</span>, <span style=\"color:blue\">GLU_TESS_BEGIN_DATA</span>, <span style=\"color:blue\">GLU_TESS_EDGE_FLAG</span>, <span style=\"color:blue\">GLU_TESS_EDGE_FLAG_DATA</span>, <span style=\"color:blue\">GLU_TESS_VERTEX</span>, <span style=\"color:blue\">GLU_TESS_VERTEX_DATA</span>, <span style=\"color:blue\">GLU_TESS_END</span>, <span style=\"color:blue\">GLU_TESS_END_DATA</span>, <span style=\"color:blue\">GLU_TESS_COMBINE</span>, <span style=\"color:blue\">GLU_TESS_COMBINE_DATA</span>, <span style=\"color:blue\">GLU_TESS_ERROR</span>, and <span style=\"color:blue\">GLU_TESS_ERROR_DATA</span>. </para> </listitem>",
            "CallBackFunc": "<listitem> <para> Specifies the function to be called. </para> </listitem>"
        }
    },
    "gluTessEndPolygon": {
        "signature": "void gluTessEndPolygon(GLUtesselator* tess)",
        "purpose": "delimit a polygon description",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluTessNormal": {
        "signature": "void gluTessNormal(GLUtesselator* tess, GLdouble valueX, GLdouble valueY, GLdouble valueZ)",
        "purpose": "specify a normal for a polygon",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "valueX": "<listitem> <para> Specifies the first component of the normal. </para> </listitem>",
            "valueY": "<listitem> <para> Specifies the second component of the normal. </para> </listitem>",
            "valueZ": "<listitem> <para> Specifies the third component of the normal. </para> </listitem>"
        }
    },
    "gluTessProperty": {
        "signature": "void gluTessProperty(GLUtesselator* tess, GLenum which, GLdouble data)",
        "purpose": "set a tessellation object property",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "which": "<listitem> <para> Specifies the property to be set. Valid values are <span style=\"color:blue\">GLU_TESS_WINDING_RULE</span>, <span style=\"color:blue\">GLU_TESS_BOUNDARY_ONLY</span>, and <span style=\"color:blue\">GLU_TESS_TOLERANCE</span>. </para> </listitem>",
            "data": "<listitem> <para> Specifies the value of the indicated property. </para> </listitem>"
        }
    },
    "gluTessVertex": {
        "signature": "void gluTessVertex(GLUtesselator* tess, GLdouble * location, void* data)",
        "purpose": "specify a vertex on a polygon",
        "parameters": {
            "tess": "<listitem> <para> Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>). </para> </listitem>",
            "location": "<listitem> <para> Specifies the location of the vertex. </para> </listitem>",
            "data": "<listitem> <para> Specifies an opaque pointer passed back to the program with the vertex callback (as specified by <citerefentry><refentrytitle>gluTessCallback</refentrytitle></citerefentry>). </para> </listitem>"
        }
    },
    "gluUnProject": {
        "signature": "GLint gluUnProject(GLdouble winX, GLdouble winY, GLdouble winZ, const GLdouble * model, const GLdouble * proj, const GLint * view, GLdouble* objX, GLdouble* objY, GLdouble* objZ)",
        "purpose": "map window coordinates to object coordinates",
        "parameters": {
            "winX": "<listitem> <para> Specify the window coordinates to be mapped. </para> </listitem>",
            "model": "<listitem> <para> Specifies the modelview matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "proj": "<listitem> <para> Specifies the projection matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "view": "<listitem> <para> Specifies the viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call). </para> </listitem>",
            "objX": "<listitem> <para> Returns the computed object coordinates. </para> </listitem>"
        }
    },
    "gluUnProject4": {
        "signature": "GLint gluUnProject4(GLdouble winX, GLdouble winY, GLdouble winZ, GLdouble clipW, const GLdouble * model, const GLdouble * proj, const GLint * view, GLdouble nearVal, GLdouble farVal, GLdouble* objX, GLdouble* objY, GLdouble* objZ, GLdouble* objW)",
        "purpose": "map window and clip coordinates to object coordinates",
        "parameters": {
            "winX": "<listitem> <para> Specify the window coordinates to be mapped. </para> </listitem>",
            "clipW": "<listitem> <para> Specify the clip w coordinate to be mapped. </para> </listitem>",
            "model": "<listitem> <para> Specifies the modelview matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "proj": "<listitem> <para> Specifies the projection matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "view": "<listitem> <para> Specifies the viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call). </para> </listitem>",
            "nearVal": "<listitem> <para> Specifies the near and far planes (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call). </para> </listitem>",
            "objX": "<listitem> <para> Returns the computed object coordinates. </para> </listitem>"
        }
    },
    "glValidateProgram": {
        "signature": "void glValidateProgram(GLuint program)",
        "purpose": "Validates a program object",
        "parameters": {
            "program": "<listitem> <para>Specifies the handle of the program object to be validated.</para> </listitem>"
        }
    },
    "glVertex2s": {
        "signature": "void glVertex2s(GLshort x, GLshort y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2i": {
        "signature": "void glVertex2i(GLint x, GLint y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2f": {
        "signature": "void glVertex2f(GLfloat x, GLfloat y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2d": {
        "signature": "void glVertex2d(GLdouble x, GLdouble y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3s": {
        "signature": "void glVertex3s(GLshort x, GLshort y, GLshort z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3i": {
        "signature": "void glVertex3i(GLint x, GLint y, GLint z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3f": {
        "signature": "void glVertex3f(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3d": {
        "signature": "void glVertex3d(GLdouble x, GLdouble y, GLdouble z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4s": {
        "signature": "void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4i": {
        "signature": "void glVertex4i(GLint x, GLint y, GLint z, GLint w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4f": {
        "signature": "void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4d": {
        "signature": "void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2sv": {
        "signature": "void glVertex2sv(const GLshort * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2iv": {
        "signature": "void glVertex2iv(const GLint * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2fv": {
        "signature": "void glVertex2fv(const GLfloat * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex2dv": {
        "signature": "void glVertex2dv(const GLdouble * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3sv": {
        "signature": "void glVertex3sv(const GLshort * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3iv": {
        "signature": "void glVertex3iv(const GLint * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3fv": {
        "signature": "void glVertex3fv(const GLfloat * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex3dv": {
        "signature": "void glVertex3dv(const GLdouble * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4sv": {
        "signature": "void glVertex4sv(const GLshort * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4iv": {
        "signature": "void glVertex4iv(const GLint * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4fv": {
        "signature": "void glVertex4fv(const GLfloat * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertex4dv": {
        "signature": "void glVertex4dv(const GLdouble * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem> <para> Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex. Not all parameters are present in all forms of the command. </para> </listitem>"
        }
    },
    "glVertexAttrib1f": {
        "signature": "void glVertexAttrib1f(GLuint index, GLfloat v0)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1s": {
        "signature": "void glVertexAttrib1s(GLuint index, GLshort v0)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1d": {
        "signature": "void glVertexAttrib1d(GLuint index, GLdouble v0)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2f": {
        "signature": "void glVertexAttrib2f(GLuint index, GLfloat v0, GLfloat v1)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2s": {
        "signature": "void glVertexAttrib2s(GLuint index, GLshort v0, GLshort v1)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2d": {
        "signature": "void glVertexAttrib2d(GLuint index, GLdouble v0, GLdouble v1)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3f": {
        "signature": "void glVertexAttrib3f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3s": {
        "signature": "void glVertexAttrib3s(GLuint index, GLshort v0, GLshort v1, GLshort v2)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3d": {
        "signature": "void glVertexAttrib3d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4f": {
        "signature": "void glVertexAttrib4f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4s": {
        "signature": "void glVertexAttrib4s(GLuint index, GLshort v0, GLshort v1, GLshort v2, GLshort v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4d": {
        "signature": "void glVertexAttrib4d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nub": {
        "signature": "void glVertexAttrib4Nub(GLuint index, GLubyte v0, GLubyte v1, GLubyte v2, GLubyte v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1fv": {
        "signature": "void glVertexAttrib1fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1sv": {
        "signature": "void glVertexAttrib1sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib1dv": {
        "signature": "void glVertexAttrib1dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2fv": {
        "signature": "void glVertexAttrib2fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2sv": {
        "signature": "void glVertexAttrib2sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib2dv": {
        "signature": "void glVertexAttrib2dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3fv": {
        "signature": "void glVertexAttrib3fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3sv": {
        "signature": "void glVertexAttrib3sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib3dv": {
        "signature": "void glVertexAttrib3dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4fv": {
        "signature": "void glVertexAttrib4fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4sv": {
        "signature": "void glVertexAttrib4sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4dv": {
        "signature": "void glVertexAttrib4dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4iv": {
        "signature": "void glVertexAttrib4iv(GLuint index, const GLint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4bv": {
        "signature": "void glVertexAttrib4bv(GLuint index, const GLbyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4ubv": {
        "signature": "void glVertexAttrib4ubv(GLuint index, const GLubyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4usv": {
        "signature": "void glVertexAttrib4usv(GLuint index, const GLushort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4uiv": {
        "signature": "void glVertexAttrib4uiv(GLuint index, const GLuint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nbv": {
        "signature": "void glVertexAttrib4Nbv(GLuint index, const GLbyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nsv": {
        "signature": "void glVertexAttrib4Nsv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Niv": {
        "signature": "void glVertexAttrib4Niv(GLuint index, const GLint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nubv": {
        "signature": "void glVertexAttrib4Nubv(GLuint index, const GLubyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nusv": {
        "signature": "void glVertexAttrib4Nusv(GLuint index, const GLushort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttrib4Nuiv": {
        "signature": "void glVertexAttrib4Nuiv(GLuint index, const GLuint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "v0": "<listitem> <para>Specifies the new values to be used for the specified vertex attribute.</para> </listitem>"
        }
    },
    "glVertexAttribPointer": {
        "signature": "void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)",
        "purpose": "define an array of generic vertex attribute data",
        "parameters": {
            "index": "<listitem> <para>Specifies the index of the generic vertex attribute to be modified.</para> </listitem>",
            "size": "<listitem> <para>Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.</para> </listitem>",
            "type": "<listitem> <para>Specifies the data type of each component in the array. Symbolic constants <span style=\"color:blue\">GL_BYTE</span>, <span style=\"color:blue\">GL_UNSIGNED_BYTE</span>, <span style=\"color:blue\">GL_SHORT</span>, <span style=\"color:blue\">GL_UNSIGNED_SHORT</span>, <span style=\"color:blue\">GL_INT</span>, <span style=\"color:blue\">GL_UNSIGNED_INT</span>, <span style=\"color:blue\">GL_FLOAT</span>, or <span style=\"color:blue\">GL_DOUBLE</span> are accepted. The initial value is <span style=\"color:blue\">GL_FLOAT</span>.</para> </listitem>",
            "normalized": "<listitem> <para>Specifies whether fixed-point data values should be normalized (<span style=\"color:blue\">GL_TRUE</span>) or converted directly as fixed-point values (<span style=\"color:blue\">GL_FALSE</span>) when they are accessed.</para> </listitem>",
            "stride": "<listitem> <para>Specifies the byte offset between consecutive generic vertex attributes. If <parameter>stride</parameter> is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.</para> </listitem>",
            "pointer": "<listitem> <para>Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.</para> </listitem>"
        }
    },
    "glVertexPointer": {
        "signature": "void glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of vertex data",
        "parameters": {
            "size": "<listitem> <para> Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4. </para> </listitem>",
            "type": "<listitem> <para> Specifies the data type of each coordinate in the array. Symbolic constants <span style=\"color:blue\">GL_SHORT</span>, <span style=\"color:blue\">GL_INT</span>, <span style=\"color:blue\">GL_FLOAT</span>, or <span style=\"color:blue\">GL_DOUBLE</span> are accepted. The initial value is <span style=\"color:blue\">GL_FLOAT</span>. </para> </listitem>",
            "stride": "<listitem> <para> Specifies the byte offset between consecutive vertices. If <parameter>stride</parameter> is 0, the vertices are understood to be tightly packed in the array. The initial value is 0. </para> </listitem>",
            "pointer": "<listitem> <para> Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0. </para> </listitem>"
        }
    },
    "glViewport": {
        "signature": "void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "set the viewport",
        "parameters": {
            "x": "<listitem> <para> Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0). </para> </listitem>",
            "width": "<listitem> <para> Specify the width and height of the viewport. When a GL context is first attached to a window, <parameter>width</parameter> and <parameter>height</parameter> are set to the dimensions of that window. </para> </listitem>"
        }
    },
    "glWindowPos2s": {
        "signature": "void glWindowPos2s(GLshort x, GLshort y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2i": {
        "signature": "void glWindowPos2i(GLint x, GLint y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2f": {
        "signature": "void glWindowPos2f(GLfloat x, GLfloat y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2d": {
        "signature": "void glWindowPos2d(GLdouble x, GLdouble y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3s": {
        "signature": "void glWindowPos3s(GLshort x, GLshort y, GLshort z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3i": {
        "signature": "void glWindowPos3i(GLint x, GLint y, GLint z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3f": {
        "signature": "void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3d": {
        "signature": "void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2sv": {
        "signature": "void glWindowPos2sv(const GLshort * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2iv": {
        "signature": "void glWindowPos2iv(const GLint * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2fv": {
        "signature": "void glWindowPos2fv(const GLfloat * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos2dv": {
        "signature": "void glWindowPos2dv(const GLdouble * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3sv": {
        "signature": "void glWindowPos3sv(const GLshort * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3iv": {
        "signature": "void glWindowPos3iv(const GLint * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3fv": {
        "signature": "void glWindowPos3fv(const GLfloat * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glWindowPos3dv": {
        "signature": "void glWindowPos3dv(const GLdouble * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem> <para> Specify the <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>, <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation> coordinates for the raster position. </para> </listitem>"
        }
    },
    "glXChooseFBConfig": {
        "signature": "GLXFBConfig * glXChooseFBConfig(Display * dpy, int screen, const int * attrib_list, int * nelements)",
        "purpose": "return a list of GLX frame buffer configurations that match the specified attributes",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "screen": "<listitem> <para> Specifies the screen number. </para> </listitem>",
            "attrib_list": "<listitem> <para> Specifies a list of attribute/value pairs. The last attribute must be <span style=\"color:blue\">None</span>. </para> </listitem>",
            "nelements": "<listitem> <para> Returns the number of elements in the list returned by <function>glXChooseFBConfig</function>. </para> </listitem>"
        }
    },
    "glXChooseVisual": {
        "signature": "XVisualInfo* glXChooseVisual(Display * dpy, int screen, int * attribList)",
        "purpose": "return a visual that matches specified attributes",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "screen": "<listitem> <para> Specifies the screen number. </para> </listitem>",
            "attribList": "<listitem> <para> Specifies a list of boolean attributes and integer attribute/value pairs. The last attribute must be <span style=\"color:blue\">None</span>. </para> </listitem>"
        }
    },
    "glXCopyContext": {
        "signature": "void glXCopyContext(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask)",
        "purpose": "copy state from one rendering context to another",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "src": "<listitem> <para> Specifies the source context. </para> </listitem>",
            "dst": "<listitem> <para> Specifies the destination context. </para> </listitem>",
            "mask": "<listitem> <para> Specifies which portions of <parameter>src</parameter> state are to be copied to <parameter>dst</parameter>. </para> </listitem>"
        }
    },
    "glXCreateContext": {
        "signature": "GLXContext glXCreateContext(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct)",
        "purpose": "create a new GLX rendering context",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "vis": "<listitem> <para> Specifies the visual that defines the frame buffer resources available to the rendering context. It is a pointer to an <span style=\"color:blue\">XVisualInfo</span> structure, not a visual ID or a pointer to a <span style=\"color:blue\">Visual</span>. </para> </listitem>",
            "shareList": "<listitem> <para> Specifies the context with which to share display lists. <span style=\"color:blue\">NULL</span> indicates that no sharing is to take place. </para> </listitem>",
            "direct": "<listitem> <para> Specifies whether rendering is to be done with a direct connection to the graphics system if possible (<span style=\"color:blue\">True</span>) or through the X server (<span style=\"color:blue\">False</span>). </para> </listitem>"
        }
    },
    "glXCreateGLXPixmap": {
        "signature": "GLXPixmap glXCreateGLXPixmap(Display * dpy, XVisualInfo * vis, Pixmap pixmap)",
        "purpose": "create an off-screen GLX rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "vis": "<listitem> <para> Specifies the visual that defines the structure of the rendering area. It is a pointer to an <span style=\"color:blue\">XVisualInfo</span> structure, not a visual ID or a pointer to a <span style=\"color:blue\">Visual</span>. </para> </listitem>",
            "pixmap": "<listitem> <para> Specifies the X pixmap that will be used as the front left color buffer of the off-screen rendering area. </para> </listitem>"
        }
    },
    "glXCreateNewContext": {
        "signature": "GLXContext glXCreateNewContext(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)",
        "purpose": "create a new GLX rendering context",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies the GLXFBConfig structure with the desired attributes for the context. </para> </listitem>",
            "render_type": "<listitem> <para> Specifies the type of the context to be created. Must be one of <span style=\"color:blue\">GLX_RGBA_TYPE</span> or <span style=\"color:blue\">GLX_COLOR_INDEX_TYPE</span>. </para> </listitem>",
            "share_list": "<listitem> <para> Specifies whether rendering is to be done with a direct connection to the graphics system if possible (<span style=\"color:blue\">True</span>) or through the X server (<span style=\"color:blue\">False</span>). </para> </listitem>"
        }
    },
    "glXCreatePbuffer": {
        "signature": "GLXPbuffer glXCreatePbuffer(Display * dpy, GLXFBConfig config, const int * attrib_list)",
        "purpose": "create an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies a GLXFBConfig structure with the desired attributes for the window. </para> </listitem>",
            "attrib_list": "<listitem> <para> Specifies a list of attribute value pairs, which must be terminated with <span style=\"color:blue\">None</span> or <span style=\"color:blue\">NULL</span>. Accepted attributes are <span style=\"color:blue\">GLX_PBUFFER_WIDTH</span>, <span style=\"color:blue\">GLX_PBUFFER_HEIGHT</span>, <span style=\"color:blue\">GLX_PRESERVED_CONTENTS</span>, and <span style=\"color:blue\">GLX_LARGEST_PBUFFER</span>. </para> </listitem>"
        }
    },
    "glXCreatePixmap": {
        "signature": "GLXPixmap glXCreatePixmap(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list)",
        "purpose": "create an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies a GLXFBConfig structure with the desired attributes for the window. </para> </listitem>",
            "pixmap": "<listitem> <para> Specifies the X pixmap to be used as the rendering area. </para> </listitem>",
            "attrib_list": "<listitem> <para> Currently unused. This must be set to <span style=\"color:blue\">NULL</span> or be an empty list (i.e., one in which the first element is <span style=\"color:blue\">None</span>). </para> </listitem>"
        }
    },
    "glXCreateWindow": {
        "signature": "GLXWindow glXCreateWindow(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list)",
        "purpose": "create an on-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies a GLXFBConfig structure with the desired attributes for the window. </para> </listitem>",
            "win": "<listitem> <para> Specifies the X window to be used as the rendering area. </para> </listitem>",
            "attrib_list": "<listitem> <para> Currently unused. This must be set to <span style=\"color:blue\">NULL</span> or be an empty list (i.e., one in which the first element is <span style=\"color:blue\">None</span>). </para> </listitem>"
        }
    },
    "glXDestroyContext": {
        "signature": "void glXDestroyContext(Display * dpy, GLXContext ctx)",
        "purpose": "destroy a GLX context",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies the GLX context to be destroyed. </para> </listitem>"
        }
    },
    "glXDestroyGLXPixmap": {
        "signature": "void glXDestroyGLXPixmap(Display * dpy, GLXPixmap pix)",
        "purpose": "destroy a GLX pixmap",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "pix": "<listitem> <para> Specifies the GLX pixmap to be destroyed. </para> </listitem>"
        }
    },
    "glXDestroyPbuffer": {
        "signature": "void glXDestroyPbuffer(Display * dpy, GLXPbuffer pbuf)",
        "purpose": "destroy an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "pbuf": "<listitem> <para> Specifies the GLXPbuffer to be destroyed. </para> </listitem>"
        }
    },
    "glXDestroyPixmap": {
        "signature": "void glXDestroyPixmap(Display * dpy, GLXPixmap pixmap)",
        "purpose": "destroy an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "pixmap": "<listitem> <para> Specifies the GLXPixmap to be destroyed. </para> </listitem>"
        }
    },
    "glXDestroyWindow": {
        "signature": "void glXDestroyWindow(Display * dpy, GLXWindow win)",
        "purpose": "destroy an on-screen rendering area",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "win": "<listitem> <para> Specifies the GLXWindow to be destroyed. </para> </listitem>"
        }
    },
    "glXFreeContextEXT": {
        "signature": "void glXFreeContextEXT(Display * dpy, GLXContext ctx)",
        "purpose": "free client-side memory for imported context",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies a GLX rendering context. </para> </listitem>"
        }
    },
    "glXGetClientString": {
        "signature": "const char * glXGetClientString(Display * dpy, int name)",
        "purpose": "return a string describing the client",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "name": "<listitem> <para> Specifies which string is returned. The symbolic constants <span style=\"color:blue\">GLX_VENDOR</span>, <span style=\"color:blue\">GLX_VERSION</span>, and <span style=\"color:blue\">GLX_EXTENSIONS</span> are accepted. </para> </listitem>"
        }
    },
    "glXGetConfig": {
        "signature": "int glXGetConfig(Display * dpy, XVisualInfo * vis, int attrib, int * value)",
        "purpose": "return information about GLX visuals",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "vis": "<listitem> <para> Specifies the visual to be queried. It is a pointer to an <span style=\"color:blue\">XVisualInfo</span> structure, not a visual ID or a pointer to a <span style=\"color:blue\">Visual</span>. </para> </listitem>",
            "attrib": "<listitem> <para> Specifies the visual attribute to be returned. </para> </listitem>",
            "value": "<listitem> <para> Returns the requested value. </para> </listitem>"
        }
    },
    "glXGetContextIDEXT": {
        "signature": "GLXContextID glXGetContextIDEXT(const GLXContext ctx)",
        "purpose": "get the XID for a context.",
        "parameters": {
            "ctx": "<listitem> <para> Specifies a GLX rendering context. </para> </listitem>"
        }
    },
    "glXGetCurrentContext": {
        "signature": "GLXContext glXGetCurrentContext()",
        "purpose": "return the current context",
        "parameters": {}
    },
    "glXGetCurrentDisplay": {
        "signature": "Display * glXGetCurrentDisplay()",
        "purpose": "get display for current context",
        "parameters": {}
    },
    "glXGetCurrentDrawable": {
        "signature": "GLXDrawable glXGetCurrentDrawable()",
        "purpose": "return the current drawable",
        "parameters": {}
    },
    "glXGetCurrentReadDrawable": {
        "signature": "GLXDrawable glXGetCurrentReadDrawable()",
        "purpose": "return the current drawable",
        "parameters": {}
    },
    "glXGetFBConfigAttrib": {
        "signature": "int glXGetFBConfigAttrib(Display * dpy, GLXFBConfig config, int attribute, int * value)",
        "purpose": "return information about a GLX frame buffer configuration",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies the GLX frame buffer configuration to be queried. </para> </listitem>",
            "attribute": "<listitem> <para> Specifies the attribute to be returned. </para> </listitem>",
            "value": "<listitem> <para> Returns the requested value. </para> </listitem>"
        }
    },
    "glXGetFBConfigs": {
        "signature": "GLXFBConfig * glXGetFBConfigs(Display * dpy, int screen, int * nelements)",
        "purpose": "list all GLX frame buffer configurations for a given screen",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "screen": "<listitem> <para> Specifies the screen number. </para> </listitem>",
            "nelements": "<listitem> <para> Returns the number of GLXFBConfigs returned. </para> </listitem>"
        }
    },
    "glXGetProcAddress": {
        "signature": "void(*)() glXGetProcAddress(const GLubyte * procName)",
        "purpose": "obtain a pointer to an OpenGL or GLX function",
        "parameters": {
            "procName": "<listitem> <para> Specifies the name of the OpenGL or GLX function whose address is to be returned. </para> </listitem>"
        }
    },
    "glXGetSelectedEvent": {
        "signature": "void glXGetSelectedEvent(Display * dpy, GLXDrawable draw, unsigned long * event_mask)",
        "purpose": "returns GLX events that are selected for a window or a GLX pixel buffer",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "draw": "<listitem> <para> Specifies a GLX drawable. Must be a GLX pixel buffer or a window. </para> </listitem>",
            "event_mask": "<listitem> <para> Returns the events that are selected for <parameter>draw</parameter>. </para> </listitem>"
        }
    },
    "glXGetVisualFromFBConfig": {
        "signature": "XVisualInfo * glXGetVisualFromFBConfig(Display * dpy, GLXFBConfig config)",
        "purpose": "return visual that is associated with the frame buffer configuration",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "config": "<listitem> <para> Specifies the GLX frame buffer configuration. </para> </listitem>"
        }
    },
    "glXImportContextEXT": {
        "signature": "GLXContext glXImportContextEXT(Display * dpy, GLXContextID contextID)",
        "purpose": "import another process's indirect rendering context.",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "contextID": "<listitem> <para> Specifies a GLX rendering context. </para> </listitem>"
        }
    },
    "glXIsDirect": {
        "signature": "Bool glXIsDirect(Display * dpy, GLXContext ctx)",
        "purpose": "indicate whether direct rendering is enabled",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies the GLX context that is being queried. </para> </listitem>"
        }
    },
    "glXMakeContextCurrent": {
        "signature": "Bool glXMakeContextCurrent(Display * display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)",
        "purpose": "attach a GLX context to a GLX drawable",
        "parameters": {
            "display": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "draw": "<listitem> <para> Specifies a GLX drawable to render into. Must be an XID representing a GLXWindow, GLXPixmap, or GLXPbuffer. </para> </listitem>",
            "read": "<listitem> <para> Specifies a GLX drawable to read from. Must be an XID representing a GLXWindow, GLXPixmap, or GLXPbuffer. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies the GLX context to be bound to <parameter>read</parameter> and <parameter>ctx</parameter>. </para> </listitem>"
        }
    },
    "glXMakeCurrent": {
        "signature": "Bool glXMakeCurrent(Display * dpy, GLXDrawable drawable, GLXContext ctx)",
        "purpose": "attach a GLX context to a window or a GLX pixmap",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "drawable": "<listitem> <para> Specifies a GLX drawable. Must be either an X window ID or a GLX pixmap ID. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies a GLX rendering context that is to be attached to <parameter>drawable</parameter>. </para> </listitem>"
        }
    },
    "glXQueryContext": {
        "signature": "int glXQueryContext(Display * dpy, GLXContext ctx, int attribute, int * value)",
        "purpose": "query context information",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies a GLX rendering context. </para> </listitem>",
            "attribute": "<listitem> <para> Specifies that a context parameter should be retrieved. Must be one of <span style=\"color:blue\">GLX_FBCONFIG_ID</span>, <span style=\"color:blue\">GLX_RENDER_TYPE</span>, or <span style=\"color:blue\">GLX_SCREEN</span>. </para> </listitem>",
            "value": "<listitem> <para> Contains the return value for <parameter>attribute</parameter>. </para> </listitem>"
        }
    },
    "glXQueryContextInfoEXT": {
        "signature": "int glXQueryContextInfoEXT(Display * dpy, GLXContext ctx, int attribute, int * value)",
        "purpose": "query context information",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "ctx": "<listitem> <para> Specifies a GLX rendering context. </para> </listitem>",
            "attribute": "<listitem> <para> Specifies that a context parameter should be retrieved. Must be one of <span style=\"color:blue\">GLX_SHARED_CONTEXT_EXT</span>, <span style=\"color:blue\">GLX_VISUAL_ID_EXT</span>, or <span style=\"color:blue\">GLX_SCREEN_EXT</span>. </para> </listitem>",
            "value": "<listitem> <para> Contains the return value for <parameter>attribute</parameter>. </para> </listitem>"
        }
    },
    "glXQueryDrawable": {
        "signature": "int glXQueryDrawable(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value)",
        "purpose": "returns an attribute associated with a GLX drawable",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "draw": "<listitem> <para> Specifies the GLX drawable to be queried. </para> </listitem>",
            "attribute": "<listitem> <para> Specifies the attribute to be returned. Must be one of <span style=\"color:blue\">GLX_WIDTH</span>, <span style=\"color:blue\">GLX_HEIGHT</span>, <span style=\"color:blue\">GLX_PRESERVED_CONTENTS</span>, <span style=\"color:blue\">GLX_LARGEST_PBUFFER</span>, or <span style=\"color:blue\">GLX_FBCONFIG_ID</span>. </para> </listitem>",
            "value": "<listitem> <para> Contains the return value for <parameter>attribute</parameter>. </para> </listitem>"
        }
    },
    "glXQueryExtension": {
        "signature": "Bool glXQueryExtension(Display * dpy, int * errorBase, int * eventBase)",
        "purpose": "indicate whether the GLX extension is supported",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "errorBase": "<listitem> <para> Returns the base error code of the GLX server extension. </para> </listitem>",
            "eventBase": "<listitem> <para> Returns the base event code of the GLX server extension. </para> </listitem>"
        }
    },
    "glXQueryExtensionsString": {
        "signature": "const char * glXQueryExtensionsString(Display * dpy, int screen)",
        "purpose": "return list of supported extensions",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "screen": "<listitem> <para> Specifies the screen number. </para> </listitem>"
        }
    },
    "glXQueryServerString": {
        "signature": "const char * glXQueryServerString(Display * dpy, int screen, int name)",
        "purpose": "return string describing the server",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "screen": "<listitem> <para> Specifies the screen number. </para> </listitem>",
            "name": "<listitem> <para> Specifies which string is returned: one of <span style=\"color:blue\">GLX_VENDOR</span>, <span style=\"color:blue\">GLX_VERSION</span>, or <span style=\"color:blue\">GLX_EXTENSIONS</span>. </para> </listitem>"
        }
    },
    "glXQueryVersion": {
        "signature": "Bool glXQueryVersion(Display * dpy, int * major, int * minor)",
        "purpose": "return the version numbers of the GLX extension",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "major": "<listitem> <para> Returns the major version number of the GLX server extension. </para> </listitem>",
            "minor": "<listitem> <para> Returns the minor version number of the GLX server extension. </para> </listitem>"
        }
    },
    "glXSelectEvent": {
        "signature": "void glXSelectEvent(Display * dpy, GLXDrawable draw, unsigned long event_mask)",
        "purpose": "select GLX events for a window or a GLX pixel buffer",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "draw": "<listitem> <para> Specifies a GLX drawable. Must be a GLX pixel buffer or a window. </para> </listitem>",
            "event_mask": "<listitem> <para> Specifies the events to be returned for <parameter>draw</parameter>. </para> </listitem>"
        }
    },
    "glXSwapBuffers": {
        "signature": "void glXSwapBuffers(Display * dpy, GLXDrawable drawable)",
        "purpose": "exchange front and back buffers",
        "parameters": {
            "dpy": "<listitem> <para> Specifies the connection to the X server. </para> </listitem>",
            "drawable": "<listitem> <para> Specifies the drawable whose buffers are to be swapped. </para> </listitem>"
        }
    },
    "glXUseXFont": {
        "signature": "void glXUseXFont(Font font, int first, int count, int listBase)",
        "purpose": "create bitmap display lists from an X font",
        "parameters": {
            "font": "<listitem> <para> Specifies the font from which character glyphs are to be taken. </para> </listitem>",
            "first": "<listitem> <para> Specifies the index of the first glyph to be taken. </para> </listitem>",
            "count": "<listitem> <para> Specifies the number of glyphs to be taken. </para> </listitem>",
            "listBase": "<listitem> <para> Specifies the index of the first display list to be generated. </para> </listitem>"
        }
    },
    "glXWaitGL": {
        "signature": "void glXWaitGL(void)",
        "purpose": "complete GL execution prior to subsequent X calls",
        "parameters": {}
    },
    "glXWaitX": {
        "signature": "void glXWaitX(void)",
        "purpose": "complete X execution prior to subsequent GL calls",
        "parameters": {}
    }
}_10_10_REV</constant>.\n                </para>\n            </listitem>\n        ",
            "level": "<listitem>\n                <para>\n                    Specifies the mipmap level of the image data.\n                </para>\n            </listitem>\n        ",
            "base": "<listitem>\n                <para>\n                    Specifies the minimum mipmap level to pass to <citerefentry><refentrytitle>glTexImage1D</refentrytitle></citerefentry>.\n                </para>\n            </listitem>\n        ",
            "max": "<listitem>\n                <para>\n                    Specifies the maximum mipmap level to pass to <citerefentry><refentrytitle>glTexImage1D</refentrytitle></citerefentry>.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies a pointer to the image data in memory.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluBuild1DMipmaps": {
        "signature": "GLint gluBuild1DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, const void * data)",
        "purpose": "builds a one-dimensional mipmap",
        "parameters": {
            "target": "<listitem>\n                <para>\n                    Specifies the target texture.  Must be <constant>GLU_TEXTURE_1D</constant>.\n                </para>\n            </listitem>\n        ",
            "internalFormat": "<listitem>\n                <para>\n                    Requests the internal storage format of the texture image.  The most\n                    current version of the SGI implementation of GLU does not check this\n                    value for validity before passing it on to the underlying OpenGL\n                    implementation.  A value that is not accepted by the OpenGL\n                    implementation will lead to an OpenGL error.  The benefit of not\n                    checking this value at the GLU level is that OpenGL extensions can add\n                    new internal texture formats without requiring a revision of the GLU\n                    implementation.  Older implementations of GLU check this value and\n                    raise a GLU error if it is not 1, 2, 3, or 4 or one of the following\n                    symbolic constants:\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_ALPHA4</constant>,\n                    <constant>GLU_ALPHA8</constant>,\n                    <constant>GLU_ALPHA12</constant>,\n                    <constant>GLU_ALPHA16</constant>,\n                    <constant>GLU_LUMINANCE</constant>,\n                    <constant>GLU_LUMINANCE4</constant>,\n                    <constant>GLU_LUMINANCE8</constant>,\n                    <constant>GLU_LUMINANCE12</constant>,\n                    <constant>GLU_LUMINANCE16</constant>,\n                    <constant>GLU_LUMINANCE_ALPHA</constant>,\n                    <constant>GLU_LUMINANCE4_ALPHA4</constant>,\n                    <constant>GLU_LUMINANCE6_ALPHA2</constant>,\n                    <constant>GLU_LUMINANCE8_ALPHA8</constant>,\n                    <constant>GLU_LUMINANCE12_ALPHA4</constant>,\n                    <constant>GLU_LUMINANCE12_ALPHA12</constant>,\n                    <constant>GLU_LUMINANCE16_ALPHA16</constant>,\n                    <constant>GLU_INTENSITY</constant>,\n                    <constant>GLU_INTENSITY4</constant>,\n                    <constant>GLU_INTENSITY8</constant>,\n                    <constant>GLU_INTENSITY12</constant>,\n                    <constant>GLU_INTENSITY16</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_R3_G3_B2</constant>,\n                    <constant>GLU_RGB4</constant>,\n                    <constant>GLU_RGB5</constant>,\n                    <constant>GLU_RGB8</constant>,\n                    <constant>GLU_RGB10</constant>,\n                    <constant>GLU_RGB12</constant>,\n                    <constant>GLU_RGB16</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_RGBA2</constant>,\n                    <constant>GLU_RGBA4</constant>,\n                    <constant>GLU_RGB5_A1</constant>,\n                    <constant>GLU_RGBA8</constant>,\n                    <constant>GLU_RGB10_A2</constant>,\n                    <constant>GLU_RGBA12</constant>, or\n                    <constant>GLU_RGBA16</constant>.\n                </para>\n            </listitem>\n        ",
            "width": "<listitem>\n                <para>\n                    Specifies the width, in pixels, of the texture image. \n                </para>\n            </listitem>\n        ",
            "format": "<listitem>\n                <para>\n                    Specifies the format of the pixel data.\n                    Must be one of\n                    <constant>GLU_COLOR_INDEX</constant>,\n                    <constant>GLU_DEPTH_COMPONENT</constant>,\n                    <constant>GLU_RED</constant>,\n                    <constant>GLU_GREEN</constant>,\n                    <constant>GLU_BLUE</constant>,\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_BGR</constant>,\n                    <constant>GLU_BGRA</constant>,\n                    <constant>GLU_LUMINANCE</constant>, or\n                    <constant>GLU_LUMINANCE_ALPHA</constant>.\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies the data type for <parameter>data</parameter>.\n                    Must be one of\n                    <constant>GLU_UNSIGNED_BYTE</constant>,\n                    <constant>GLU_BYTE</constant>,\n                    <constant>GLU_BITMAP</constant>,\n                    <constant>GLU_UNSIGNED_SHORT</constant>,\n                    <constant>GLU_SHORT</constant>,\n                    <constant>GLU_UNSIGNED_INT</constant>,\n                    <constant>GLU_INT</constant>, \n                    <constant>GLU_FLOAT</constant>, \n                    <constant>GLU_UNSIGNED_BYTE_3_3_2</constant>,\n                    <constant>GLU_UNSIGNED_BYTE_2_3_3_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_5_5_1</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_1_5_5_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_10_10_10_2</constant>, or\n                    <constant>GLU_UNSIGNED_INT_2_10_10_10_REV</constant>.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies a pointer to the image data in memory.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluBuild2DMipmapLevels": {
        "signature": "GLint gluBuild2DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void * data)",
        "purpose": "builds a subset of two-dimensional mipmap levels",
        "parameters": {
            "target": "<listitem>\n                <para>\n                    Specifies the target texture.  Must be <constant>GLU_TEXTURE_2D</constant>.\n                </para>\n            </listitem>\n        ",
            "internalFormat": "<listitem>\n                <para>\n                    Requests the internal storage format of the texture image.  The most\n                    current version of the SGI implementation of GLU does not check this\n                    value for validity before passing it on to the underlying OpenGL\n                    implementation.  A value that is not accepted by the OpenGL\n                    implementation will lead to an OpenGL error.  The benefit of not\n                    checking this value at the GLU level is that OpenGL extensions can add\n                    new internal texture formats without requiring a revision of the GLU\n                    implementation.  Older implementations of GLU check this value and\n                    raise a GLU error if it is not 1, 2, 3, or 4 or one of the following\n                    symbolic constants:\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_ALPHA4</constant>,\n                    <constant>GLU_ALPHA8</constant>,\n                    <constant>GLU_ALPHA12</constant>,\n                    <constant>GLU_ALPHA16</constant>,\n                    <constant>GLU_LUMINANCE</constant>,\n                    <constant>GLU_LUMINANCE4</constant>,\n                    <constant>GLU_LUMINANCE8</constant>,\n                    <constant>GLU_LUMINANCE12</constant>,\n                    <constant>GLU_LUMINANCE16</constant>,\n                    <constant>GLU_LUMINANCE_ALPHA</constant>,\n                    <constant>GLU_LUMINANCE4_ALPHA4</constant>,\n                    <constant>GLU_LUMINANCE6_ALPHA2</constant>,\n                    <constant>GLU_LUMINANCE8_ALPHA8</constant>,\n                    <constant>GLU_LUMINANCE12_ALPHA4</constant>,\n                    <constant>GLU_LUMINANCE12_ALPHA12</constant>,\n                    <constant>GLU_LUMINANCE16_ALPHA16</constant>,\n                    <constant>GLU_INTENSITY</constant>,\n                    <constant>GLU_INTENSITY4</constant>,\n                    <constant>GLU_INTENSITY8</constant>,\n                    <constant>GLU_INTENSITY12</constant>,\n                    <constant>GLU_INTENSITY16</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_R3_G3_B2</constant>,\n                    <constant>GLU_RGB4</constant>,\n                    <constant>GLU_RGB5</constant>,\n                    <constant>GLU_RGB8</constant>,\n                    <constant>GLU_RGB10</constant>,\n                    <constant>GLU_RGB12</constant>,\n                    <constant>GLU_RGB16</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_RGBA2</constant>,\n                    <constant>GLU_RGBA4</constant>,\n                    <constant>GLU_RGB5_A1</constant>,\n                    <constant>GLU_RGBA8</constant>,\n                    <constant>GLU_RGB10_A2</constant>,\n                    <constant>GLU_RGBA12</constant>, or\n                    <constant>GLU_RGBA16</constant>.\n                </para>\n            </listitem>\n        ",
            "width": "<listitem>\n                <para>\n                    Specifies the width and height, respectively, in pixels of the texture image. \n                    These should be a power of 2.\n                </para>\n            </listitem>\n        ",
            "format": "<listitem>\n                <para>\n                    Specifies the format of the pixel data.\n                    Must be one of\n                    <constant>GLU_COLOR_INDEX</constant>,\n                    <constant>GLU_DEPTH_COMPONENT</constant>,\n                    <constant>GLU_RED</constant>,\n                    <constant>GLU_GREEN</constant>,\n                    <constant>GLU_BLUE</constant>,\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_BGR</constant>,\n                    <constant>GLU_BGRA</constant>,\n                    <constant>GLU_LUMINANCE</constant>, or\n                    <constant>GLU_LUMINANCE_ALPHA</constant>.\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies the data type for <parameter>data</parameter>.\n                    Must be one of\n                    <constant>GLU_UNSIGNED_BYTE</constant>,\n                    <constant>GLU_BYTE</constant>,\n                    <constant>GLU_BITMAP</constant>,\n                    <constant>GLU_UNSIGNED_SHORT</constant>,\n                    <constant>GLU_SHORT</constant>,\n                    <constant>GLU_UNSIGNED_INT</constant>,\n                    <constant>GLU_INT</constant>, \n                    <constant>GLU_FLOAT</constant>, \n                    <constant>GLU_UNSIGNED_BYTE_3_3_2</constant>,\n                    <constant>GLU_UNSIGNED_BYTE_2_3_3_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_5_5_1</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_1_5_5_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_10_10_10_2</constant>, or\n                    <constant>GLU_UNSIGNED_INT_2_10_10_10_REV</constant>.\n                </para>\n            </listitem>\n        ",
            "level": "<listitem>\n                <para>\n                    Specifies the mipmap level of the image data.\n                </para>\n            </listitem>\n        ",
            "base": "<listitem>\n                <para>\n                    Specifies the minimum mipmap level to pass to <citerefentry><refentrytitle>glTexImage2D</refentrytitle></citerefentry>.\n                </para>\n            </listitem>\n        ",
            "max": "<listitem>\n                <para>\n                    Specifies the maximum mipmap level to pass to <citerefentry><refentrytitle>glTexImage2D</refentrytitle></citerefentry>.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies a pointer to the image data in memory.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluBuild2DMipmaps": {
        "signature": "GLint gluBuild2DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * data)",
        "purpose": "builds a two-dimensional mipmap",
        "parameters": {
            "target": "<listitem>\n                <para>\n                    Specifies the target texture.  Must be <constant>GLU_TEXTURE_2D</constant>.\n                </para>\n            </listitem>\n        ",
            "internalFormat": "<listitem>\n                <para>\n                    Requests the internal storage format of the texture image.  The most\n                    current version of the SGI implementation of GLU does not check this\n                    value for validity before passing it on to the underlying OpenGL\n                    implementation.  A value that is not accepted by the OpenGL\n                    implementation will lead to an OpenGL error.  The benefit of not\n                    checking this value at the GLU level is that OpenGL extensions can add\n                    new internal texture formats without requiring a revision of the GLU\n                    implementation.  Older implementations of GLU check this value and\n                    raise a GLU error if it is not 1, 2, 3, or 4 or one of the following\n                    symbolic constants:\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_ALPHA4</constant>,\n                    <constant>GLU_ALPHA8</constant>,\n                    <constant>GLU_ALPHA12</constant>,\n                    <constant>GLU_ALPHA16</constant>,\n                    <constant>GLU_LUMINANCE</constant>,\n                    <constant>GLU_LUMINANCE4</constant>,\n                    <constant>GLU_LUMINANCE8</constant>,\n                    <constant>GLU_LUMINANCE12</constant>,\n                    <constant>GLU_LUMINANCE16</constant>,\n                    <constant>GLU_LUMINANCE_ALPHA</constant>,\n                    <constant>GLU_LUMINANCE4_ALPHA4</constant>,\n                    <constant>GLU_LUMINANCE6_ALPHA2</constant>,\n                    <constant>GLU_LUMINANCE8_ALPHA8</constant>,\n                    <constant>GLU_LUMINANCE12_ALPHA4</constant>,\n                    <constant>GLU_LUMINANCE12_ALPHA12</constant>,\n                    <constant>GLU_LUMINANCE16_ALPHA16</constant>,\n                    <constant>GLU_INTENSITY</constant>,\n                    <constant>GLU_INTENSITY4</constant>,\n                    <constant>GLU_INTENSITY8</constant>,\n                    <constant>GLU_INTENSITY12</constant>,\n                    <constant>GLU_INTENSITY16</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_R3_G3_B2</constant>,\n                    <constant>GLU_RGB4</constant>,\n                    <constant>GLU_RGB5</constant>,\n                    <constant>GLU_RGB8</constant>,\n                    <constant>GLU_RGB10</constant>,\n                    <constant>GLU_RGB12</constant>,\n                    <constant>GLU_RGB16</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_RGBA2</constant>,\n                    <constant>GLU_RGBA4</constant>,\n                    <constant>GLU_RGB5_A1</constant>,\n                    <constant>GLU_RGBA8</constant>,\n                    <constant>GLU_RGB10_A2</constant>,\n                    <constant>GLU_RGBA12</constant>, or\n                    <constant>GLU_RGBA16</constant>.\n                </para>\n            </listitem>\n        ",
            "width": "<listitem>\n                <para>\n                    Specifies in pixels the width and height, respectively, of the texture image. \n                </para>\n            </listitem>\n        ",
            "format": "<listitem>\n                <para>\n                    Specifies the format of the pixel data.\n                    Must be one of\n                    <constant>GLU_COLOR_INDEX</constant>,\n                    <constant>GLU_DEPTH_COMPONENT</constant>,\n                    <constant>GLU_RED</constant>,\n                    <constant>GLU_GREEN</constant>,\n                    <constant>GLU_BLUE</constant>,\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_BGR</constant>,\n                    <constant>GLU_BGRA</constant>,\n                    <constant>GLU_LUMINANCE</constant>, or\n                    <constant>GLU_LUMINANCE_ALPHA</constant>.\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies the data type for <parameter>data</parameter>.\n                    Must be one of\n                    <constant>GLU_UNSIGNED_BYTE</constant>,\n                    <constant>GLU_BYTE</constant>,\n                    <constant>GLU_BITMAP</constant>,\n                    <constant>GLU_UNSIGNED_SHORT</constant>,\n                    <constant>GLU_SHORT</constant>,\n                    <constant>GLU_UNSIGNED_INT</constant>,\n                    <constant>GLU_INT</constant>, \n                    <constant>GLU_FLOAT</constant>, \n                    <constant>GLU_UNSIGNED_BYTE_3_3_2</constant>,\n                    <constant>GLU_UNSIGNED_BYTE_2_3_3_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_5_5_1</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_1_5_5_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_10_10_10_2</constant>, or\n                    <constant>GLU_UNSIGNED_INT_2_10_10_10_REV</constant>.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies a pointer to the image data in memory.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluBuild3DMipmapLevels": {
        "signature": "GLint gluBuild3DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void * data)",
        "purpose": "builds a subset of three-dimensional mipmap levels",
        "parameters": {
            "target": "<listitem>\n                <para>\n                    Specifies the target texture.  Must be <constant>GLU_TEXTURE_3D</constant>.\n                </para>\n            </listitem>\n        ",
            "internalFormat": "<listitem>\n                <para>\n                    Requests the internal storage format of the texture image.  The most\n                    current version of the SGI implementation of GLU does not check this\n                    value for validity before passing it on to the underlying OpenGL\n                    implementation.  A value that is not accepted by the OpenGL\n                    implementation will lead to an OpenGL error.  The benefit of not\n                    checking this value at the GLU level is that OpenGL extensions can add\n                    new internal texture formats without requiring a revision of the GLU\n                    implementation.  Older implementations of GLU check this value and\n                    raise a GLU error if it is not 1, 2, 3, or 4 or one of the following\n                    symbolic constants:\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_ALPHA4</constant>,\n                    <constant>GLU_ALPHA8</constant>,\n                    <constant>GLU_ALPHA12</constant>,\n                    <constant>GLU_ALPHA16</constant>,\n                    <constant>GLU_LUMINANCE</constant>,\n                    <constant>GLU_LUMINANCE4</constant>,\n                    <constant>GLU_LUMINANCE8</constant>,\n                    <constant>GLU_LUMINANCE12</constant>,\n                    <constant>GLU_LUMINANCE16</constant>,\n                    <constant>GLU_LUMINANCE_ALPHA</constant>,\n                    <constant>GLU_LUMINANCE4_ALPHA4</constant>,\n                    <constant>GLU_LUMINANCE6_ALPHA2</constant>,\n                    <constant>GLU_LUMINANCE8_ALPHA8</constant>,\n                    <constant>GLU_LUMINANCE12_ALPHA4</constant>,\n                    <constant>GLU_LUMINANCE12_ALPHA12</constant>,\n                    <constant>GLU_LUMINANCE16_ALPHA16</constant>,\n                    <constant>GLU_INTENSITY</constant>,\n                    <constant>GLU_INTENSITY4</constant>,\n                    <constant>GLU_INTENSITY8</constant>,\n                    <constant>GLU_INTENSITY12</constant>,\n                    <constant>GLU_INTENSITY16</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_R3_G3_B2</constant>,\n                    <constant>GLU_RGB4</constant>,\n                    <constant>GLU_RGB5</constant>,\n                    <constant>GLU_RGB8</constant>,\n                    <constant>GLU_RGB10</constant>,\n                    <constant>GLU_RGB12</constant>,\n                    <constant>GLU_RGB16</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_RGBA2</constant>,\n                    <constant>GLU_RGBA4</constant>,\n                    <constant>GLU_RGB5_A1</constant>,\n                    <constant>GLU_RGBA8</constant>,\n                    <constant>GLU_RGB10_A2</constant>,\n                    <constant>GLU_RGBA12</constant>, or\n                    <constant>GLU_RGBA16</constant>.\n                </para>\n            </listitem>\n        ",
            "width": "<listitem>\n                <para>\n                    Specifies in pixels the width, height and depth respectively, of the texture\n                    image. These should be a power of 2.\n                </para>\n            </listitem>\n        ",
            "format": "<listitem>\n                <para>\n                    Specifies the format of the pixel data.\n                    Must be one of\n                    <constant>GLU_COLOR_INDEX</constant>,\n                    <constant>GLU_DEPTH_COMPONENT</constant>,\n                    <constant>GLU_RED</constant>,\n                    <constant>GLU_GREEN</constant>,\n                    <constant>GLU_BLUE</constant>,\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_BGR</constant>,\n                    <constant>GLU_BGRA</constant>,\n                    <constant>GLU_LUMINANCE</constant>, or\n                    <constant>GLU_LUMINANCE_ALPHA</constant>.\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies the data type for <parameter>data</parameter>.\n                    Must be one of\n                    <constant>GLU_UNSIGNED_BYTE</constant>,\n                    <constant>GLU_BYTE</constant>,\n                    <constant>GLU_BITMAP</constant>,\n                    <constant>GLU_UNSIGNED_SHORT</constant>,\n                    <constant>GLU_SHORT</constant>,\n                    <constant>GLU_UNSIGNED_INT</constant>,\n                    <constant>GLU_INT</constant>, \n                    <constant>GLU_FLOAT</constant>, \n                    <constant>GLU_UNSIGNED_BYTE_3_3_2</constant>,\n                    <constant>GLU_UNSIGNED_BYTE_2_3_3_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_5_5_1</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_1_5_5_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_10_10_10_2</constant>, or\n                    <constant>GLU_UNSIGNED_INT_2_10_10_10_REV</constant>.\n                </para>\n            </listitem>\n        ",
            "level": "<listitem>\n                <para>\n                    Specifies the mipmap level of the image data.\n                </para>\n            </listitem>\n        ",
            "base": "<listitem>\n                <para>\n                    Specifies the minimum mipmap level to pass to <citerefentry><refentrytitle>glTexImage3D</refentrytitle></citerefentry>.\n                </para>\n            </listitem>\n        ",
            "max": "<listitem>\n                <para>\n                    Specifies the maximum mipmap level to pass to <citerefentry><refentrytitle>glTexImage3D</refentrytitle></citerefentry>.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies a pointer to the image data in memory.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluBuild3DMipmaps": {
        "signature": "GLint gluBuild3DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data)",
        "purpose": "builds a three-dimensional mipmap",
        "parameters": {
            "target": "<listitem>\n                <para>\n                    Specifies the target texture.  Must be <constant>GLU_TEXTURE_3D</constant>.\n                </para>\n            </listitem>\n        ",
            "internalFormat": "<listitem>\n                <para>\n                    Requests the internal storage format of the texture image.  The most\n                    current version of the SGI implementation of GLU does not check this\n                    value for validity before passing it on to the underlying OpenGL\n                    implementation.  A value that is not accepted by the OpenGL\n                    implementation will lead to an OpenGL error.  The benefit of not\n                    checking this value at the GLU level is that OpenGL extensions can add\n                    new internal texture formats without requiring a revision of the GLU\n                    implementation.  Older implementations of GLU check this value and\n                    raise a GLU error if it is not 1, 2, 3, or 4 or one of the following\n                    symbolic constants:\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_ALPHA4</constant>,\n                    <constant>GLU_ALPHA8</constant>,\n                    <constant>GLU_ALPHA12</constant>,\n                    <constant>GLU_ALPHA16</constant>,\n                    <constant>GLU_LUMINANCE</constant>,\n                    <constant>GLU_LUMINANCE4</constant>,\n                    <constant>GLU_LUMINANCE8</constant>,\n                    <constant>GLU_LUMINANCE12</constant>,\n                    <constant>GLU_LUMINANCE16</constant>,\n                    <constant>GLU_LUMINANCE_ALPHA</constant>,\n                    <constant>GLU_LUMINANCE4_ALPHA4</constant>,\n                    <constant>GLU_LUMINANCE6_ALPHA2</constant>,\n                    <constant>GLU_LUMINANCE8_ALPHA8</constant>,\n                    <constant>GLU_LUMINANCE12_ALPHA4</constant>,\n                    <constant>GLU_LUMINANCE12_ALPHA12</constant>,\n                    <constant>GLU_LUMINANCE16_ALPHA16</constant>,\n                    <constant>GLU_INTENSITY</constant>,\n                    <constant>GLU_INTENSITY4</constant>,\n                    <constant>GLU_INTENSITY8</constant>,\n                    <constant>GLU_INTENSITY12</constant>,\n                    <constant>GLU_INTENSITY16</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_R3_G3_B2</constant>,\n                    <constant>GLU_RGB4</constant>,\n                    <constant>GLU_RGB5</constant>,\n                    <constant>GLU_RGB8</constant>,\n                    <constant>GLU_RGB10</constant>,\n                    <constant>GLU_RGB12</constant>,\n                    <constant>GLU_RGB16</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_RGBA2</constant>,\n                    <constant>GLU_RGBA4</constant>,\n                    <constant>GLU_RGB5_A1</constant>,\n                    <constant>GLU_RGBA8</constant>,\n                    <constant>GLU_RGB10_A2</constant>,\n                    <constant>GLU_RGBA12</constant>, or\n                    <constant>GLU_RGBA16</constant>.\n                </para>\n            </listitem>\n        ",
            "width": "<listitem>\n                <para>\n                    Specifies in pixels the width, height and depth respectively, in pixels\n                    of the texture image. \n                </para>\n            </listitem>\n        ",
            "format": "<listitem>\n                <para>\n                    Specifies the format of the pixel data.\n                    Must be one of\n                    <constant>GLU_COLOR_INDEX</constant>,\n                    <constant>GLU_DEPTH_COMPONENT</constant>,\n                    <constant>GLU_RED</constant>,\n                    <constant>GLU_GREEN</constant>,\n                    <constant>GLU_BLUE</constant>,\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_BGR</constant>,\n                    <constant>GLU_BGRA</constant>,\n                    <constant>GLU_LUMINANCE</constant>, or\n                    <constant>GLU_LUMINANCE_ALPHA</constant>.\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies the data type for <parameter>data</parameter>.\n                    Must be one of:\n                    <constant>GLU_UNSIGNED_BYTE</constant>,\n                    <constant>GLU_BYTE</constant>,\n                    <constant>GLU_BITMAP</constant>,\n                    <constant>GLU_UNSIGNED_SHORT</constant>,\n                    <constant>GLU_SHORT</constant>,\n                    <constant>GLU_UNSIGNED_INT</constant>,\n                    <constant>GLU_INT</constant>, \n                    <constant>GLU_FLOAT</constant>, \n                    <constant>GLU_UNSIGNED_BYTE_3_3_2</constant>,\n                    <constant>GLU_UNSIGNED_BYTE_2_3_3_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_5_5_1</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_1_5_5_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_10_10_10_2</constant>, or\n                    <constant>GLU_UNSIGNED_INT_2_10_10_10_REV</constant>.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies a pointer to the image data in memory.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluCheckExtension": {
        "signature": "GLboolean gluCheckExtension(const GLubyte * extName, const GLubyte * extString)",
        "purpose": "determines if an extension name is supported",
        "parameters": {
            "extName": "<listitem>\n                <para>\n                    Specifies an extension name.\n                </para>\n            </listitem>\n        ",
            "extString": "<listitem>\n                <para>\n                    Specifies a space-separated list of extension names supported. \n                </para>\n            </listitem>\n        "
        }
    },
    "gluCylinder": {
        "signature": "void gluCylinder(GLUquadric* quad, GLdouble base, GLdouble top, GLdouble height, GLint slices, GLint stacks)",
        "purpose": "draw a cylinder",
        "parameters": {
            "quad": "<listitem>\n                <para>\n                    Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "base": "<listitem>\n                <para>\n                    Specifies the radius of the cylinder at <emphasis>z</emphasis> = 0.\n                </para>\n            </listitem>\n        ",
            "top": "<listitem>\n                <para>\n                    Specifies the radius of the cylinder at <emphasis>z</emphasis> = <parameter>height</parameter>.\n                </para>\n            </listitem>\n        ",
            "height": "<listitem>\n                <para>\n                    Specifies the height of the cylinder.\n                </para>\n            </listitem>\n        ",
            "slices": "<listitem>\n                <para>\n                    Specifies the number of subdivisions around the <emphasis>z</emphasis> axis.\n                </para>\n            </listitem>\n        ",
            "stacks": "<listitem>\n                <para>\n                    Specifies the number of subdivisions along the <emphasis>z</emphasis> axis.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluDeleteNurbsRenderer": {
        "signature": "void gluDeleteNurbsRenderer(GLUnurbs* nurb)",
        "purpose": "destroy a NURBS object",
        "parameters": {
            "nurb": "<listitem>\n                <para>\n                    Specifies the NURBS object to be destroyed.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluDeleteQuadric": {
        "signature": "void gluDeleteQuadric(GLUquadric* quad)",
        "purpose": "destroy a quadrics object",
        "parameters": {
            "quad": "<listitem>\n                <para>\n                    Specifies the quadrics object to be destroyed.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluDeleteTess": {
        "signature": "void gluDeleteTess(GLUtesselator* tess)",
        "purpose": "destroy a tessellation object",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object to destroy.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluDisk": {
        "signature": "void gluDisk(GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops)",
        "purpose": "draw a disk",
        "parameters": {
            "quad": "<listitem>\n                <para>\n                    Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "inner": "<listitem>\n                <para>\n                    Specifies the inner radius of the disk (may be 0).\n                </para>\n            </listitem>\n        ",
            "outer": "<listitem>\n                <para>\n                    Specifies the outer radius of the disk.\n                </para>\n            </listitem>\n        ",
            "slices": "<listitem>\n                <para>\n                    Specifies the number of subdivisions around the <emphasis>z</emphasis> axis.\n                </para>\n            </listitem>\n        ",
            "loops": "<listitem>\n                <para>\n                    Specifies the number of concentric rings about the origin into which\n                    the disk is subdivided.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluErrorString": {
        "signature": "const GLubyte * gluErrorString(GLenum error)",
        "purpose": "produce an error string from a GL or GLU error code",
        "parameters": {
            "error": "<listitem>\n                <para>\n                    Specifies a GL or GLU error code.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluGetNurbsProperty": {
        "signature": "void gluGetNurbsProperty(GLUnurbs* nurb, GLenum property, GLfloat* data)",
        "purpose": "get a NURBS property",
        "parameters": {
            "nurb": "<listitem>\n                <para>\n                    Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "property": "<listitem>\n                <para>\n                    Specifies the property whose value is to be fetched. Valid values are\n                    <constant>GLU_CULLING</constant>,\n                    <constant>GLU_SAMPLING_TOLERANCE</constant>,\n                    <constant>GLU_DISPLAY_MODE</constant>, \n                    <constant>GLU_AUTO_LOAD_MATRIX</constant>,\n                    <constant>GLU_PARAMETRIC_TOLERANCE</constant>,\n                    <constant>GLU_SAMPLING_METHOD</constant>,\n                    <constant>GLU_U_STEP</constant>,\n                    <constant>GLU_V_STEP</constant>, and\n                    <constant>GLU_NURBS_MODE</constant>.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies a pointer to the location into which the value of the \n                    named property is written.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluGetString": {
        "signature": "const GLubyte * gluGetString(GLenum name)",
        "purpose": "return a string describing the GLU version or GLU extensions ",
        "parameters": {
            "name": "<listitem>\n                <para>\n                    Specifies a symbolic constant, one of \n                    <constant>GLU_VERSION</constant>, or <constant>GLU_EXTENSIONS</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluGetTessProperty": {
        "signature": "void gluGetTessProperty(GLUtesselator* tess, GLenum which, GLdouble* data)",
        "purpose": "get a tessellation object property",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "which": "<listitem>\n                <para>\n                    Specifies the property whose value is to be fetched. Valid values are\n                    <constant>GLU_TESS_WINDING_RULE</constant>,\n                    <constant>GLU_TESS_BOUNDARY_ONLY</constant>, and\n                    <constant>GLU_TESS_TOLERANCE</constant>.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies a pointer to the location into which the value of the \n                    named property is written.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluLoadSamplingMatrices": {
        "signature": "void gluLoadSamplingMatrices(GLUnurbs* nurb, const GLfloat * model, const GLfloat * perspective, const GLint * view)",
        "purpose": "load NURBS sampling and culling matrices",
        "parameters": {
            "nurb": "<listitem>\n                <para>\n                    Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "model": "<listitem>\n                <para>\n                    Specifies a modelview matrix (as from a <citerefentry><refentrytitle>glGetFloatv</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "perspective": "<listitem>\n                <para>\n                    Specifies a projection matrix (as from a <citerefentry><refentrytitle>glGetFloatv</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "view": "<listitem>\n                <para>\n                    Specifies a viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        "
        }
    },
    "gluLookAt": {
        "signature": "void gluLookAt(GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ)",
        "purpose": "define a viewing transformation",
        "parameters": {
            "eyeX": "<listitem>\n                <para>\n                    Specifies the position of the eye point.\n                </para>\n            </listitem>\n        ",
            "centerX": "<listitem>\n                <para>\n                    Specifies the position of the reference point.\n                </para>\n            </listitem>\n        ",
            "upX": "<listitem>\n                <para>\n                    Specifies the direction of the <emphasis>up</emphasis> vector.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluNewNurbsRenderer": {
        "signature": "GLUnurbs* gluNewNurbsRenderer()",
        "purpose": "create a NURBS object",
        "parameters": {}
    },
    "gluNewQuadric": {
        "signature": "GLUquadric* gluNewQuadric()",
        "purpose": "create a quadrics object",
        "parameters": {}
    },
    "gluNewTess": {
        "signature": "GLUtesselator* gluNewTess()",
        "purpose": "create a tessellation object",
        "parameters": {}
    },
    "gluNextContour": {
        "signature": "void gluNextContour(GLUtesselator* tess, GLenum type)",
        "purpose": "mark the beginning of another contour",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies the type of the contour being defined. Valid values are\n                    <constant>GLU_EXTERIOR</constant>,\n                    <constant>GLU_INTERIOR</constant>,\n                    <constant>GLU_UNKNOWN</constant>,\n                    <constant>GLU_CCW</constant>, and\n                    <constant>GLU_CW</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glUniform1f": {
        "signature": "void glUniform1f(GLint location, GLfloat v0)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform2f": {
        "signature": "void glUniform2f(GLint location, GLfloat v0, GLfloat v1)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform3f": {
        "signature": "void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform4f": {
        "signature": "void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform1i": {
        "signature": "void glUniform1i(GLint location, GLint v0)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform2i": {
        "signature": "void glUniform2i(GLint location, GLint v0, GLint v1)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform3i": {
        "signature": "void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform4i": {
        "signature": "void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform1fv": {
        "signature": "void glUniform1fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform2fv": {
        "signature": "void glUniform2fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform3fv": {
        "signature": "void glUniform3fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform4fv": {
        "signature": "void glUniform4fv(GLint location, GLsizei count, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform1iv": {
        "signature": "void glUniform1iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform2iv": {
        "signature": "void glUniform2iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform3iv": {
        "signature": "void glUniform3iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniform4iv": {
        "signature": "void glUniform4iv(GLint location, GLsizei count, const GLint *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix2fv": {
        "signature": "void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix3fv": {
        "signature": "void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix4fv": {
        "signature": "void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix2x3fv": {
        "signature": "void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix3x2fv": {
        "signature": "void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix2x4fv": {
        "signature": "void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix4x2fv": {
        "signature": "void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix3x4fv": {
        "signature": "void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glUniformMatrix4x3fv": {
        "signature": "void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)",
        "purpose": "Specify the value of a uniform variable for the current program object",
        "parameters": {
            "location": "<listitem>\n\t\t    <para>Specifies the location of the uniform variable\n\t\t    to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified uniform variable.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "gluNurbsCallback": {
        "signature": "void gluNurbsCallback(GLUnurbs* nurb, GLenum which, _GLUfuncptr CallBackFunc)",
        "purpose": "define a callback for a NURBS object",
        "parameters": {
            "nurb": "<listitem>\n                <para>\n                    Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "which": "<listitem>\n                <para>\n                    Specifies the callback being defined. \n                    Valid values are <constant>GLU_NURBS_BEGIN</constant>, <constant>GLU_NURBS_VERTEX</constant>, <constant>GLU_NURBS_NORMAL</constant>, <constant>GLU_NURBS_COLOR</constant>, <constant>GLU_NURBS_TEXTURE_COORD</constant>, <constant>GLU_NURBS_END</constant>, <constant>GLU_NURBS_BEGIN_DATA</constant>, <constant>GLU_NURBS_VERTEX_DATA</constant>, <constant>GLU_NURBS_NORMAL_DATA</constant>, <constant>GLU_NURBS_COLOR_DATA</constant>, <constant>GLU_NURBS_TEXTURE_COORD_DATA</constant>, <constant>GLU_NURBS_END_DATA</constant>, and <constant>GLU_NURBS_ERROR</constant>.\n                </para>\n            </listitem>\n        ",
            "CallBackFunc": "<listitem>\n                <para>\n                    Specifies the function that the callback calls.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluNurbsCallbackData": {
        "signature": "void gluNurbsCallbackData(GLUnurbs* nurb, void* userData)",
        "purpose": "set a user data pointer",
        "parameters": {
            "nurb": "<listitem>\n                <para>\n                    Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "userData": "<listitem>\n                <para>\n                    Specifies a pointer to the user's data.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluNurbsCallbackDataEXT": {
        "signature": "void gluNurbsCallbackDataEXT(GLUnurbs* nurb, void* userData)",
        "purpose": "set a user data pointer",
        "parameters": {
            "nurb": "<listitem>\n                <para>\n                    Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "userData": "<listitem>\n                <para>\n                    Specifies a pointer to the user's data.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluNurbsCurve": {
        "signature": "void gluNurbsCurve(GLUnurbs* nurb, GLint knotCount, GLfloat * knots, GLint stride, GLfloat * control, GLint order, GLenum type)",
        "purpose": "define the shape of a NURBS curve",
        "parameters": {
            "nurb": "<listitem>\n                <para>\n                    Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "knotCount": "<listitem>\n                <para>\n                    Specifies the number of knots in <parameter>knots</parameter>.\n                    <parameter>knotCount</parameter> equals the number of control points plus the order.\n                </para>\n            </listitem>\n        ",
            "knots": "<listitem>\n                <para>\n                    Specifies an array of <parameter>knotCount</parameter> nondecreasing knot values.\n                </para>\n            </listitem>\n        ",
            "stride": "<listitem>\n                <para>\n                    Specifies the offset (as a number of single-precision floating-point values)\n                    between successive curve control points.\n                </para>\n            </listitem>\n        ",
            "control": "<listitem>\n                <para>\n                    Specifies a pointer to an array of control points. The coordinates must\n                    agree with <parameter>type</parameter>, specified below.\n                </para>\n            </listitem>\n        ",
            "order": "<listitem>\n                <para>\n                    Specifies the order of the NURBS curve. <parameter>order</parameter> equals degree + 1, hence\n                    a cubic curve has an order of 4.\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies the type of the curve. If this curve is defined within a \n                    <citerefentry><refentrytitle>gluBeginCurve</refentrytitle></citerefentry>/<citerefentry><refentrytitle>gluEndCurve</refentrytitle></citerefentry> pair, then \n                    the type can be any of the valid\n                    one-dimensional evaluator types (such as <constant>GLU_MAP1_VERTEX_3</constant> or \n                    <constant>GLU_MAP1_COLOR_4</constant>). Between a <citerefentry><refentrytitle>gluBeginTrim</refentrytitle></citerefentry>/<citerefentry><refentrytitle>gluEndTrim</refentrytitle></citerefentry> pair,\n                    the only valid types are <constant>GLU_MAP1_TRIM_2</constant> and <constant>GLU_MAP1_TRIM_3</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluNurbsProperty": {
        "signature": "void gluNurbsProperty(GLUnurbs* nurb, GLenum property, GLfloat value)",
        "purpose": "set a NURBS property",
        "parameters": {
            "nurb": "<listitem>\n                <para>\n                    Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "property": "<listitem>\n                <para>\n                    Specifies the property to be set. Valid values are\n                    <constant>GLU_SAMPLING_TOLERANCE</constant>,\n                    <constant>GLU_DISPLAY_MODE</constant>, \n                    <constant>GLU_CULLING</constant>,\n                    <constant>GLU_AUTO_LOAD_MATRIX</constant>,\n                    <constant>GLU_PARAMETRIC_TOLERANCE</constant>,\n                    <constant>GLU_SAMPLING_METHOD</constant>,\n                    <constant>GLU_U_STEP</constant>,\n                    <constant>GLU_V_STEP</constant>, or\n                    <constant>GLU_NURBS_MODE</constant>.\n                </para>\n            </listitem>\n        ",
            "value": "<listitem>\n                <para>\n                    Specifies the value of the indicated property.\n                    It may be a numeric value or one of \n                    <constant>GLU_OUTLINE_POLYGON</constant>,\n                    <constant>GLU_FILL</constant>,\n                    <constant>GLU_OUTLINE_PATCH</constant>,\n                    <constant>GLU_TRUE</constant>,\n                    <constant>GLU_FALSE</constant>,\n                    <constant>GLU_PATH_LENGTH</constant>,\n                    <constant>GLU_PARAMETRIC_ERROR</constant>,\n                    <constant>GLU_DOMAIN_DISTANCE</constant>,\n                    <constant>GLU_NURBS_RENDERER</constant>, or\n                    <constant>GLU_NURBS_TESSELLATOR</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluNurbsSurface": {
        "signature": "void gluNurbsSurface(GLUnurbs* nurb, GLint sKnotCount, GLfloat* sKnots, GLint tKnotCount, GLfloat* tKnots, GLint sStride, GLint tStride, GLfloat* control, GLint sOrder, GLint tOrder, GLenum type)",
        "purpose": "define the shape of a NURBS surface",
        "parameters": {
            "nurb": "<listitem>\n                <para>\n                    Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "sKnotCount": "<listitem>\n                <para>\n                    Specifies the number of knots in the parametric <emphasis>u</emphasis> direction.\n                </para>\n            </listitem>\n        ",
            "sKnots": "<listitem>\n                <para>\n                    Specifies an array of <parameter>sKnotCount</parameter> nondecreasing knot values in the parametric\n                    <emphasis>u</emphasis> direction.\n                </para>\n            </listitem>\n        ",
            "tKnotCount": "<listitem>\n                <para>\n                    Specifies the number of knots in the parametric <emphasis>v</emphasis> direction.\n                </para>\n            </listitem>\n        ",
            "tKnots": "<listitem>\n                <para>\n                    Specifies an array of <parameter>tKnotCount</parameter> nondecreasing knot values in the parametric\n                    <emphasis>v</emphasis> direction.\n                </para>\n            </listitem>\n        ",
            "sStride": "<listitem>\n                <para>\n                    Specifies the offset (as a number of single-precision floating-point values)\n                    between successive control points in the parametric <emphasis>u</emphasis> direction\n                    in <parameter>control</parameter>.\n                </para>\n            </listitem>\n        ",
            "tStride": "<listitem>\n                <para>\n                    Specifies the offset (in single-precision floating-point values)\n                    between successive control points in the parametric <emphasis>v</emphasis> direction\n                    in <parameter>control</parameter>.\n                </para>\n            </listitem>\n        ",
            "control": "<listitem>\n                <para>\n                    Specifies an array containing control points for the NURBS surface.\n                    The offsets between successive control points in the parametric <emphasis>u</emphasis>\n                    and <emphasis>v</emphasis> directions are given by <parameter>sStride</parameter> and <parameter>tStride</parameter>.\n                </para>\n            </listitem>\n        ",
            "sOrder": "<listitem>\n                <para>\n                    Specifies the order of the NURBS surface in the parametric <emphasis>u</emphasis> \n                    direction. The order is one more than the degree, hence\n                    a surface that is cubic in <emphasis>u</emphasis> has a <emphasis>u</emphasis> order of 4.\n                </para>\n            </listitem>\n        ",
            "tOrder": "<listitem>\n                <para>\n                    Specifies the order of the NURBS surface in the parametric <emphasis>v</emphasis> \n                    direction. The order is one more than the degree, hence\n                    a surface that is cubic in <emphasis>v</emphasis> has a <emphasis>v</emphasis> order of 4.\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies type of the surface. <parameter>type</parameter> can be any of the valid\n                    two-dimensional evaluator types (such as <constant>GLU_MAP2_VERTEX_3</constant> or \n                    <constant>GLU_MAP2_COLOR_4</constant>).\n                </para>\n            </listitem>\n        "
        }
    },
    "gluOrtho2D": {
        "signature": "void gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)",
        "purpose": "define a 2D orthographic projection matrix",
        "parameters": {
            "left": "<listitem>\n                <para>\n                    Specify the coordinates for the left and right vertical clipping planes.\n                </para>\n            </listitem>\n        ",
            "bottom": "<listitem>\n                <para>\n                    Specify the coordinates for the bottom and top horizontal clipping planes.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluPartialDisk": {
        "signature": "void gluPartialDisk(GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, GLdouble start, GLdouble sweep)",
        "purpose": "draw an arc of a disk",
        "parameters": {
            "quad": "<listitem>\n                <para>\n                    Specifies a quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "inner": "<listitem>\n                <para>\n                    Specifies the inner radius of the partial disk (can be 0).\n                </para>\n            </listitem>\n        ",
            "outer": "<listitem>\n                <para>\n                    Specifies the outer radius of the partial disk.\n                </para>\n            </listitem>\n        ",
            "slices": "<listitem>\n                <para>\n                    Specifies the number of subdivisions around the <emphasis>z</emphasis> axis.\n                </para>\n            </listitem>\n        ",
            "loops": "<listitem>\n                <para>\n                    Specifies the number of concentric rings about the origin into which\n                    the partial disk is subdivided.\n                </para>\n            </listitem>\n        ",
            "start": "<listitem>\n                <para>\n                    Specifies the starting angle, in degrees, of the disk portion.\n                </para>\n            </listitem>\n        ",
            "sweep": "<listitem>\n                <para>\n                    Specifies the sweep angle, in degrees, of the disk portion.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluPerspective": {
        "signature": "void gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar)",
        "purpose": "set up a perspective projection matrix",
        "parameters": {
            "fovy": "<listitem>\n                <para>\n                    Specifies the field of view angle, in degrees, in the <emphasis>y</emphasis> direction.\n                </para>\n            </listitem>\n        ",
            "aspect": "<listitem>\n                <para>\n                    Specifies the aspect ratio that determines\n                    the field of view in the <emphasis>x</emphasis> direction.\n                    The aspect ratio is the ratio of <emphasis>x</emphasis> (width) to <emphasis>y</emphasis> (height).\n                </para>\n            </listitem>\n        ",
            "zNear": "<listitem>\n                <para>\n                    Specifies the distance from the viewer to the near clipping plane\n                    (always positive).\n                </para>\n            </listitem>\n        ",
            "zFar": "<listitem>\n                <para>\n                    Specifies the distance from the viewer to the far clipping plane\n                    (always positive).\n                </para>\n            </listitem>\n        "
        }
    },
    "gluPickMatrix": {
        "signature": "void gluPickMatrix(GLdouble x, GLdouble y, GLdouble delX, GLdouble delY, GLint * viewport)",
        "purpose": "define a picking region",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the center of a picking region in window coordinates.\n                </para>\n            </listitem>\n        ",
            "delX": "<listitem>\n                <para>\n                    Specify the width and height, respectively, of the picking region in window \n                    coordinates.\n                </para>\n            </listitem>\n        ",
            "viewport": "<listitem>\n                <para>\n                    Specifies the current viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        "
        }
    },
    "gluProject": {
        "signature": "GLint gluProject(GLdouble objX, GLdouble objY, GLdouble objZ, const GLdouble * model, const GLdouble * proj, const GLint * view, GLdouble* winX, GLdouble* winY, GLdouble* winZ)",
        "purpose": "map object coordinates to window coordinates",
        "parameters": {
            "objX": "<listitem>\n                <para>\n                    Specify the object coordinates.\n                </para>\n            </listitem>\n        ",
            "model": "<listitem>\n                <para>\n                    Specifies the current modelview matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "proj": "<listitem>\n                <para>\n                    Specifies the current projection matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "view": "<listitem>\n                <para>\n                    Specifies the current viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "winX": "<listitem>\n                <para>\n                    Return the computed window coordinates.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluPwlCurve": {
        "signature": "void gluPwlCurve(GLUnurbs* nurb, GLint count, GLfloat* data, GLint stride, GLenum type)",
        "purpose": "describe a piecewise linear NURBS trimming curve",
        "parameters": {
            "nurb": "<listitem>\n                <para>\n                    Specifies the NURBS object (created with <citerefentry><refentrytitle>gluNewNurbsRenderer</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "count": "<listitem>\n                <para>\n                    Specifies the number of points on the curve.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies an array containing the curve points.\n                </para>\n            </listitem>\n        ",
            "stride": "<listitem>\n                <para>\n                    Specifies the offset (a number of single-precision floating-point values)\n                    between points on the curve.\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies the type of curve.\n                    Must be either <constant>GLU_MAP1_TRIM_2</constant> or <constant>GLU_MAP1_TRIM_3</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluQuadricCallback": {
        "signature": "void gluQuadricCallback(GLUquadric* quad, GLenum which, _GLUfuncptr CallBackFunc)",
        "purpose": "define a callback for a quadrics object",
        "parameters": {
            "quad": "<listitem>\n                <para>\n                    Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "which": "<listitem>\n                <para>\n                    Specifies the callback being defined.\n                    The only valid value is <constant>GLU_ERROR</constant>.\n                </para>\n            </listitem>\n        ",
            "CallBackFunc": "<listitem>\n                <para>\n                    Specifies the function to be called.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluQuadricDrawStyle": {
        "signature": "void gluQuadricDrawStyle(GLUquadric* quad, GLenum draw)",
        "purpose": "specify the draw style desired for quadrics",
        "parameters": {
            "quad": "<listitem>\n                <para>\n                    Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "draw": "<listitem>\n                <para>\n                    Specifies the desired draw style. Valid values are\n                    <constant>GLU_FILL</constant>,\n                    <constant>GLU_LINE</constant>,\n                    <constant>GLU_SILHOUETTE</constant>, and\n                    <constant>GLU_POINT</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluQuadricNormals": {
        "signature": "void gluQuadricNormals(GLUquadric* quad, GLenum normal)",
        "purpose": "specify what kind of normals are desired for quadrics",
        "parameters": {
            "quad": "<listitem>\n                <para>\n                    Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "normal": "<listitem>\n                <para>\n                    Specifies the desired type of normals. Valid values are\n                    <constant>GLU_NONE</constant>,\n                    <constant>GLU_FLAT</constant>, and\n                    <constant>GLU_SMOOTH</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluQuadricOrientation": {
        "signature": "void gluQuadricOrientation(GLUquadric* quad, GLenum orientation)",
        "purpose": "specify inside/outside orientation for quadrics",
        "parameters": {
            "quad": "<listitem>\n                <para>\n                    Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "orientation": "<listitem>\n                <para>\n                    Specifies the desired orientation. Valid values are\n                    <constant>GLU_OUTSIDE</constant> and\n                    <constant>GLU_INSIDE</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluQuadricTexture": {
        "signature": "void gluQuadricTexture(GLUquadric* quad, GLboolean texture)",
        "purpose": "specify if texturing is desired for quadrics",
        "parameters": {
            "quad": "<listitem>\n                <para>\n                    Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "texture": "<listitem>\n                <para>\n                    Specifies a flag indicating if texture coordinates should be generated.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluScaleImage": {
        "signature": "GLint gluScaleImage(GLenum format, GLsizei wIn, GLsizei hIn, GLenum typeIn, const void * dataIn, GLsizei wOut, GLsizei hOut, GLenum typeOut, void* dataOut)",
        "purpose": "scale an image to an arbitrary size",
        "parameters": {
            "format": "<listitem>\n                <para>\n                    Specifies the format of the pixel data.\n                    The following symbolic values are valid:\n                    <constant>GLU_COLOR_INDEX</constant>,\n                    <constant>GLU_STENCIL_INDEX</constant>,\n                    <constant>GLU_DEPTH_COMPONENT</constant>,\n                    <constant>GLU_RED</constant>,\n                    <constant>GLU_GREEN</constant>,\n                    <constant>GLU_BLUE</constant>,\n                    <constant>GLU_ALPHA</constant>,\n                    <constant>GLU_RGB</constant>,\n                    <constant>GLU_RGBA</constant>,\n                    <constant>GLU_BGR</constant>,\n                    <constant>GLU_BGRA</constant>,\n                    <constant>GLU_LUMINANCE</constant>, and\n                    <constant>GLU_LUMINANCE_ALPHA</constant>.\n                </para>\n            </listitem>\n        ",
            "wIn": "<listitem>\n                <para>\n                    Specify in pixels the width and height, respectively, of the source image.\n                </para>\n            </listitem>\n        ",
            "typeIn": "<listitem>\n                <para>\n                    Specifies the data type for <parameter>dataIn</parameter>. Must be one of\n                    <constant>GLU_UNSIGNED_BYTE</constant>,\n                    <constant>GLU_BYTE</constant>,\n                    <constant>GLU_BITMAP</constant>,\n                    <constant>GLU_UNSIGNED_SHORT</constant>,\n                    <constant>GLU_SHORT</constant>,\n                    <constant>GLU_UNSIGNED_INT</constant>,\n                    <constant>GLU_INT</constant>, \n                    <constant>GLU_FLOAT</constant>, \n                    <constant>GLU_UNSIGNED_BYTE_3_3_2</constant>,\n                    <constant>GLU_UNSIGNED_BYTE_2_3_3_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_5_5_1</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_1_5_5_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_10_10_10_2</constant>, or\n                    <constant>GLU_UNSIGNED_INT_2_10_10_10_REV</constant>.\n                </para>\n            </listitem>\n        ",
            "dataIn": "<listitem>\n                <para>\n                    Specifies a pointer to the source image.\n                </para>\n            </listitem>\n        ",
            "wOut": "<listitem>\n                <para>\n                    Specify the width and height, respectively, in pixels of the destination image.\n                </para>\n            </listitem>\n        ",
            "typeOut": "<listitem>\n                <para>\n                    Specifies the data type for <parameter>dataOut</parameter>. Must be one of\n                    <constant>GLU_UNSIGNED_BYTE</constant>,\n                    <constant>GLU_BYTE</constant>,\n                    <constant>GLU_BITMAP</constant>,\n                    <constant>GLU_UNSIGNED_SHORT</constant>,\n                    <constant>GLU_SHORT</constant>,\n                    <constant>GLU_UNSIGNED_INT</constant>,\n                    <constant>GLU_INT</constant>, \n                    <constant>GLU_FLOAT</constant>,\n                    <constant>GLU_UNSIGNED_BYTE_3_3_2</constant>,\n                    <constant>GLU_UNSIGNED_BYTE_2_3_3_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_6_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_4_4_4_4_REV</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_5_5_5_1</constant>,\n                    <constant>GLU_UNSIGNED_SHORT_1_5_5_5_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8</constant>,\n                    <constant>GLU_UNSIGNED_INT_8_8_8_8_REV</constant>,\n                    <constant>GLU_UNSIGNED_INT_10_10_10_2</constant>, or\n                    <constant>GLU_UNSIGNED_INT_2_10_10_10_REV</constant>.\n                </para>\n            </listitem>\n        ",
            "dataOut": "<listitem>\n                <para>\n                    Specifies a pointer to the destination image.\n                </para>\n            </listitem>\n        "
        }
    },
    "glUseProgram": {
        "signature": "void glUseProgram(GLuint program)",
        "purpose": "Installs a program object as part of current rendering state",
        "parameters": {
            "program": "<listitem>\n\t\t    <para>Specifies the handle of the program object\n\t\t    whose executables are to be used as part of current\n\t\t    rendering state.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "gluSphere": {
        "signature": "void gluSphere(GLUquadric* quad, GLdouble radius, GLint slices, GLint stacks)",
        "purpose": "draw a sphere",
        "parameters": {
            "quad": "<listitem>\n                <para>\n                    Specifies the quadrics object (created with <citerefentry><refentrytitle>gluNewQuadric</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "radius": "<listitem>\n                <para>\n                    Specifies the radius of the sphere.\n                </para>\n            </listitem>\n        ",
            "slices": "<listitem>\n                <para>\n                    Specifies the number of subdivisions around the <emphasis>z</emphasis> axis \n                    (similar to lines of longitude).\n                </para>\n            </listitem>\n        ",
            "stacks": "<listitem>\n                <para>\n                    Specifies the number of subdivisions along the <emphasis>z</emphasis> axis\n                    (similar to lines of\n                    latitude).\n                </para>\n            </listitem>\n        "
        }
    },
    "gluTessBeginContour": {
        "signature": "void gluTessBeginContour(GLUtesselator* tess)",
        "purpose": "delimit a contour description",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        "
        }
    },
    "gluTessEndContour": {
        "signature": "void gluTessEndContour(GLUtesselator* tess)",
        "purpose": "delimit a contour description",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        "
        }
    },
    "gluTessBeginPolygon": {
        "signature": "void gluTessBeginPolygon(GLUtesselator* tess, void* data)",
        "purpose": "delimit a polygon description",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies a pointer to user polygon data.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluTessCallback": {
        "signature": "void gluTessCallback(GLUtesselator* tess, GLenum which, _GLUfuncptr CallBackFunc)",
        "purpose": "define a callback for a tessellation object",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "which": "<listitem>\n                <para>\n                    Specifies the callback being defined. The following values are valid:\n                    <constant>GLU_TESS_BEGIN</constant>,\n                    <constant>GLU_TESS_BEGIN_DATA</constant>,\n                    <constant>GLU_TESS_EDGE_FLAG</constant>,\n                    <constant>GLU_TESS_EDGE_FLAG_DATA</constant>,\n                    <constant>GLU_TESS_VERTEX</constant>,\n                    <constant>GLU_TESS_VERTEX_DATA</constant>,\n                    <constant>GLU_TESS_END</constant>, \n                    <constant>GLU_TESS_END_DATA</constant>, \n                    <constant>GLU_TESS_COMBINE</constant>, \n                    <constant>GLU_TESS_COMBINE_DATA</constant>,\n                    <constant>GLU_TESS_ERROR</constant>, and\n                    <constant>GLU_TESS_ERROR_DATA</constant>.\n                </para>\n            </listitem>\n        ",
            "CallBackFunc": "<listitem>\n                <para>\n                    Specifies the function to be called.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluTessEndPolygon": {
        "signature": "void gluTessEndPolygon(GLUtesselator* tess)",
        "purpose": "delimit a polygon description",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        "
        }
    },
    "gluTessNormal": {
        "signature": "void gluTessNormal(GLUtesselator* tess, GLdouble valueX, GLdouble valueY, GLdouble valueZ)",
        "purpose": "specify a normal for a polygon",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "valueX": "<listitem>\n                <para>\n                    Specifies the first component of the normal.\n                </para>\n            </listitem>\n        ",
            "valueY": "<listitem>\n                <para>\n                    Specifies the second component of the normal.\n                </para>\n            </listitem>\n        ",
            "valueZ": "<listitem>\n                <para>\n                    Specifies the third component of the normal.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluTessProperty": {
        "signature": "void gluTessProperty(GLUtesselator* tess, GLenum which, GLdouble data)",
        "purpose": "set a tessellation object property",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "which": "<listitem>\n                <para>\n                    Specifies the property to be set. Valid values are\n                    <constant>GLU_TESS_WINDING_RULE</constant>,\n                    <constant>GLU_TESS_BOUNDARY_ONLY</constant>, and\n                    <constant>GLU_TESS_TOLERANCE</constant>.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies the value of the indicated property.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluTessVertex": {
        "signature": "void gluTessVertex(GLUtesselator* tess, GLdouble * location, void* data)",
        "purpose": "specify a vertex on a polygon",
        "parameters": {
            "tess": "<listitem>\n                <para>\n                    Specifies the tessellation object (created with <citerefentry><refentrytitle>gluNewTess</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        ",
            "location": "<listitem>\n                <para>\n                    Specifies the location of the vertex.\n                </para>\n            </listitem>\n        ",
            "data": "<listitem>\n                <para>\n                    Specifies an opaque pointer passed back to the program with the vertex callback\n                    (as specified by <citerefentry><refentrytitle>gluTessCallback</refentrytitle></citerefentry>).\n                </para>\n            </listitem>\n        "
        }
    },
    "gluUnProject": {
        "signature": "GLint gluUnProject(GLdouble winX, GLdouble winY, GLdouble winZ, const GLdouble * model, const GLdouble * proj, const GLint * view, GLdouble* objX, GLdouble* objY, GLdouble* objZ)",
        "purpose": "map window coordinates to object coordinates",
        "parameters": {
            "winX": "<listitem>\n                <para>\n                    Specify the window coordinates to be mapped.\n                </para>\n            </listitem>\n        ",
            "model": "<listitem>\n                <para>\n                    Specifies the modelview matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "proj": "<listitem>\n                <para>\n                    Specifies the projection matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "view": "<listitem>\n                <para>\n                    Specifies the viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "objX": "<listitem>\n                <para>\n                    Returns the computed object coordinates.\n                </para>\n            </listitem>\n        "
        }
    },
    "gluUnProject4": {
        "signature": "GLint gluUnProject4(GLdouble winX, GLdouble winY, GLdouble winZ, GLdouble clipW, const GLdouble * model, const GLdouble * proj, const GLint * view, GLdouble nearVal, GLdouble farVal, GLdouble* objX, GLdouble* objY, GLdouble* objZ, GLdouble* objW)",
        "purpose": "map window and clip coordinates to object coordinates",
        "parameters": {
            "winX": "<listitem>\n                <para>\n                    Specify the window coordinates to be mapped.\n                </para>\n            </listitem>\n        ",
            "clipW": "<listitem>\n                <para>\n                    Specify the clip w coordinate to be mapped.\n                </para>\n            </listitem>\n        ",
            "model": "<listitem>\n                <para>\n                    Specifies the modelview matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "proj": "<listitem>\n                <para>\n                    Specifies the projection matrix (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "view": "<listitem>\n                <para>\n                    Specifies the viewport (as from a <citerefentry><refentrytitle>glGetIntegerv</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "nearVal": "<listitem>\n                <para>\n                    Specifies the near and far planes (as from a <citerefentry><refentrytitle>glGetDoublev</refentrytitle></citerefentry> call).\n                </para>\n            </listitem>\n        ",
            "objX": "<listitem>\n                <para>\n                    Returns the computed object coordinates.\n                </para>\n            </listitem>\n        "
        }
    },
    "glValidateProgram": {
        "signature": "void glValidateProgram(GLuint program)",
        "purpose": "Validates a program object",
        "parameters": {
            "program": "<listitem>\n\t\t    <para>Specifies the handle of the program object to\n\t\t    be validated.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertex2s": {
        "signature": "void glVertex2s(GLshort x, GLshort y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex2i": {
        "signature": "void glVertex2i(GLint x, GLint y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex2f": {
        "signature": "void glVertex2f(GLfloat x, GLfloat y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex2d": {
        "signature": "void glVertex2d(GLdouble x, GLdouble y)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex3s": {
        "signature": "void glVertex3s(GLshort x, GLshort y, GLshort z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex3i": {
        "signature": "void glVertex3i(GLint x, GLint y, GLint z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex3f": {
        "signature": "void glVertex3f(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex3d": {
        "signature": "void glVertex3d(GLdouble x, GLdouble y, GLdouble z)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex4s": {
        "signature": "void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex4i": {
        "signature": "void glVertex4i(GLint x, GLint y, GLint z, GLint w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex4f": {
        "signature": "void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex4d": {
        "signature": "void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex2sv": {
        "signature": "void glVertex2sv(const GLshort * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex2iv": {
        "signature": "void glVertex2iv(const GLint * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex2fv": {
        "signature": "void glVertex2fv(const GLfloat * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex2dv": {
        "signature": "void glVertex2dv(const GLdouble * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex3sv": {
        "signature": "void glVertex3sv(const GLshort * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex3iv": {
        "signature": "void glVertex3iv(const GLint * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex3fv": {
        "signature": "void glVertex3fv(const GLfloat * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex3dv": {
        "signature": "void glVertex3dv(const GLdouble * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex4sv": {
        "signature": "void glVertex4sv(const GLshort * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex4iv": {
        "signature": "void glVertex4iv(const GLint * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex4fv": {
        "signature": "void glVertex4fv(const GLfloat * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertex4dv": {
        "signature": "void glVertex4dv(const GLdouble * v)",
        "purpose": "specify a vertex",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify <emphasis>x</emphasis>, <emphasis>y</emphasis>, <emphasis>z</emphasis>, and <emphasis>w</emphasis> coordinates of a vertex.\n                    Not all parameters are present in all forms of the command.\n                </para>\n            </listitem>\n        "
        }
    },
    "glVertexAttrib1f": {
        "signature": "void glVertexAttrib1f(GLuint index, GLfloat v0)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib1s": {
        "signature": "void glVertexAttrib1s(GLuint index, GLshort v0)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib1d": {
        "signature": "void glVertexAttrib1d(GLuint index, GLdouble v0)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib2f": {
        "signature": "void glVertexAttrib2f(GLuint index, GLfloat v0, GLfloat v1)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib2s": {
        "signature": "void glVertexAttrib2s(GLuint index, GLshort v0, GLshort v1)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib2d": {
        "signature": "void glVertexAttrib2d(GLuint index, GLdouble v0, GLdouble v1)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib3f": {
        "signature": "void glVertexAttrib3f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib3s": {
        "signature": "void glVertexAttrib3s(GLuint index, GLshort v0, GLshort v1, GLshort v2)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib3d": {
        "signature": "void glVertexAttrib3d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4f": {
        "signature": "void glVertexAttrib4f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4s": {
        "signature": "void glVertexAttrib4s(GLuint index, GLshort v0, GLshort v1, GLshort v2, GLshort v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4d": {
        "signature": "void glVertexAttrib4d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4Nub": {
        "signature": "void glVertexAttrib4Nub(GLuint index, GLubyte v0, GLubyte v1, GLubyte v2, GLubyte v3)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib1fv": {
        "signature": "void glVertexAttrib1fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib1sv": {
        "signature": "void glVertexAttrib1sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib1dv": {
        "signature": "void glVertexAttrib1dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib2fv": {
        "signature": "void glVertexAttrib2fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib2sv": {
        "signature": "void glVertexAttrib2sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib2dv": {
        "signature": "void glVertexAttrib2dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib3fv": {
        "signature": "void glVertexAttrib3fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib3sv": {
        "signature": "void glVertexAttrib3sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib3dv": {
        "signature": "void glVertexAttrib3dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4fv": {
        "signature": "void glVertexAttrib4fv(GLuint index, const GLfloat *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4sv": {
        "signature": "void glVertexAttrib4sv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4dv": {
        "signature": "void glVertexAttrib4dv(GLuint index, const GLdouble *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4iv": {
        "signature": "void glVertexAttrib4iv(GLuint index, const GLint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4bv": {
        "signature": "void glVertexAttrib4bv(GLuint index, const GLbyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4ubv": {
        "signature": "void glVertexAttrib4ubv(GLuint index, const GLubyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4usv": {
        "signature": "void glVertexAttrib4usv(GLuint index, const GLushort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4uiv": {
        "signature": "void glVertexAttrib4uiv(GLuint index, const GLuint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4Nbv": {
        "signature": "void glVertexAttrib4Nbv(GLuint index, const GLbyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4Nsv": {
        "signature": "void glVertexAttrib4Nsv(GLuint index, const GLshort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4Niv": {
        "signature": "void glVertexAttrib4Niv(GLuint index, const GLint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4Nubv": {
        "signature": "void glVertexAttrib4Nubv(GLuint index, const GLubyte *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4Nusv": {
        "signature": "void glVertexAttrib4Nusv(GLuint index, const GLushort *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttrib4Nuiv": {
        "signature": "void glVertexAttrib4Nuiv(GLuint index, const GLuint *v)",
        "purpose": "Specifies the value of a generic vertex attribute",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "v0": "<listitem>\n\t\t    <para>Specifies the new values to be used for the\n\t\t    specified vertex attribute.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexAttribPointer": {
        "signature": "void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)",
        "purpose": "define an array of generic vertex attribute data",
        "parameters": {
            "index": "<listitem>\n\t\t    <para>Specifies the index of the generic vertex\n\t\t    attribute to be modified.</para>\n\t\t</listitem>\n\t    ",
            "size": "<listitem>\n\t\t    <para>Specifies the number of components per\n\t\t    generic vertex attribute. Must\n\t\t    be 1, 2, 3, or 4. The initial value is 4.</para>\n\t\t</listitem>\n\t    ",
            "type": "<listitem>\n\t\t    <para>Specifies the data type of each component in\n\t\t    the array. Symbolic constants\n\t\t    <constant>GL_BYTE</constant>,\n\t\t    <constant>GL_UNSIGNED_BYTE</constant>,\n\t\t    <constant>GL_SHORT</constant>,\n\t\t    <constant>GL_UNSIGNED_SHORT</constant>,\n\t\t    <constant>GL_INT</constant>,\n\t\t    <constant>GL_UNSIGNED_INT</constant>,\n\t\t    <constant>GL_FLOAT</constant>, or\n\t\t    <constant>GL_DOUBLE</constant> are\n\t\t    accepted. The initial value is <constant>GL_FLOAT</constant>.</para>\n\t\t</listitem>\n\t    ",
            "normalized": "<listitem>\n\t\t    <para>Specifies whether fixed-point data values\n\t\t    should be normalized (<constant>GL_TRUE</constant>)\n\t\t    or converted directly as fixed-point values\n\t\t    (<constant>GL_FALSE</constant>) when they are\n\t\t    accessed.</para>\n\t\t</listitem>\n\t    ",
            "stride": "<listitem>\n\t\t    <para>Specifies the byte offset between consecutive\n\t\t    generic vertex attributes. If <parameter>stride</parameter>\n\t\t    is 0, the generic vertex attributes are\n\t\t    understood to be tightly packed in the\n\t\t    array. The initial value is 0.</para>\n\t\t</listitem>\n\t    ",
            "pointer": "<listitem>\n\t\t    <para>Specifies a pointer to the first component of\n\t\t    the first generic vertex attribute in the array. The initial value is 0.</para>\n\t\t</listitem>\n\t    "
        }
    },
    "glVertexPointer": {
        "signature": "void glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)",
        "purpose": "define an array of vertex data",
        "parameters": {
            "size": "<listitem>\n                <para>\n                    Specifies the number of coordinates per vertex. Must be 2, 3, or\n                    4. The initial value is 4.\n                </para>\n            </listitem>\n        ",
            "type": "<listitem>\n                <para>\n                    Specifies the data type of each coordinate in the array.\n                    Symbolic constants\n                    <constant>GL_SHORT</constant>,\n                    <constant>GL_INT</constant>,\n                    <constant>GL_FLOAT</constant>,\n                    or <constant>GL_DOUBLE</constant>\n                    are accepted. The initial value is <constant>GL_FLOAT</constant>.\n                </para>\n            </listitem>\n        ",
            "stride": "<listitem>\n                <para>\n                    Specifies the byte offset between consecutive\n                    vertices. If <parameter>stride</parameter> is 0, the vertices are understood to be tightly packed in\n                    the array. The initial value\n                    is 0.\n                </para>\n            </listitem>\n        ",
            "pointer": "<listitem>\n                <para>\n                    Specifies a pointer to the first coordinate of the first vertex in the\n                    array. The initial value is 0.\n                </para>\n            </listitem>\n        "
        }
    },
    "glViewport": {
        "signature": "void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)",
        "purpose": "set the viewport",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the lower left corner of the viewport rectangle,\n                    in pixels. The initial value is (0,0).\n                </para>\n            </listitem>\n        ",
            "width": "<listitem>\n                <para>\n                    Specify the width and height\n                    of the viewport.\n                    When a GL context is first attached to a window,\n                    <parameter>width</parameter> and <parameter>height</parameter> are set to the dimensions of that\n                    window.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos2s": {
        "signature": "void glWindowPos2s(GLshort x, GLshort y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos2i": {
        "signature": "void glWindowPos2i(GLint x, GLint y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos2f": {
        "signature": "void glWindowPos2f(GLfloat x, GLfloat y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos2d": {
        "signature": "void glWindowPos2d(GLdouble x, GLdouble y)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos3s": {
        "signature": "void glWindowPos3s(GLshort x, GLshort y, GLshort z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos3i": {
        "signature": "void glWindowPos3i(GLint x, GLint y, GLint z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos3f": {
        "signature": "void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos3d": {
        "signature": "void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos2sv": {
        "signature": "void glWindowPos2sv(const GLshort * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos2iv": {
        "signature": "void glWindowPos2iv(const GLint * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos2fv": {
        "signature": "void glWindowPos2fv(const GLfloat * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos2dv": {
        "signature": "void glWindowPos2dv(const GLdouble * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos3sv": {
        "signature": "void glWindowPos3sv(const GLshort * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos3iv": {
        "signature": "void glWindowPos3iv(const GLint * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos3fv": {
        "signature": "void glWindowPos3fv(const GLfloat * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glWindowPos3dv": {
        "signature": "void glWindowPos3dv(const GLdouble * v)",
        "purpose": "specify the raster position in window coordinates for pixel operations",
        "parameters": {
            "x": "<listitem>\n                <para>\n                    Specify the \n                    <inlineequation><math><mi mathvariant=\"italic\">x</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">y</mi></math></inlineequation>,\n                    <inlineequation><math><mi mathvariant=\"italic\">z</mi></math></inlineequation>\n                    coordinates for the raster position.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXChooseFBConfig": {
        "signature": "GLXFBConfig * glXChooseFBConfig(Display * dpy, int screen, const int * attrib_list, int * nelements)",
        "purpose": "return a list of GLX frame buffer configurations that match the specified attributes",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "screen": "<listitem>\n                <para>\n                    Specifies the screen number.\n                </para>\n            </listitem>\n        ",
            "attrib_list": "<listitem>\n                <para>\n                    Specifies a list of attribute/value pairs.\n                    The last attribute must be <constant>None</constant>.\n                </para>\n            </listitem>\n        ",
            "nelements": "<listitem>\n                <para>\n                    Returns the number of elements in the list returned by <function>glXChooseFBConfig</function>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXChooseVisual": {
        "signature": "XVisualInfo* glXChooseVisual(Display * dpy, int screen, int * attribList)",
        "purpose": "return a visual that matches specified attributes",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "screen": "<listitem>\n                <para>\n                    Specifies the screen number.\n                </para>\n            </listitem>\n        ",
            "attribList": "<listitem>\n                <para>\n                    Specifies a list of boolean attributes and integer attribute/value pairs.\n                    The last attribute must be <constant>None</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXCopyContext": {
        "signature": "void glXCopyContext(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask)",
        "purpose": "copy state from one rendering context to another",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "src": "<listitem>\n                <para>\n                    Specifies the source context.\n                </para>\n            </listitem>\n        ",
            "dst": "<listitem>\n                <para>\n                    Specifies the destination context.\n                </para>\n            </listitem>\n        ",
            "mask": "<listitem>\n                <para>\n                    Specifies which portions of <parameter>src</parameter> state are to be copied to <parameter>dst</parameter>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXCreateContext": {
        "signature": "GLXContext glXCreateContext(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct)",
        "purpose": "create a new GLX rendering context",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "vis": "<listitem>\n                <para>\n                    Specifies the visual that defines the frame buffer resources available to\n                    the rendering context.\n                    It is a pointer to an <constant>XVisualInfo</constant> structure,\n                    not a visual ID or a pointer to a <constant>Visual</constant>.\n                </para>\n            </listitem>\n        ",
            "shareList": "<listitem>\n                <para>\n                    Specifies the context with which to share display lists.\n                    <constant>NULL</constant> indicates that no sharing is to take place.\n                </para>\n            </listitem>\n        ",
            "direct": "<listitem>\n                <para>\n                    Specifies whether rendering is to be done with a direct connection\n                    to the graphics system if possible (<constant>True</constant>)\n                    or through the X server (<constant>False</constant>).\n                </para>\n            </listitem>\n        "
        }
    },
    "glXCreateGLXPixmap": {
        "signature": "GLXPixmap glXCreateGLXPixmap(Display * dpy, XVisualInfo * vis, Pixmap pixmap)",
        "purpose": "create an off-screen GLX rendering area",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "vis": "<listitem>\n                <para>\n                    Specifies the visual that defines the structure of the rendering area.\n                    It is a pointer to an <constant>XVisualInfo</constant> structure,\n                    not a visual ID or a pointer to a <constant>Visual</constant>.\n                </para>\n            </listitem>\n        ",
            "pixmap": "<listitem>\n                <para>\n                    Specifies the X pixmap that will be used as the front left color buffer\n                    of the off-screen rendering area.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXCreateNewContext": {
        "signature": "GLXContext glXCreateNewContext(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)",
        "purpose": "create a new GLX rendering context",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "config": "<listitem>\n                <para>\n                    Specifies the GLXFBConfig structure with the desired attributes for the\n                    context.\n                </para>\n            </listitem>\n        ",
            "render_type": "<listitem>\n                <para>\n                    Specifies the type of the context to be created.  Must be one of\n                    <constant>GLX_RGBA_TYPE</constant> or <constant>GLX_COLOR_INDEX_TYPE</constant>.\n                </para>\n            </listitem>\n        ",
            "share_list": "<listitem>\n                <para>\n                    Specifies whether rendering is to be done with a direct connection\n                    to the graphics system if possible (<constant>True</constant>)\n                    or through the X server (<constant>False</constant>).\n                </para>\n            </listitem>\n        "
        }
    },
    "glXCreatePbuffer": {
        "signature": "GLXPbuffer glXCreatePbuffer(Display * dpy, GLXFBConfig config, const int * attrib_list)",
        "purpose": "create an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "config": "<listitem>\n                <para>\n                    Specifies a GLXFBConfig structure with the desired attributes for the\n                    window.\n                </para>\n            </listitem>\n        ",
            "attrib_list": "<listitem>\n                <para>\n                    Specifies a list of attribute value pairs, which must be terminated with\n                    <constant>None</constant> or <constant>NULL</constant>. Accepted attributes are\n                    <constant>GLX_PBUFFER_WIDTH</constant>, <constant>GLX_PBUFFER_HEIGHT</constant>, \n                    <constant>GLX_PRESERVED_CONTENTS</constant>, and <constant>GLX_LARGEST_PBUFFER</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXCreatePixmap": {
        "signature": "GLXPixmap glXCreatePixmap(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list)",
        "purpose": "create an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "config": "<listitem>\n                <para>\n                    Specifies a GLXFBConfig structure with the desired attributes for the\n                    window.\n                </para>\n            </listitem>\n        ",
            "pixmap": "<listitem>\n                <para>\n                    Specifies the X pixmap to be used as the rendering area.\n                </para>\n            </listitem>\n        ",
            "attrib_list": "<listitem>\n                <para>\n                    Currently unused. This must be set to <constant>NULL</constant> or be an empty list\n                    (i.e., one in which the first element is <constant>None</constant>).\n                </para>\n            </listitem>\n        "
        }
    },
    "glXCreateWindow": {
        "signature": "GLXWindow glXCreateWindow(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list)",
        "purpose": "create an on-screen rendering area",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "config": "<listitem>\n                <para>\n                    Specifies a GLXFBConfig structure with the desired attributes for the\n                    window.\n                </para>\n            </listitem>\n        ",
            "win": "<listitem>\n                <para>\n                    Specifies the X window to be used as the rendering area.\n                </para>\n            </listitem>\n        ",
            "attrib_list": "<listitem>\n                <para>\n                    Currently unused. This must be set to <constant>NULL</constant> or be an empty list\n                    (i.e., one in which the first element is <constant>None</constant>).\n                </para>\n            </listitem>\n        "
        }
    },
    "glXDestroyContext": {
        "signature": "void glXDestroyContext(Display * dpy, GLXContext ctx)",
        "purpose": "destroy a GLX context",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "ctx": "<listitem>\n                <para>\n                    Specifies the GLX context to be destroyed.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXDestroyGLXPixmap": {
        "signature": "void glXDestroyGLXPixmap(Display * dpy, GLXPixmap pix)",
        "purpose": "destroy a GLX pixmap",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "pix": "<listitem>\n                <para>\n                    Specifies the GLX pixmap to be destroyed.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXDestroyPbuffer": {
        "signature": "void glXDestroyPbuffer(Display * dpy, GLXPbuffer pbuf)",
        "purpose": "destroy an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "pbuf": "<listitem>\n                <para>\n                    Specifies the GLXPbuffer to be destroyed.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXDestroyPixmap": {
        "signature": "void glXDestroyPixmap(Display * dpy, GLXPixmap pixmap)",
        "purpose": "destroy an off-screen rendering area",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "pixmap": "<listitem>\n                <para>\n                    Specifies the GLXPixmap to be destroyed.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXDestroyWindow": {
        "signature": "void glXDestroyWindow(Display * dpy, GLXWindow win)",
        "purpose": "destroy an on-screen rendering area",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "win": "<listitem>\n                <para>\n                    Specifies the GLXWindow to be destroyed.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXFreeContextEXT": {
        "signature": "void glXFreeContextEXT(Display * dpy, GLXContext ctx)",
        "purpose": "free client-side memory for imported context",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "ctx": "<listitem>\n                <para>\n                    Specifies a GLX rendering context.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXGetClientString": {
        "signature": "const char * glXGetClientString(Display * dpy, int name)",
        "purpose": "return a string describing the client",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "name": "<listitem>\n                <para>\n                    Specifies which string is returned.\n                    The symbolic constants <constant>GLX_VENDOR</constant>, <constant>GLX_VERSION</constant>,\n                    and <constant>GLX_EXTENSIONS</constant> are accepted.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXGetConfig": {
        "signature": "int glXGetConfig(Display * dpy, XVisualInfo * vis, int attrib, int * value)",
        "purpose": "return information about GLX visuals",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "vis": "<listitem>\n                <para>\n                    Specifies the visual to be queried.\n                    It is a pointer to an <constant>XVisualInfo</constant> structure,\n                    not a visual ID or a pointer to a <constant>Visual</constant>.\n                </para>\n            </listitem>\n        ",
            "attrib": "<listitem>\n                <para>\n                    Specifies the visual attribute to be returned.\n                </para>\n            </listitem>\n        ",
            "value": "<listitem>\n                <para>\n                    Returns the requested value.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXGetContextIDEXT": {
        "signature": "GLXContextID glXGetContextIDEXT(const GLXContext ctx)",
        "purpose": "get the XID for a context.",
        "parameters": {
            "ctx": "<listitem>\n                <para>\n                    Specifies a GLX rendering context.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXGetCurrentContext": {
        "signature": "GLXContext glXGetCurrentContext()",
        "purpose": "return the current context",
        "parameters": {}
    },
    "glXGetCurrentDisplay": {
        "signature": "Display * glXGetCurrentDisplay()",
        "purpose": "get display for current context",
        "parameters": {}
    },
    "glXGetCurrentDrawable": {
        "signature": "GLXDrawable glXGetCurrentDrawable()",
        "purpose": "return the current drawable",
        "parameters": {}
    },
    "glXGetCurrentReadDrawable": {
        "signature": "GLXDrawable glXGetCurrentReadDrawable()",
        "purpose": "return the current drawable",
        "parameters": {}
    },
    "glXGetFBConfigAttrib": {
        "signature": "int glXGetFBConfigAttrib(Display * dpy, GLXFBConfig config, int attribute, int * value)",
        "purpose": "return information about a GLX frame buffer configuration",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "config": "<listitem>\n                <para>\n                    Specifies the GLX frame buffer configuration to be queried.\n                </para>\n            </listitem>\n        ",
            "attribute": "<listitem>\n                <para>\n                    Specifies the attribute to be returned.\n                </para>\n            </listitem>\n        ",
            "value": "<listitem>\n                <para>\n                    Returns the requested value.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXGetFBConfigs": {
        "signature": "GLXFBConfig * glXGetFBConfigs(Display * dpy, int screen, int * nelements)",
        "purpose": "list all GLX frame buffer configurations for a given screen",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "screen": "<listitem>\n                <para>\n                    Specifies the screen number.\n                </para>\n            </listitem>\n        ",
            "nelements": "<listitem>\n                <para>\n                    Returns the number of GLXFBConfigs returned.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXGetProcAddress": {
        "signature": "void(*)() glXGetProcAddress(const GLubyte * procName)",
        "purpose": "obtain a pointer to an OpenGL or GLX function",
        "parameters": {
            "procName": "<listitem>\n                <para>\n                    Specifies the name of the OpenGL or GLX function whose address is to be returned.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXGetSelectedEvent": {
        "signature": "void glXGetSelectedEvent(Display * dpy, GLXDrawable draw, unsigned long * event_mask)",
        "purpose": "returns GLX events that are selected for a window or a GLX pixel buffer",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server. \n                </para>\n            </listitem>\n        ",
            "draw": "<listitem>\n                <para>\n                    Specifies a GLX drawable. Must be a GLX pixel buffer or a window.\n                </para>\n            </listitem>\n        ",
            "event_mask": "<listitem>\n                <para>\n                    Returns the events that are selected for <parameter>draw</parameter>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXGetVisualFromFBConfig": {
        "signature": "XVisualInfo * glXGetVisualFromFBConfig(Display * dpy, GLXFBConfig config)",
        "purpose": "return visual that is associated with the frame buffer configuration",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server. \n                </para>\n            </listitem>\n        ",
            "config": "<listitem>\n                <para>\n                    Specifies the GLX frame buffer configuration.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXImportContextEXT": {
        "signature": "GLXContext glXImportContextEXT(Display * dpy, GLXContextID contextID)",
        "purpose": "import another process's indirect rendering context.",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "contextID": "<listitem>\n                <para>\n                    Specifies a GLX rendering context.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXIsDirect": {
        "signature": "Bool glXIsDirect(Display * dpy, GLXContext ctx)",
        "purpose": "indicate whether direct rendering is enabled",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "ctx": "<listitem>\n                <para>\n                    Specifies the GLX context that is being queried.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXMakeContextCurrent": {
        "signature": "Bool glXMakeContextCurrent(Display * display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)",
        "purpose": "attach a GLX context to a GLX drawable",
        "parameters": {
            "display": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "draw": "<listitem>\n                <para>\n                    Specifies a GLX drawable to render into.\n                    Must be an XID representing a GLXWindow, GLXPixmap, or GLXPbuffer.\n                </para>\n            </listitem>\n        ",
            "read": "<listitem>\n                <para>\n                    Specifies a GLX drawable to read from.\n                    Must be an XID representing a GLXWindow, GLXPixmap, or GLXPbuffer.\n                </para>\n            </listitem>\n        ",
            "ctx": "<listitem>\n                <para>\n                    Specifies the GLX context to be bound to <parameter>read</parameter> and <parameter>ctx</parameter>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXMakeCurrent": {
        "signature": "Bool glXMakeCurrent(Display * dpy, GLXDrawable drawable, GLXContext ctx)",
        "purpose": "attach a GLX context to a window or a GLX pixmap",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "drawable": "<listitem>\n                <para>\n                    Specifies a GLX drawable.\n                    Must be either an X window ID or a GLX pixmap ID.\n                </para>\n            </listitem>\n        ",
            "ctx": "<listitem>\n                <para>\n                    Specifies a GLX rendering context that is to be attached to <parameter>drawable</parameter>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXQueryContext": {
        "signature": "int glXQueryContext(Display * dpy, GLXContext ctx, int attribute, int * value)",
        "purpose": "query context information",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "ctx": "<listitem>\n                <para>\n                    Specifies a GLX rendering context.\n                </para>\n            </listitem>\n        ",
            "attribute": "<listitem>\n                <para>\n                    Specifies that a context parameter should be retrieved.  Must be one of\n                    <constant>GLX_FBCONFIG_ID</constant>, <constant>GLX_RENDER_TYPE</constant>, or <constant>GLX_SCREEN</constant>.\n                </para>\n            </listitem>\n        ",
            "value": "<listitem>\n                <para>\n                    Contains the return value for <parameter>attribute</parameter>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXQueryContextInfoEXT": {
        "signature": "int glXQueryContextInfoEXT(Display * dpy, GLXContext ctx, int attribute, int * value)",
        "purpose": "query context information",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "ctx": "<listitem>\n                <para>\n                    Specifies a GLX rendering context.\n                </para>\n            </listitem>\n        ",
            "attribute": "<listitem>\n                <para>\n                    Specifies that a context parameter should be retrieved.  Must be one of\n                    <constant>GLX_SHARED_CONTEXT_EXT</constant>, <constant>GLX_VISUAL_ID_EXT</constant>, or <constant>GLX_SCREEN_EXT</constant>.\n                </para>\n            </listitem>\n        ",
            "value": "<listitem>\n                <para>\n                    Contains the return value for <parameter>attribute</parameter>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXQueryDrawable": {
        "signature": "int glXQueryDrawable(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value)",
        "purpose": "returns an attribute associated with a GLX drawable",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "draw": "<listitem>\n                <para>\n                    Specifies the GLX drawable to be queried.\n                </para>\n            </listitem>\n        ",
            "attribute": "<listitem>\n                <para>\n                    Specifies the attribute to be returned.  Must be one of\n                    <constant>GLX_WIDTH</constant>,\n\t\t\t\t\t<constant>GLX_HEIGHT</constant>,\n\t\t\t\t\t<constant>GLX_PRESERVED_CONTENTS</constant>,\n\t\t\t\t\t<constant>GLX_LARGEST_PBUFFER</constant>, or\n\t\t\t\t\t<constant>GLX_FBCONFIG_ID</constant>.\n                </para>\n            </listitem>\n        ",
            "value": "<listitem>\n                <para>\n                    Contains the return value for\n\t\t\t\t\t<parameter>attribute</parameter>. \n                </para>\n            </listitem>\n        "
        }
    },
    "glXQueryExtension": {
        "signature": "Bool glXQueryExtension(Display * dpy, int * errorBase, int * eventBase)",
        "purpose": "indicate whether the GLX extension is supported",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "errorBase": "<listitem>\n                <para>\n                    Returns the base error code of the GLX server extension.\n                </para>\n            </listitem>\n        ",
            "eventBase": "<listitem>\n                <para>\n                    Returns the base event code of the GLX server extension.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXQueryExtensionsString": {
        "signature": "const char * glXQueryExtensionsString(Display * dpy, int screen)",
        "purpose": "return list of supported extensions",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "screen": "<listitem>\n                <para>\n                    Specifies the screen number.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXQueryServerString": {
        "signature": "const char * glXQueryServerString(Display * dpy, int screen, int name)",
        "purpose": "return string describing the server",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "screen": "<listitem>\n                <para>\n                    Specifies the screen number.\n                </para>\n            </listitem>\n        ",
            "name": "<listitem>\n                <para>\n                    Specifies which string is returned:\n                    one of <constant>GLX_VENDOR</constant>, <constant>GLX_VERSION</constant>, or <constant>GLX_EXTENSIONS</constant>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXQueryVersion": {
        "signature": "Bool glXQueryVersion(Display * dpy, int * major, int * minor)",
        "purpose": "return the version numbers of the GLX extension",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "major": "<listitem>\n                <para>\n                    Returns the major version number of the GLX server extension.\n                </para>\n            </listitem>\n        ",
            "minor": "<listitem>\n                <para>\n                    Returns the minor version number of the GLX server extension.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXSelectEvent": {
        "signature": "void glXSelectEvent(Display * dpy, GLXDrawable draw, unsigned long event_mask)",
        "purpose": "select GLX events for a window or a GLX pixel buffer",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server. \n                </para>\n            </listitem>\n        ",
            "draw": "<listitem>\n                <para>\n                    Specifies a GLX drawable. Must be a GLX pixel buffer or a window.\n                </para>\n            </listitem>\n        ",
            "event_mask": "<listitem>\n                <para>\n                    Specifies the events to be returned for <parameter>draw</parameter>.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXSwapBuffers": {
        "signature": "void glXSwapBuffers(Display * dpy, GLXDrawable drawable)",
        "purpose": "exchange front and back buffers",
        "parameters": {
            "dpy": "<listitem>\n                <para>\n                    Specifies the connection to the X server.\n                </para>\n            </listitem>\n        ",
            "drawable": "<listitem>\n                <para>\n                    Specifies the drawable whose buffers are to be swapped.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXUseXFont": {
        "signature": "void glXUseXFont(Font font, int first, int count, int listBase)",
        "purpose": "create bitmap display lists from an X font",
        "parameters": {
            "font": "<listitem>\n                <para>\n                    Specifies the font from which character glyphs are to be taken.\n                </para>\n            </listitem>\n        ",
            "first": "<listitem>\n                <para>\n                    Specifies the index of the first glyph to be taken.\n                </para>\n            </listitem>\n        ",
            "count": "<listitem>\n                <para>\n                    Specifies the number of glyphs to be taken.\n                </para>\n            </listitem>\n        ",
            "listBase": "<listitem>\n                <para>\n                    Specifies the index of the first display list to be generated.\n                </para>\n            </listitem>\n        "
        }
    },
    "glXWaitGL": {
        "signature": "void glXWaitGL(void)",
        "purpose": "complete GL execution prior to subsequent X calls",
        "parameters": {}
    },
    "glXWaitX": {
        "signature": "void glXWaitX(void)",
        "purpose": "complete X execution prior to subsequent GL calls",
        "parameters": {}
    }
}